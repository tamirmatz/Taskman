[{"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/index.js":"1","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/serviceWorkerRegistration.js":"2","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/reportWebVitals.js":"3","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/App.jsx":"4","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/store.js":"5","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/routes.js":"6","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/systemReducer.js":"7","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/userReducer.js":"8","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/reviewReducer.js":"9","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/boardReducer.js":"10","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/AppHeader.jsx":"11","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/UserDetails.jsx":"12","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Board.jsx":"13","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Chat.jsx":"14","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Home.jsx":"15","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/BoardList.jsx":"16","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/userActions.js":"17","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/reviewActions.js":"18","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/boardsAction.js":"19","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/userService.js":"20","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/socketService.js":"21","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/Upload.jsx":"22","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskList.jsx":"23","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/reviewService.js":"24","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/boardService.js":"25","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/httpService.js":"26","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/cloudinaryService.js":"27","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/utilService.js":"28","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/asyncStorageService.js":"29","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskPreview.jsx":"30","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/data/board.js":"31","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalWrapper.jsx":"32","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/Overlay.jsx":"33","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MiniBoard.jsx":"34","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/UserPreview.jsx":"35","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MembersBoard.jsx":"36","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx":"37","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx":"38","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx":"39","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx":"40","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx":"41","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx":"42","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx":"43","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalAction.jsx":"44","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx":"45","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/systemAction.js":"46","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx":"47","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Login.jsx":"48","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx":"49","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx":"50","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MoveModal.jsx":"51","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/CopyModal.jsx":"52","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/GroupModal.jsx":"53"},{"size":910,"mtime":1610189396000,"results":"54","hashOfConfig":"55"},{"size":5064,"mtime":499155300000,"results":"56","hashOfConfig":"55"},{"size":364,"mtime":499155300000,"results":"57","hashOfConfig":"55"},{"size":515,"mtime":1622208933114,"results":"58","hashOfConfig":"55"},{"size":752,"mtime":1622123464533,"results":"59","hashOfConfig":"55"},{"size":605,"mtime":1622631139552,"results":"60","hashOfConfig":"55"},{"size":426,"mtime":1622658555468,"results":"61","hashOfConfig":"55"},{"size":868,"mtime":1622452229862,"results":"62","hashOfConfig":"55"},{"size":669,"mtime":1609949674000,"results":"63","hashOfConfig":"55"},{"size":668,"mtime":1622215305163,"results":"64","hashOfConfig":"55"},{"size":2756,"mtime":1622705437441,"results":"65","hashOfConfig":"55"},{"size":1405,"mtime":1622631139549,"results":"66","hashOfConfig":"55"},{"size":7795,"mtime":1622838695996,"results":"67","hashOfConfig":"55"},{"size":3395,"mtime":1622123464523,"results":"68","hashOfConfig":"55"},{"size":3007,"mtime":1622724696093,"results":"69","hashOfConfig":"55"},{"size":4951,"mtime":1622838695997,"results":"70","hashOfConfig":"55"},{"size":1966,"mtime":1622631634138,"results":"71","hashOfConfig":"55"},{"size":1321,"mtime":1622123464531,"results":"72","hashOfConfig":"55"},{"size":2107,"mtime":1622659243477,"results":"73","hashOfConfig":"55"},{"size":2097,"mtime":1622445084281,"results":"74","hashOfConfig":"55"},{"size":2324,"mtime":1622477414605,"results":"75","hashOfConfig":"55"},{"size":1709,"mtime":1622802147089,"results":"76","hashOfConfig":"55"},{"size":6464,"mtime":1622818134962,"results":"77","hashOfConfig":"55"},{"size":1087,"mtime":1622123464528,"results":"78","hashOfConfig":"55"},{"size":3211,"mtime":1622668911601,"results":"79","hashOfConfig":"55"},{"size":1093,"mtime":1622401206514,"results":"80","hashOfConfig":"55"},{"size":634,"mtime":1622729808649,"results":"81","hashOfConfig":"55"},{"size":2767,"mtime":1622811806670,"results":"82","hashOfConfig":"55"},{"size":2319,"mtime":1622289086771,"results":"83","hashOfConfig":"55"},{"size":7593,"mtime":1622817987441,"results":"84","hashOfConfig":"55"},{"size":298329,"mtime":1622473341850,"results":"85","hashOfConfig":"55"},{"size":158,"mtime":1622292625069,"results":"86","hashOfConfig":"55"},{"size":115,"mtime":1622705437461,"results":"87","hashOfConfig":"55"},{"size":530,"mtime":1622838695994,"results":"88","hashOfConfig":"55"},{"size":515,"mtime":1622636334712,"results":"89","hashOfConfig":"55"},{"size":820,"mtime":1622818134961,"results":"90","hashOfConfig":"55"},{"size":4279,"mtime":1622838695995,"results":"91","hashOfConfig":"55"},{"size":17879,"mtime":1622881548822,"results":"92","hashOfConfig":"55"},{"size":5514,"mtime":1622806762037,"results":"93","hashOfConfig":"55"},{"size":647,"mtime":1622727037391,"results":"94","hashOfConfig":"55"},{"size":4611,"mtime":1622881231759,"results":"95","hashOfConfig":"55"},{"size":1671,"mtime":1622811044558,"results":"96","hashOfConfig":"55"},{"size":2244,"mtime":1622724287973,"results":"97","hashOfConfig":"55"},{"size":213,"mtime":1622559883755,"results":"98","hashOfConfig":"55"},{"size":127,"mtime":1622705437460,"results":"99","hashOfConfig":"55"},{"size":725,"mtime":1622658555466,"results":"100","hashOfConfig":"55"},{"size":4368,"mtime":1622811044557,"results":"101","hashOfConfig":"55"},{"size":5290,"mtime":1622838695997,"results":"102","hashOfConfig":"55"},{"size":2201,"mtime":1622724287971,"results":"103","hashOfConfig":"55"},{"size":1617,"mtime":1622707689473,"results":"104","hashOfConfig":"55"},{"size":3090,"mtime":1622794511192,"results":"105","hashOfConfig":"55"},{"size":2896,"mtime":1622705437454,"results":"106","hashOfConfig":"55"},{"size":2506,"mtime":1622807168333,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1wsars6",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"110"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"110"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"110"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"110"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"110"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"110"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"110"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"110"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"110"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"110"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"110"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"110"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/index.js",[],["232","233"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/serviceWorkerRegistration.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/reportWebVitals.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/App.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/store.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/routes.js",["234"],"import { Home } from './pages/Home'\nimport { Chat } from './pages/Chat'\nimport { UserDetails } from './pages/UserDetails'\nimport { BoardList } from './pages/BoardList'\nimport { Board } from './pages/Board'\nimport { Login } from './pages/Login'\n\nexport const routes = [\n    {\n        path: '/user/:userId',\n        component: UserDetails,\n    },\n    {\n        path: '/board/:boardId',\n        component: Board,\n    },\n    {\n        path: '/login',\n        component: Login,\n    },\n    {\n        path: '/board',\n        component: BoardList\n    },\n    {\n        path: '/',\n        component: Home,\n    },\n]\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/systemReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/userReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/reviewReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/boardReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/AppHeader.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/UserDetails.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Board.jsx",["235","236"],"import { connect } from 'react-redux'\nimport { add, loadBoard, update, setBoard, remove } from '../store/actions/boardsAction.js';\nimport { loading } from '../store/actions/systemAction';\nimport { loadUsers } from '../store/actions/userActions.js'\nimport React, { Component } from 'react'\nimport { TaskList } from '../cmps/board/TaskList'\nimport { BoardNavbar } from '../cmps/board/boardNavbar/BoardNavbar'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Route, Switch } from 'react-router';\nimport { TaskDetails } from '../cmps/board/taskDetails/TaskDetails';\nimport { boardService } from '.././services/boardService.js'\nimport { utilService } from '../services/generalService/utilService.js'\nimport { socketService } from '../services/generalService/socketService.js'\nimport { ModalWrapper } from '../cmps/shared/ModalWrapper.jsx';\n\nconst EMPTY_GROUP = { title: '' }\n\nclass _Board extends Component {\n    state = {\n        group: EMPTY_GROUP,\n    }\n\n    componentDidMount() {\n        const { boardId } = this.props.match.params\n        this.props.loadBoard(boardId);\n        this.props.loadUsers();\n        socketService.setup()\n        socketService.on('updated board', (board) => {\n            if (boardId !== board._id) return\n            this.props.setBoard(board)\n        })\n        socketService.emit('add member', boardId)\n        this.removeClassName();\n    }\n\n    componentWillUnmount() {\n        socketService.off('updated board', this.props.setBoard)\n        socketService.terminate()\n    }\n\n    favBoard = () => {\n        let board = { ...this.props.board }\n        board.isFavorite = board.isFavorite ? false : true;\n        this.props.update(board)\n    }\n\n\n    onUpdate = (updateBoard) => {\n        console.log(updateBoard)\n        this.props.update(updateBoard)\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            group: {\n                ...prevState.group,\n                [field]: value,\n            }\n        }))\n    }\n\n    removeBoard = () => {\n        this.props.remove(this.props.board._id)\n        this.props.history.push('/board')\n    }\n\n\n    removeClassName() {\n        if (document.querySelector('.board')) {\n            document.querySelector('.board').classList.remove('max-screen');\n        }\n    };\n\n    onAddGroup = () => {\n        const copyBoard = { ...this.props.board };\n        this.setState({ group: { ...this.state.group, id: utilService.makeId() } })\n        copyBoard.groups.push(utilService.formatNewGroup(this.state.group))\n        this.props.update(copyBoard)\n        this.setState({ group: EMPTY_GROUP })\n    }\n\n    onDragEnd = res => {\n        const { destination, source, type } = res\n        if (!destination) return\n        if (destination.droppableId === source.droppableId &&\n            destination.index === source.index) return\n        const copyBoard = JSON.parse(JSON.stringify(this.props.board))\n        const activity = {}\n        if (type === 'task') {\n            const sourceListIdx = boardService.getGroupIdxById(copyBoard, source.droppableId)\n            const destinationListIdx = boardService.getGroupIdxById(copyBoard, destination.droppableId)\n            const task = copyBoard.groups[sourceListIdx].tasks.splice(source.index, 1)\n            copyBoard.groups[destinationListIdx].tasks.splice(destination.index, 0, task[0])\n            const sourceListName = copyBoard.groups[sourceListIdx].title\n            const destinationListName = copyBoard.groups[destinationListIdx].title\n            activity.txt = `has moved ${task[0].title} from ${sourceListName} to ${destinationListName}`\n            console.log(activity.txt)\n        }\n        else {\n            const list = copyBoard.groups.splice(source.index, 1)\n            copyBoard.groups.splice(destination.index, 0, list[0])\n            activity.txt = `has moved list ${list[0].title}`\n        }\n        this.props.update(copyBoard)\n        console.log('Moved and updated!', copyBoard)\n    }\n\n    onCloseDetails = () => {\n        this.props.history.push(`/board/${this.props.board._id}`)\n\n    }\n    render() {\n        const { board } = this.props;\n        if (!board) {\n            return <div className=\"loader w-100 h-100 flex center content-center\">Loading...</div>\n        }\n        // loading ui\n        // this.props.loading();\n        // if(this.props.isLoading) return <h1 className=\"w-100 h-100 flex center content-center\">Loading...</h1>\n        if (this.props.isLoading) return <div className=\"loader w-100 h-100 flex center content-center\">Loading...</div>\n\n\n        return (\n            <DragDropContext\n                onDragEnd={this.onDragEnd}\n            >\n                <div style={{ backgroundImage: board.style ? \"url(\" + board.style + \")\" : 'https://trello-backgrounds.s3.amazonaws.com/SharedBackground/2286x1600/24baa6609b89fb8eb0cc0aceb70eaf36/photo-1557682250-33bd709cbe85.jpg' }} className=\"board flex column  animate__animated animate__fadeInRight \">\n                    <BoardNavbar favBoard={this.favBoard} removeBoard={this.removeBoard} users={this.props.users} board={board} updateBoard={this.onUpdate} />\n\n                    <div className=\"board-list flex w-100 \"\n\n                    >\n                        <Droppable droppableId={board._id}\n                            direction=\"horizontal\"\n                            type=\"group\"\n                        >\n                            {provided => (\n                                <ul\n                                    className=\"groups clean-list flex \"\n                                    {...provided.droppableProps}\n                                    ref={provided.innerRef}\n                                >\n                                    {board && board.groups.map((group, idx) =>\n                                        <TaskList\n                                            index={idx}\n                                            key={group.id}\n                                            board={board}\n                                            group={group}\n                                            updateBoard={this.onUpdate}\n                                        />)}\n                                    {provided.placeholder}\n                                </ul>\n\n                            )}\n                        </Droppable>\n                        <div className=\"group add-group flex\">\n                            <form onSubmit={(ev) => {\n                                ev.preventDefault()\n                                this.onAddGroup()\n                            }}>\n                                <input className=\"add-group\" value={this.state.group.title} type=\"text\" placeholder=\"+ Add another list\" name=\"title\" onChange={this.handleChange} />\n                            </form>\n                        </div>\n                    </div>\n\n                    <Switch>\n                        <Route\n                            path={'/board/:boardId/:groupId/:taskId'}\n                            render={(props) => <ModalWrapper onClick={this.onCloseDetails}>\n                                <TaskDetails {...props} />\n                            </ModalWrapper>}>\n                        </Route>\n                    </Switch>\n                </div>\n            </DragDropContext>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n        isLoading: state.systemModule.isLoading,\n        users: state.userModule.users\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    loadBoard,\n    update,\n    loadUsers,\n    setBoard\n    // loading\n}\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Chat.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Home.jsx",["237","238","239","240","241","242","243","244","245"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport MainImg from '../assets/img/home/main-img.svg'\r\nimport TeamworkImg from '../assets/img/home/teamwork.svg'\r\nimport TimeImg from '../assets/img/home/time.svg'\r\nimport OrganizeImg from '../assets/img/home/organize.svg'\r\nimport { loadReviews, addReview, removeReview } from '../store/actions/reviewActions.js'\r\nimport { loadUsers } from '../store/actions/userActions.js'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport class Home extends Component {\r\n  state = {\r\n\r\n  }\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  handleChange = ev => {\r\n    const { name, value } = ev.target\r\n    this.setState(prevState => ({\r\n      reviewToEdit: {\r\n        ...prevState.reviewToEdit,\r\n        [name]: value\r\n      }\r\n    }))\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"home-page flex column fam-1 \">\r\n        <div className=\"flex row-reverse mt-5 space-evenly \">\r\n          <div className=\"align-center flex column \">\r\n              <div className=\"c-stand  marg-2 ps-2 font-xl\"><span className=\"logo-span\">T</span>askman</div>\r\n              <h1 className=\"fam-1 fs30 bold \">Task management</h1>\r\n              <h2 className=\"fam-1 fs30 bold\">The <span className=\"main-color\">easiest</span> way. </h2>\r\n              <Link to=\"/board/60b8a57c6845c04afc9a425a\"><button class=\"btn-hover color-3\">Try it now!</button></Link>\r\n          </div>\r\n          <img className=\"main-img w-50\" src={MainImg}/>\r\n        </div>\r\n        <div className=\"features flex row space-between\">\r\n          <div className=\"feature flex column\">\r\n            <div className=\"feature-txt flex column\">\r\n            <h3 className=\"fam-1 bold\">All the tools your team needs</h3>\r\n            <span>Organize and assign tasks.</span>\r\n            <span>With lists, teams see immediately what they need to do,</span>\r\n            <span>which tasks are a priority, and when work is due.</span>\r\n            </div>\r\n          <img className=\"feature-img w-30\" src={TeamworkImg}/>\r\n          </div>\r\n          <div className=\"feature flex column\">\r\n            <div className=\"feature-txt flex column\">\r\n            <h3 className=\"fam-1 bold\">Manage your time wisely</h3>\r\n            <span>Instantly see which projects are on track,</span>\r\n            <span>which ones are falling behind,</span>\r\n            <span>and what every team member is working on at a glance.</span>\r\n            </div>\r\n          <img className=\"feature-img w-25\" src={TimeImg}/>\r\n          </div>\r\n          <div className=\"feature flex column\">\r\n            <div className=\"feature-txt flex column\">\r\n            <h3 className=\"fam-1 bold\">Organize anything with anyone, anywhere</h3>\r\n            <span>Choose the project view that suits your style,</span>\r\n            <span> and collaborate no matter where you are.</span>\r\n            </div>\r\n          <img className=\"feature-img \" src={OrganizeImg}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/BoardList.jsx",["246","247","248","249","250","251","252","253","254"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { remove, add, query } from '../store/actions/boardsAction.js';\nimport { MiniBoard } from '../cmps/board/MiniBoard'\nimport p0 from '../assets/img/background/0.jpg'\nimport p1 from '../assets/img/background/1.jpg'\nimport p2 from '../assets/img/background/2.jpg'\nimport p3 from '../assets/img/background/3.jpg'\nimport p4 from '../assets/img/background/4.jpg'\nimport p5 from '../assets/img/background/5.jpg'\nimport p6 from '../assets/img/background/6.jpg'\nimport p7 from '../assets/img/background/7.jpg'\nimport { Board } from './Board.jsx';\n\nclass _BoardList extends Component {\n    state = {\n        newBoard: {\n            title: '',\n            backgroundId: 0,\n            backgrounds: [\n                'https://trello-backgrounds.s3.amazonaws.com/SharedBackground/2286x1600/24baa6609b89fb8eb0cc0aceb70eaf36/photo-1557682250-33bd709cbe85.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671389/backrounds/0_jflqwf.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671416/backrounds/1_gavwov.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671401/backrounds/2_gstip0.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671395/backrounds/3_mqwgkk.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671404/backrounds/4_ly2zj7.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671550/backrounds/5_g7oe20.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671430/backrounds/6_mi6wun.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671421/backrounds/7_oivv0t.jpg',\n\n            ]\n        }\n    }\n    componentDidMount() {\n        this.props.query()\n\n    }\n    componentDidUpdate(){\n        this.props.query()\n    }\n\n    onCreateBoard = () => {\n        const { title, backgrounds, backgroundId } = this.state.newBoard\n        this.props.add(title, backgrounds[backgroundId])\n    }\n\n    changeImg = (num) => {\n        const { backgroundId, backgrounds } = this.state.newBoard\n        if (backgroundId + num === backgrounds.length || backgroundId + num === -1) num = 0\n        this.setState(prevState => ({\n            newBoard: {\n                ...prevState.newBoard,\n                backgroundId: backgroundId + num,\n            }\n        }), console.log(this.state.newBoard.backgroundId))\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            newBoard: {\n                ...prevState.newBoard,\n                [field]: value,\n            }\n        }))\n    }\n\n\n    render() {\n        const boards = this.props.boards\n        console.log(boards);\n        return (\n            <section className=\" w-100 flex column center content-center pad-3\">\n                <h1 className=\"fam-1\">Choose Your Board List</h1>\n                <div className=\"boards-gallary flex h-40 w-100 gap-2 wrap\">\n                    {boards && boards.map(board => <Link key={board._id} to={`board/${board._id}`}><MiniBoard board={board} /></Link>)}\n                    <section className={\"miniBoard flex center content-center\"} style={{ backgroundImage: \"url(\" + this.state.newBoard.backgrounds[this.state.newBoard.backgroundId] + \")\" }}>\n                        <form className=\"add-board\" onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.onCreateBoard()\n                        }}>\n                            <input type=\"text\" name=\"title\" onChange={this.handleChange} placeholder=\"Board title...\" />\n                       \n\n                                <div className=\"change-img-container flex space-between\">\n\n                                    <span className=\"change-img\" onClick={() => { this.changeImg(-1) }}>{'<'}</span>\n                                    <button>Create board</button>\n                                    <span className=\"change-img\" onClick={() => { this.changeImg(1) }}>{'>'}</span>\n                                </div>\n                        </form>\n                    </section>\n                    {!boards && <h1 >No boards to show</h1>}\n                </div>\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        boards: state.boardModule.boards\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    query\n}\nexport const BoardList = connect(mapStateToProps, mapDispatchToProps)(_BoardList)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/userActions.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/reviewActions.js",["255","256"],"import { reviewService } from '../../services/reviewService'\r\nimport { userService } from '../../services/userService'\r\nimport { socketService, SOCKET_EVENT_REVIEW_ADDED } from '../../services/generalService/socketService'\r\n\r\n\r\nexport function loadReviews() {\r\n  return async dispatch => {\r\n    try {\r\n      const reviews = await reviewService.query()\r\n      dispatch({ type: 'SET_REVIEWS', reviews })\r\n\r\n      // socketService.on(SOCKET_EVENT_REVIEW_ADDED, review =>{\r\n      //   dispatch({ type: 'ADD_REVIEW', review })\r\n      // })\r\n\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in loadReviews', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addReview(review) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedReview = await reviewService.add(review)\r\n      dispatch({ type: 'ADD_REVIEW', review: addedReview })\r\n\r\n      const score = await userService.increaseScore()\r\n      dispatch({ type: 'SET_SCORE', score })\r\n      \r\n    } catch (err) {\r\n      console.log('ReviewActions: err in addReview', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeReview(reviewId) {\r\n  return async dispatch => {\r\n    try {\r\n      await reviewService.remove(reviewId)\r\n      dispatch({ type: 'REMOVE_REVIEW', reviewId })\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in removeReview', err)\r\n    }\r\n  }\r\n}\r\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/boardsAction.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/userService.js",["257"],"// import { storageService } from './asyncStorageService'\r\nimport { httpService } from './generalService/httpService'\r\nconst SCORE_FOR_REVIEW = 10\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getUsers,\r\n    getById,\r\n    remove,\r\n    update,\r\n    getLoggedinUser\r\n}\r\n\r\nwindow.userService = userService\r\n// Note: due to async, must run one by one...\r\n// userService.signup({fullname: 'Puki Norma', username: 'user1', password:'123',score: 100, isAdmin: false})\r\n// userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 100, isAdmin: true})\r\n\r\nfunction getUsers() {\r\n    // return storageService.query('user')\r\n    return httpService.get(`user`)\r\n}\r\n\r\nfunction getById(userId) {\r\n    // return storageService.get('user', userId)\r\n    return httpService.get(`user/${userId}`)\r\n}\r\nfunction remove(userId) {\r\n    // return storageService.remove('user', userId)\r\n    return httpService.delete(`user/${userId}`)\r\n}\r\n\r\nasync function update(user) {\r\n    // return storageService.put('user', user)\r\n    user = await httpService.put(`user/${user._id}`, user)\r\n    // Handle case in which admin updates other user's details\r\n    if (getLoggedinUser()._id === user._id) _saveLocalUser(user)\r\n}\r\n\r\nasync function login(userCred) {\r\n    // const users = await storageService.query('user')\r\n    // const user = users.find(user => user.username === userCred.username)\r\n    // return _saveLocalUser(user)\r\n\r\n    const user = await httpService.post('auth/login', userCred)\r\n    if (user) return _saveLocalUser(user)\r\n}\r\nasync function signup(userCred) {\r\n    // const user = await storageService.post('user', userCred)\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _saveLocalUser(user)\r\n}\r\nasync function logout() {\r\n    sessionStorage.clear()\r\n    return await httpService.post('auth/logout')\r\n}\r\nfunction _saveLocalUser(user) {\r\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n    return user\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    return JSON.parse(sessionStorage.getItem('loggedinUser'))\r\n}\r\n\r\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/socketService.js",["258"],"import io from 'socket.io-client'\nimport {httpService} from './httpService'\n\nexport const SOCKET_EMIT_USER_WATCH = 'user-watch';\nexport const SOCKET_EVENT_USER_UPDATED = 'user-updated';\nexport const SOCKET_EVENT_REVIEW_ADDED = 'review-added';\n\n\nconst baseUrl = (process.env.NODE_ENV === 'production')? '' : '//localhost:3030'\n// export const socketService = createSocketService()\nexport const socketService = createSocketService()\n\nwindow.socketService = socketService\n\nvar socketIsReady = false;\n// socketService.setup()\n\n\nfunction createSocketService() {\n  var socket = null;\n  const socketService = {\n    async setup() {\n      if (socket) return\n      await httpService.get('setup-session')\n      socket = io(baseUrl, { reconnection: false})\n      socketIsReady = true;\n    },\n    async on(eventName, cb) {\n      if (!socket) await socketService.setup()\n      socket.on(eventName, cb)\n    },\n    async off(eventName, cb=null) {\n      if (!socket) await socketService.setup()\n      if (!cb) socket.removeAllListeners(eventName)\n      else socket.off(eventName, cb)\n    },\n    async emit(eventName, data) {\n      if (!socket) await socketService.setup()\n      socket.emit(eventName, data)\n    },\n    terminate() {\n      socket = null\n      socketIsReady = false\n    }\n  }\n  return socketService\n}\n\n// eslint-disable-next-line\nfunction createDummySocketService() {\n  var listenersMap = {}\n  const socketService = {\n    listenersMap,\n    setup() {\n      listenersMap = {}\n    },\n    terminate() {\n      this.setup()\n    },\n    on(eventName, cb) {\n      listenersMap[eventName] = [...(listenersMap[eventName]) || [], cb]\n    },\n    off(eventName, cb) {\n      if (!listenersMap[eventName]) return\n      if (!cb) delete listenersMap[eventName]\n      else listenersMap[eventName] = listenersMap[eventName].filter(l => l !== cb)\n    },\n    emit(eventName, data) {\n      if (!listenersMap[eventName]) return\n      listenersMap[eventName].forEach(listener => {\n        listener(data)\n      })\n    },\n    debugMsg() {\n      this.emit('chat addMsg', {from: 'Someone', txt: 'Aha it worked!'})\n    },\n  }\n  return socketService\n}\n\n\n// Basic Tests\nfunction cb(x) {console.log(x)}\nsocketService.on('baba', cb)\nsocketService.on('mama', cb)\nsocketService.on('lala', cb)\nsocketService.emit('baba', 'DATA')\n// socketService.off('baba', cb)\n\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/Upload.jsx",["259","260"],"import { Component } from 'react'\r\nimport { cloudinaryService } from '../services/generalService/cloudinaryService'\r\nimport { BsImage } from 'react-icons/bs'\r\nimport { remove, add, loadBoard, update } from '../store/actions/boardsAction.js'\r\nimport { connect } from 'react-redux'\r\nimport {boardService} from '../services/boardService.js'\r\n\r\n\r\nclass _Upload extends Component {\r\n  state = {\r\n    imgUrl: null,\r\n    minHeight: 300,\r\n    maxHeight: 200,\r\n    height: 'auto',\r\n    width: 200,\r\n    isUploading: false\r\n  }\r\n\r\n  uploadImg = async (ev) => {\r\n    this.setState({ isUploading: true })\r\n    const { secure_url, height, width } = await cloudinaryService.uploadImg(ev)\r\n    this.setState({ isUploading: false, imgUrl: secure_url, height, width },()=> {this.props.addImgToTask(this.state.imgUrl)})\r\n  }\r\n  get uploadMsg() {\r\n    const { imgUrl, isUploading } = this.state\r\n    if (imgUrl) return 'Upload Another?'\r\n    return isUploading ? 'Uploading....' : 'Upload Image'\r\n  }\r\n  render() {\r\n    const { imgUrl, width, height } = this.state\r\n    const previewStyle = {\r\n      backgroundImage: `url(${imgUrl})`,\r\n      width,\r\n      height\r\n    }\r\n    return (\r\n      <div>\r\n        <label className=\"btn-action\" htmlFor=\"imgUpload\"><BsImage className=\"action-icon\" />Image</label>\r\n        <input hidden type=\"file\" onChange={ this.uploadImg } accept=\"img/*\" id=\"imgUpload\" />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n      loggedInUser: state.userModule.loggedInUser,\r\n      board: state.boardModule.board\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  remove,\r\n  add,\r\n  loadBoard,\r\n  update\r\n}\r\nexport const Upload = connect(mapStateToProps, mapDispatchToProps)(_Upload)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskList.jsx",["261","262"],"import { TaskPreview } from '../board/TaskPreview'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Component } from 'react';\nimport { boardService } from '../../services/boardService.js'\nimport { utilService } from '../../services/generalService/utilService.js'\nimport { GroupModal } from './taskDetails/action/actionModal/GroupModal'\nconst EMPTY_TASK = { title: '' }\nconst EMPTY_GROUP = { title: '' }\n\nexport class TaskList extends Component {\n    state = {\n        group: EMPTY_GROUP,\n        task: EMPTY_TASK\n    }\n    componentDidMount() {\n        this.setState({ group: this.props.group })\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            task: {\n                ...prevState.task,\n                [field]: value,\n            }\n        }))\n    }\n\n    updateGroup = () => {\n        if (!this.state.group.title) return;\n        const copyBoard = { ...this.props.board };\n        this.props.updateBoard(copyBoard)\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\n        copyBoard.groups[groupIdx] = this.state.group\n        console.log(copyBoard)\n    }\n\n    handleChangeGroup = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            group: {\n                ...prevState.group,\n                [field]: value,\n            }\n        }))\n    }\n\n    onAddTask = () => {\n        if (!this.state.task.title) return;\n        const { group } = this.props\n        const copyBoard = { ...this.props.board };\n        const groupIdx = boardService.getGroupIdxById(copyBoard, group.id)\n        copyBoard.groups[groupIdx].tasks.push(utilService.formatNewTask(this.state.task))\n        console.log(this.state.task)\n        this.setState({ task: EMPTY_TASK })\n        this.props.updateBoard(copyBoard)\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n\n    render() {\n        const { board, group, updateBoard, index } = this.props\n\n        return (\n            <Draggable index={index} draggableId={group.id} >\n                {(provided, snapshot) => {\n                    return <li className=\"group br-3\"\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                    >\n                        <form className=\"\" onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.updateGroup()\n\n                        }}>\n                            <div className=\"group-title w-100 flex center space-between pb-2\">\n                                <input\n                                    className=\"app-input font-w2 font-m lh-20 \"\n                                    onBlur={this.updateGroup}\n                                    type=\"text\"\n                                    value={this.state.group.title}\n                                    name=\"title\"\n                                    onChange={this.handleChangeGroup}\n                                />\n                                <div className=\"group-menu\" >\n                                    <div className=\"btn\" onMouseDown={(ev) => {\n                                            if(ev.button == 0){\n                                                this.toggleModal(`${this.state.group.id}`)\n                                            }\n                                        }\n                                    }\n                                    >...</div>\n                                    <GroupModal\n                                     toggleModal={() => {this.toggleModal()}} \n                                     group={group}\n                                     />\n                                </div>\n                            </div>\n                        </form>\n                        <div className=\"wrap-task-list\">\n\n                            <div className=\"task-list flex column center content-center\">\n                                <Droppable\n                                    droppableId={group.id}\n                                    type='task'>\n                                    {(provided) => (\n                                        <div className=\"task-list-droppable\"\n                                            ref={provided.innerRef}\n                                            {...provided.droppableProps}\n                                        >\n                                            {group.tasks.map((task, idx) => (\n                                                <TaskPreview key={task.id}\n                                                    board={board}\n                                                    index={idx}\n                                                    groupId={group.id}\n                                                    updateBoard={updateBoard}\n                                                    task={task}\n                                                />\n                                            ))}\n                                            {!utilService.isFalse(group.tasks) && <h1 className=\"task-title fam-1 font-m\">No tasks to show</h1>}\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </div>\n                            <form onSubmit={(ev) => {\n                                ev.preventDefault()\n                                this.onAddTask()\n                                console.log(ev)\n                            }}>\n                                <input className=\"add-task\" value={this.state.task.title} type=\"text\" placeholder=\"+ Add a card\" name=\"title\" onChange={this.handleChange} />\n                            </form>\n                        </div>\n                    </li>\n                }}\n            </Draggable>)\n        /*    </div> */\n    }\n}","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/reviewService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/boardService.js",["263","264"],"import { utilService } from './generalService/utilService.js'\r\nimport { storageService } from './generalService/asyncStorageService.js'\r\nimport {httpService} from '../services/generalService/httpService.js'\r\n\r\nwindow.storageService = storageService;\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    update,\r\n    add,\r\n    getGroupById,\r\n    getTaskById,\r\n    getGroupIdxById,\r\n    checklistPreview,\r\n    getTaskIdxById,\r\n    checklistPrecent,\r\n    updateTaskAtBoard\r\n}\r\n\r\n\r\nfunction query() {\r\n    // return storageService.query(STORAGE_KEY)\r\n    return httpService.get('board')\r\n}\r\n\r\nfunction getById(boardId) {\r\n    // const board = storageService.get(STORAGE_KEY, boardId);\r\n    // return board\r\n    return httpService.get(`board/${boardId}`)\r\n\r\n}\r\n\r\nfunction remove(boardId) {\r\n    return httpService.delete(`board/${boardId}`)\r\n}\r\n\r\nasync function add(title, background) {\r\n    console.log(title,background)\r\n    // const newBoard = _createBoard()\r\n    // const savedBoard = storageService.post(STORAGE_KEY, newBoard)\r\n    // return savedBoard\r\n    const board = {title ,style:{background}}\r\n    console.log(board)\r\n    const res = await httpService.post(`board`, board)\r\n    return res\r\n}\r\n\r\nasync function update(board) {\r\n    // return storageService.put(STORAGE_KEY, board)\r\n    board.activities = []\r\n    \r\n    const res = await httpService.put(`board/${board._id}`, board)\r\n    return res\r\n\r\n}\r\n\r\n//task crud\r\nfunction getGroupById(board, groupId) {\r\n    return board.groups.find(group => group.id === groupId);\r\n}\r\n\r\nfunction getGroupIdxById(board, groupId) {\r\n    return board.groups.findIndex(group => group.id === groupId);\r\n}\r\n\r\nfunction getTaskIdxById(group, taskId) {\r\n    return group.tasks.findIndex(task => task.id === taskId);\r\n}\r\n\r\nfunction getTaskById(group, taskId) {\r\n    return group.tasks.find(task => task.id === taskId)\r\n}\r\n\r\nfunction checklistPreview(task) {\r\n    const checklists = task.checklists\r\n    let isDone = false\r\n    let allTodos = 0;\r\n    let doneTodos = 0;\r\n    checklists.forEach(checkList => {\r\n        allTodos += checkList.todos.length;\r\n        checkList.todos.forEach(todo => {\r\n            if (todo.isDone) doneTodos++\r\n        })\r\n    });\r\n    if (doneTodos === allTodos && allTodos) isDone = true;\r\n    const str = `${doneTodos}/${allTodos}`\r\n    const res = { str, isDone}\r\n    return res\r\n}\r\n\r\nfunction checklistPrecent(checklist){\r\n    let doneTodos = 0;\r\n    checklist.todos.forEach(todo => {\r\n        if(todo.isDone) doneTodos++\r\n    })\r\n    const precent = (doneTodos / checklist.todos.length) * 100 \r\n    \r\n    return precent\r\n}\r\n\r\nfunction _updateTaskAtGroup(group, updateTask){\r\n    const idx = group.tasks.findIndex( task => {\r\n        task.id = updateTask.id;\r\n    })\r\n    group.tasks.splice(idx, 1, updateTask);\r\n    return group;\r\n}\r\n\r\nfunction _updateGroupAtBoard( board ,updateGroup){\r\n    const idx = getGroupIdxById(board, updateGroup.id)\r\n    board.groups[idx] = updateGroup;\r\n    return board;\r\n}\r\n\r\nfunction updateTaskAtBoard(board,group, updateTask){\r\n    const updateGroup =  _updateTaskAtGroup(group, updateTask);\r\n    const updateBoard = _updateGroupAtBoard(board, updateGroup);\r\n    return updateBoard;\r\n}","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/httpService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/cloudinaryService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/utilService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/asyncStorageService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskPreview.jsx",["265","266","267","268","269","270","271"],"import { Link } from 'react-router-dom'\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Provider } from 'react-redux';\nimport { boardService } from '../../services/boardService.js'\nimport { BsCheckBox } from 'react-icons/bs'\nimport { FaRegCommentDots } from 'react-icons/fa'\nimport { AiOutlineClockCircle, AiOutlineClose } from 'react-icons/ai'\nimport { GrTextAlignFull } from 'react-icons/gr'\nimport { connect } from 'react-redux'\nimport { utilService } from '../../services/generalService/utilService'\nimport React, { Component } from 'react'\nimport { UserPreview } from './UserPreview.jsx';\n\nimport { toggleLabel } from '../../store/actions/systemAction.js';\n\n\n\n// export function TaskPreview({ board, index, task, updateBoard, groupId }) {\nclass _TaskPreview extends Component {\n\n    getStyle = (style, snapshot) => {\n        if (!snapshot.isDropAnimating) {\n            return style;\n        }\n        const { moveTo, curve, duration } = snapshot.dropAnimation;\n        // move to the right spot\n        const translate = `translate(${moveTo.x}px, ${moveTo.y}px)`;\n        // add a bit of turn for fun\n        const rotate = 'rotate(0.01turn)';\n\n        // patching the existing style\n        return {\n            ...style,\n            background: '#fff',\n            transform: `${translate} ${rotate}`,\n            // slowing down the drop because we can\n            transition: `all ${curve} 0.2s`,\n        };\n    }\n\n    onRemoveTask = (taskId) => {\n        const { board, index, task, updateBoard, groupId } = this.props\n        const group = board.groups[boardService.getGroupIdxById(board, groupId)]\n        board.groups[boardService.getGroupIdxById(board, groupId)].tasks.splice(boardService.getTaskIdxById(group, taskId), 1)\n        updateBoard({ ...board })\n    }\n\n    dueDateDonePreview = (task) => {\n        if(task.isDone) return 'done-preview'\n        else return ''\n     }\n    render() {\n        const { board, index, task, updateBoard, groupId } = this.props\n        const isLabelOpen = this.props.isLabelOpen;\n        return <Draggable\n            draggableId={task.id}\n            index={index}\n        // isDragDisabled={false}\n        >\n            {(provided, snapshot) => {\n                return (\n                    <div\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isdragging={snapshot.isDragging && !snapshot.isDropAnimating ? 'true' : 'false'}\n                        style={this.getStyle(provided.draggableProps.style, snapshot)}\n                    >\n                        <div className=\"wrap-list-task br-3\">\n                            <div className=\"wrap-task-prev\">\n                            {task.imgUrl && <img className=\"preview-img\" src={task.imgUrl}/> }\n                                <div className=\"task-preview flex column\">\n                                    {/* <Link to={`/board/${board._id}/${task.id}`}> */}\n                                    <span className=\"cur-pointer fam-1 font-s bold flex d-none \" onClick={() => { this.onRemoveTask(task.id) }}><AiOutlineClose className=\"preview-icon\" /></span>\n                                    {utilService.isFalse(task.labelIds) &&\n                                                <div className=\"labels-container flex  wrap\" onClick={(ev) => {\n                                                    ev.stopPropagation();\n                                                }}>\n                                                    {\n                                                        task.labelIds.map(labelId => {\n                                                            const label = board.labels.find(label => {\n                                                                return label.id === labelId;\n                                                            })\n\n                                                            if (label) {\n                                                                return <div\n                                                                    key={label.id}\n                                                                    className={`preview-label flex  ${isLabelOpen && \"label-open\"}`}\n                                                                    onClick={() => this.props.toggleLabel(!isLabelOpen)}\n                                                                    style={{ backgroundColor: label.color }}\n                                                                >\n                                                                    {this.props.isLabelOpen && label.title}\n                                                                </div>\n                                                            }\n                                                        })}\n\n                                        </div>\n                                    }\n\n                                    <Link to={`/board/${board._id}/${groupId}/${task.id}`}>\n\n\n                                        <h1 className=\"task-title fam-1 font-m\">{task.title}</h1>\n                                        <div className=\"task-mini-details flex row-reverse w-100 space-between gap-xs fam-1 c-stand center\">\n                                            <div>\n                                            {utilService.isFalse(task.members) && <small className=\"flex center\">{task.members.map(member => { return <UserPreview key={member._id} user={member} /> }).splice(0, 3)}</small>}\n                                            </div>\n                                            <div className=\"flex\">\n                                            {utilService.isFalse(task.comments) && <small className=\"flex center\"><FaRegCommentDots className=\"preview-icon\" /></small>}\n                                            {utilService.isFalse(task.checklists) && <div className={`preview-icon flex row center ${boardService.checklistPreview(task).isDone && \"done-preview\"}`}>\n                                                <BsCheckBox className=\"preview-icon\" />\n                                                <small>{boardService.checklistPreview(task).str}</small>\n                                            </div>}\n                                            {task.dueDate && <div className={`preview-icon flex row center ${this.dueDateDonePreview(task)}`}>\n                                                <AiOutlineClockCircle className=\"preview-icon\" />\n                                                <small>\n                                                    { utilService.getFormattedDate(task.dueDate) }\n                                                </small>\n                                            </div>}\n                                            {task.description && <small className=\"flex center\"><GrTextAlignFull className=\"preview-icon\" /></small>}\n                                            </div>\n                                        </div>\n                                    </Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n            }\n        </Draggable>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n        isLabelOpen : state.systemModule.isLabelsOpen\n    }\n}\nconst mapDispatchToProps = {\n    toggleLabel\n}\nexport const TaskPreview = connect(mapStateToProps, mapDispatchToProps)(_TaskPreview)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/data/board.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalWrapper.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/Overlay.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MiniBoard.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/UserPreview.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MembersBoard.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx",["272"],"import { MembersBoard } from '../MembersBoard';\nimport { MdKeyboardArrowDown } from 'react-icons/md'\nimport { RiDashboardLine } from 'react-icons/ri'\nimport { AiOutlineStar } from 'react-icons/ai'\nimport { Component } from 'react';\nimport { BoardMembersModal } from './BoardMembersModal'\n\n\n\nexport class BoardNavbar extends Component {\n    state = {\n        title: this.props.board.title,\n        members: this.props.board.members\n    }\n\n\n    onAddMemberToBoard = (addedMember) => {\n        const { members } = this.state\n        const memberIdx = members.findIndex(member => member._id === addedMember._id)\n        if (memberIdx !== -1) {\n            members.splice(memberIdx, 1)\n        }\n        else members.push(addedMember)\n        const copyBoard = { ...this.props.board }\n        copyBoard.members = members\n        console.log(members)\n        this.props.updateBoard(copyBoard)\n    }\n\n    isMemberChecked = (memberCheck) => {\n        const memberIdx = this.state.members.findIndex(member => member._id === memberCheck._id)\n        if (memberIdx !== -1) {\n            return 'checked'\n        }\n        else return ''\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n    onChangeBoardName = () => {\n        const board = this.props.board\n        board.title = this.state.title\n        this.props.updateBoard(board)\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n        this.setState({ [field]: value })\n    }\n    render() {\n        const { board, onUpdate } = this.props\n        if (!board) return <div>Loading...</div>\n        return (\n            <nav className=\"board-navbar flex space-between font-1 c-white fam-1 mb-03\">\n                <ul className=\"left-bar flex center space-evenly \">\n                    <li className=\"btn-board\"><RiDashboardLine />Board<MdKeyboardArrowDown /></li>\n                    <li className=\"btn-board \"><AiOutlineStar /></li>\n                    <li className=\"btn-board bold\"><form onSubmit={(ev) => {\n                        ev.preventDefault()\n                        this.onChangeBoardName(ev)\n                    }}>\n                        <input type=\"text\" className=\"app-input nav-board-input font-w2 font-m lh-20 \" name=\"title\" onChange={this.handleChange} value={this.state.title} onBlur={this.onChangeBoardName} />\n                    </form></li>\n                    <li className=\"btn-board\">Visiblity</li>\n                    <li className=\"members-wrap\">\n                        <li className=\"btn-board \" onClick={() => { this.toggleModal('board-members-wrap-modal') }}>Invite</li>\n                        <BoardMembersModal users={this.props.users} isMemberChecked={this.isMemberChecked} onAddMemberToBoard={this.onAddMemberToBoard} toggleModal={() => { this.toggleModal() }} />\n                    </li>\n                    <li className=\"btn-board\" ><MembersBoard /></li>\n                </ul>\n                <ul className=\"right-bar flex center\">\n                    <li className=\"btn-board\">Show-menu</li>\n                </ul>\n            </nav>\n        )\n    }\n}\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx",["273","274","275","276","277"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx",["278","279","280"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/systemAction.js",["281"],"import { utilService } from '../../services/generalService/utilService';\n\nexport function loading() { // Action Creator\n    return async dispatch => {\n        try {\n            dispatch('LOADING_DONE');\n            dispatch('LOADING_START');\n            setTimeout(() => {\n                dispatch('LOADING_DONE');\n            }, 1500);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport function toggleLabel(toggleValue) {\n    return async dispatch => {\n        try {\n            const action = {\n                type: 'TOGGLE_LABEL',\n                value: toggleValue\n            }\n            dispatch(action)\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx",["282","283","284"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { FiEdit2 } from 'react-icons/fi'\nimport { withRouter } from \"react-router\";\nimport { update } from '../../../../store/actions/boardsAction';\nimport { boardService } from '../../../../services/boardService';\n\nclass _LabelTask extends Component {\n    state = {\n        isDisable: true,\n        title: this.props.label.title ? this.props.label.title:'',\n        task: null,\n        group: null\n    }\n\n    componentDidMount() {\n        const { taskId, groupId } = this.props.match.params;\n        const board = this.props.board;\n        const group = boardService.getGroupById(board, groupId);\n        const task = boardService.getTaskById(group, taskId);\n        this.setState({ ...this.state, task: task, group: group });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props !== prevProps) {\n            const { boardId, taskId, groupId } = this.props.match.params;\n            const board = { ...this.props.board };\n            const group = boardService.getGroupById(board, groupId);\n            const task = boardService.getTaskById(group, taskId);\n            this.setState({ ...this.state, task: task, group: group });\n        }\n\n    }\n\n    toggleLabel(labelId) {\n        const { task, group } = this.state;\n        const board = { ...this.props.board };\n        if (!task.labelIds) {\n            task.labelIds = []\n        }\n        const labelIdx = task.labelIds.findIndex(currLabelId => currLabelId === labelId);\n        if (labelIdx > -1) {\n            task.labelIds.splice(labelIdx, 1)\n        } else task.labelIds.push(labelId)\n        const updateBoard = boardService.updateTaskAtBoard(board, group, task);\n        this.props.update(updateBoard)\n    }\n\n    toggleDisable() {\n        console.log(this.state.isDisable);\n        this.setState({\n            isDisable: !this.state.isDisable\n        })\n    }\n\n    borderLabel = (task, labelId) => {\n        if (task.labelIds) {\n            if (task.labelIds.includes(labelId))\n                return 'border';\n        }\n        return '';\n    }\n\n    handleChange = ({ target }) => {\n        const value = target.value;\n        this.setState({...this.state,\n            title: value\n        });\n        const label = this.props.label;\n        label.title = this.state.title;\n        this.updateLabelBoard(label);\n    }\n\n    updateLabelBoard = () => {\n        const { board, label } = this.props;\n        const idx = board.labels.findIndex(currLabel => currLabel.id === label.id);\n        board.labels.splice(idx,1, label);\n        this.props.update(board);\n    };\n\n    render() {\n        const { label } = this.props;\n        console.log(label)\n        const { task } = this.state;\n        let className;\n        if (task) {\n            className = this.borderLabel(task, label.id);\n        }\n\n        return (\n            <div className=\"label flex gap-2\" data-label={label.id}>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    value={this.state.title}\n                    style={{ background: `${label.color}` }}\n                    className={`label-input label-${label.id} ${this.state.isDisable} ${className} cur-pointer`}\n                    onChange={this.handleChange}\n                    onClick={() => this.toggleLabel(label.id)}\n                    maxLength = {13}\n                />\n                <span onClick={() => { this.toggleDisable() }} className=\"edit-label\"><FiEdit2 /> </span>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const LabelTask = connect(mapStateToProps, mapDispatchToProps)(withRouter(_LabelTask))","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Login.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx",["285"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport {utilService} from '../../../../../services/generalService/utilService'\n\n\n\n\nclass _DueDateModal extends Component {\n    state = {\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n\n    render() {\n        return <div className=\"action-modal duedate-wrap-modal d-none p-abs flex\">\n            <ModalAction>\n                <div className=\"duedate-modal p-abs flex column pad-1\">\n                <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\n                        <h1 className=\"fam-1 font-1\">DueDate</h1>\n                        <span className=\"cur-pointer fam-1 font-1 bold\" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClose /></span>\n                    </div>\n                    <div className=\"action-content\">\n                        <ul>\n                            <input onChange={(ev) => { this.props.onSaveDueDate(ev.target.valueAsNumber)}} type=\"date\" name=\"date\"  className=\"input-date fam-1\"/>\n                        </ul>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const DueDateModal = connect(mapStateToProps, mapDispatchToProps)(_DueDateModal)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MoveModal.jsx",["286","287"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport { LabelTask } from '../LabelTask'\nimport { update } from '../../../../../store/actions/boardsAction';\nimport { boardService } from '../../../../../services/boardService'\n\n\nclass _MoveModal extends Component {\n    state = {\n        moveTo: null\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n\n    \n    // moveTask = () => {\n    //     if (this.state.moveTo !== this.props.group.id) {\n    //         const copyBoard = { ...this.props.board }\n    //         copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.props.group.id)].tasks.splice(\n    //             boardService.getTaskIdxById(this.props.group, this.props.task.id), 1)\n    //         copyBoard.groups[this.state.moveTo].tasks.push(this.props.task)\n    //         this.props.update(copyBoard)\n    //     }\n    //     // this.props.history.push(`/board/${copyBoard._id}`)\n    // }\n\n    handleChange = ({ target }) => {\n        console.log(target.value)\n        this.setState({ moveTo: target.value })\n    }\n    render() {\n        const {moveTask} = this.props\n        return <div className=\"action-modal move-wrap-modal d-none p-abs flex\">\n            <ModalAction>\n                <div className=\"move-modal w-100 p-abs flex column pad-1\">\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\n                        <h1 className=\"fam-1 font-1 \">Move to</h1>\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><AiOutlineClose /></span>\n                    </div>\n                    <div className=\"action-content w-100\">\n                        <form onSubmit={(ev) => {\n                            moveTask(this.state.moveTo)\n                            ev.preventDefault()\n                        }}>\n                            <select onChange={this.handleChange}>\n                                {this.props.board.groups.map((group, idx) => {\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\n                                })}\n                                {this.props.board.groups.map((group, idx) => {\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\n                                })}\n                            </select>\n                            <button className=\"btn-copy-move\">Move</button>\n                        </form>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const MoveModal = connect(mapStateToProps, mapDispatchToProps)(_MoveModal)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/CopyModal.jsx",["288","289"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport { LabelTask } from '../LabelTask'\nimport { update } from '../../../../../store/actions/boardsAction';\nimport { boardService } from '../../../../../services/boardService'\nimport { utilService } from '../../../../../services/generalService/utilService';\n\n\nclass _CopyModal extends Component {\n    state = {\n        copyTo: null\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n\n    copyTask = () => {\n        if (this.state.copyTo !== this.props.group.id) {\n            const copyBoard = { ...this.props.board }\n            const task ={...this.props.task}\n            task.id = utilService.makeId()\n            copyBoard.groups[this.state.copyTo].tasks.push(task)\n            this.props.update(copyBoard)\n        }\n    }\n\n    handleChange = ({ target }) => {\n        console.log(target.value)\n        this.setState({ copyTo: target.value })\n    }\n    render() {\n        return <div className=\"action-modal copy-wrap-modal d-none p-abs flex\">\n            <ModalAction>\n                <div className=\"label-modal p-abs flex column pad-1\">\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center content-end gap-5 w-70\">\n                        <h1 className=\"fam-1 font-1 \">Copy to</h1>\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('copy-wrap-modal') }}><AiOutlineClose /></span>\n                    </div>\n                    <div className=\"action-content\">\n                        <form onSubmit={(ev) => {\n                            this.copyTask()\n                            ev.preventDefault()\n                        }}>\n                            <select onChange={this.handleChange}>\n                                {this.props.board.groups.map((group) => {\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\n                                })}\n                                {this.props.board.groups.map((group, idx) => {\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\n                                })}\n                            </select>\n                            <button>Copy</button>\n                        </form>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const CopyModal = connect(mapStateToProps, mapDispatchToProps)(_CopyModal)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/GroupModal.jsx",[],{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","severity":1,"message":"295","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"298","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":17},{"ruleId":"294","severity":1,"message":"299","line":8,"column":27,"nodeType":"296","messageId":"297","endLine":8,"endColumn":36},{"ruleId":"294","severity":1,"message":"300","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":17},{"ruleId":"294","severity":1,"message":"301","line":7,"column":10,"nodeType":"296","messageId":"297","endLine":7,"endColumn":21},{"ruleId":"294","severity":1,"message":"302","line":7,"column":23,"nodeType":"296","messageId":"297","endLine":7,"endColumn":32},{"ruleId":"294","severity":1,"message":"303","line":7,"column":34,"nodeType":"296","messageId":"297","endLine":7,"endColumn":46},{"ruleId":"294","severity":1,"message":"304","line":8,"column":10,"nodeType":"296","messageId":"297","endLine":8,"endColumn":19},{"ruleId":"305","severity":1,"message":"306","line":41,"column":11,"nodeType":"307","endLine":41,"endColumn":57},{"ruleId":"305","severity":1,"message":"306","line":51,"column":11,"nodeType":"307","endLine":51,"endColumn":64},{"ruleId":"305","severity":1,"message":"306","line":60,"column":11,"nodeType":"307","endLine":60,"endColumn":60},{"ruleId":"305","severity":1,"message":"306","line":68,"column":11,"nodeType":"307","endLine":68,"endColumn":60},{"ruleId":"294","severity":1,"message":"308","line":6,"column":8,"nodeType":"296","messageId":"297","endLine":6,"endColumn":10},{"ruleId":"294","severity":1,"message":"309","line":7,"column":8,"nodeType":"296","messageId":"297","endLine":7,"endColumn":10},{"ruleId":"294","severity":1,"message":"310","line":8,"column":8,"nodeType":"296","messageId":"297","endLine":8,"endColumn":10},{"ruleId":"294","severity":1,"message":"311","line":9,"column":8,"nodeType":"296","messageId":"297","endLine":9,"endColumn":10},{"ruleId":"294","severity":1,"message":"312","line":10,"column":8,"nodeType":"296","messageId":"297","endLine":10,"endColumn":10},{"ruleId":"294","severity":1,"message":"313","line":11,"column":8,"nodeType":"296","messageId":"297","endLine":11,"endColumn":10},{"ruleId":"294","severity":1,"message":"314","line":12,"column":8,"nodeType":"296","messageId":"297","endLine":12,"endColumn":10},{"ruleId":"294","severity":1,"message":"315","line":13,"column":8,"nodeType":"296","messageId":"297","endLine":13,"endColumn":10},{"ruleId":"294","severity":1,"message":"316","line":14,"column":10,"nodeType":"296","messageId":"297","endLine":14,"endColumn":15},{"ruleId":"294","severity":1,"message":"317","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":23},{"ruleId":"294","severity":1,"message":"318","line":3,"column":25,"nodeType":"296","messageId":"297","endLine":3,"endColumn":50},{"ruleId":"294","severity":1,"message":"319","line":3,"column":7,"nodeType":"296","messageId":"297","endLine":3,"endColumn":23},{"ruleId":"294","severity":1,"message":"320","line":43,"column":7,"nodeType":"296","messageId":"297","endLine":43,"endColumn":20},{"ruleId":"294","severity":1,"message":"321","line":6,"column":9,"nodeType":"296","messageId":"297","endLine":6,"endColumn":21},{"ruleId":"294","severity":1,"message":"322","line":31,"column":11,"nodeType":"296","messageId":"297","endLine":31,"endColumn":23},{"ruleId":"294","severity":1,"message":"323","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":25},{"ruleId":"324","severity":1,"message":"325","line":102,"column":58,"nodeType":"326","messageId":"327","endLine":102,"endColumn":60},{"ruleId":"294","severity":1,"message":"328","line":1,"column":10,"nodeType":"296","messageId":"297","endLine":1,"endColumn":21},{"ruleId":"329","severity":1,"message":"330","line":104,"column":45,"nodeType":"331","messageId":"332","endLine":104,"endColumn":47},{"ruleId":"294","severity":1,"message":"333","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":18},{"ruleId":"294","severity":1,"message":"334","line":25,"column":32,"nodeType":"296","messageId":"297","endLine":25,"endColumn":40},{"ruleId":"294","severity":1,"message":"335","line":42,"column":24,"nodeType":"296","messageId":"297","endLine":42,"endColumn":29},{"ruleId":"294","severity":1,"message":"336","line":42,"column":31,"nodeType":"296","messageId":"297","endLine":42,"endColumn":35},{"ruleId":"294","severity":1,"message":"337","line":53,"column":37,"nodeType":"296","messageId":"297","endLine":53,"endColumn":48},{"ruleId":"305","severity":1,"message":"306","line":71,"column":45,"nodeType":"307","endLine":71,"endColumn":93},{"ruleId":"329","severity":1,"message":"338","line":80,"column":83,"nodeType":"331","messageId":"339","endLine":80,"endColumn":85},{"ruleId":"294","severity":1,"message":"340","line":26,"column":24,"nodeType":"296","messageId":"297","endLine":26,"endColumn":32},{"ruleId":"294","severity":1,"message":"341","line":3,"column":10,"nodeType":"296","messageId":"297","endLine":3,"endColumn":14},{"ruleId":"294","severity":1,"message":"342","line":6,"column":8,"nodeType":"296","messageId":"297","endLine":6,"endColumn":22},{"ruleId":"294","severity":1,"message":"343","line":29,"column":17,"nodeType":"296","messageId":"297","endLine":29,"endColumn":24},{"ruleId":"329","severity":1,"message":"338","line":294,"column":77,"nodeType":"331","messageId":"339","endLine":294,"endColumn":79},{"ruleId":"305","severity":1,"message":"306","line":334,"column":37,"nodeType":"307","endLine":334,"endColumn":86},{"ruleId":"294","severity":1,"message":"341","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"344","line":2,"column":16,"nodeType":"296","messageId":"297","endLine":2,"endColumn":23},{"ruleId":"294","severity":1,"message":"345","line":8,"column":10,"nodeType":"296","messageId":"297","endLine":8,"endColumn":17},{"ruleId":"294","severity":1,"message":"328","line":1,"column":10,"nodeType":"296","messageId":"297","endLine":1,"endColumn":21},{"ruleId":"294","severity":1,"message":"341","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"344","line":2,"column":16,"nodeType":"296","messageId":"297","endLine":2,"endColumn":23},{"ruleId":"294","severity":1,"message":"343","line":27,"column":21,"nodeType":"296","messageId":"297","endLine":27,"endColumn":28},{"ruleId":"294","severity":1,"message":"328","line":5,"column":9,"nodeType":"296","messageId":"297","endLine":5,"endColumn":20},{"ruleId":"294","severity":1,"message":"346","line":5,"column":10,"nodeType":"296","messageId":"297","endLine":5,"endColumn":19},{"ruleId":"294","severity":1,"message":"321","line":7,"column":10,"nodeType":"296","messageId":"297","endLine":7,"endColumn":22},{"ruleId":"294","severity":1,"message":"346","line":5,"column":10,"nodeType":"296","messageId":"297","endLine":5,"endColumn":19},{"ruleId":"294","severity":1,"message":"321","line":7,"column":10,"nodeType":"296","messageId":"297","endLine":7,"endColumn":22},"no-native-reassign",["347"],"no-negated-in-lhs",["348"],"no-unused-vars","'Chat' is defined but never used.","Identifier","unusedVar","'loading' is defined but never used.","'Draggable' is defined but never used.","'connect' is defined but never used.","'loadReviews' is defined but never used.","'addReview' is defined but never used.","'removeReview' is defined but never used.","'loadUsers' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'p0' is defined but never used.","'p1' is defined but never used.","'p2' is defined but never used.","'p3' is defined but never used.","'p4' is defined but never used.","'p5' is defined but never used.","'p6' is defined but never used.","'p7' is defined but never used.","'Board' is defined but never used.","'socketService' is defined but never used.","'SOCKET_EVENT_REVIEW_ADDED' is defined but never used.","'SCORE_FOR_REVIEW' is assigned a value but never used.","'socketIsReady' is assigned a value but never used.","'boardService' is defined but never used.","'previewStyle' is assigned a value but never used.","'DragDropContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'utilService' is defined but never used.","array-callback-return","Array.prototype.findIndex() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Provider' is defined but never used.","'duration' is assigned a value but never used.","'index' is assigned a value but never used.","'task' is assigned a value but never used.","'updateBoard' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'onUpdate' is assigned a value but never used.","'Link' is defined but never used.","'onClickOutside' is defined but never used.","'boardId' is assigned a value but never used.","'NavLink' is defined but never used.","'BsImage' is defined but never used.","'LabelTask' is defined but never used.","no-global-assign","no-unsafe-negation"]