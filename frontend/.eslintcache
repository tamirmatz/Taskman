[{"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/index.js":"1","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/serviceWorkerRegistration.js":"2","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/reportWebVitals.js":"3","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/store.js":"4","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/App.jsx":"5","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/userReducer.js":"6","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/systemReducer.js":"7","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/reviewReducer.js":"8","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/boardReducer.js":"9","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/routes.js":"10","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/AppHeader.jsx":"11","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Login.jsx":"12","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Home.jsx":"13","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/UserDetails.jsx":"14","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Board.jsx":"15","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Chat.jsx":"16","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/BoardList.jsx":"17","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/reviewActions.js":"18","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/boardsAction.js":"19","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/userActions.js":"20","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/userService.js":"21","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/boardService.js":"22","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/shared/ModalWrapper.jsx":"23","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/utilService.js":"24","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/socketService.js":"25","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/UserPreview.jsx":"26","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/systemAction.js":"27","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/Upload.jsx":"28","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/TaskList.jsx":"29","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Dashboard.jsx":"30","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/MiniBoard.jsx":"31","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/calendar.jsx":"32","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/httpService.js":"33","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/asyncStorageService.js":"34","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx":"35","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx":"36","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/reviewService.js":"37","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/shared/Overlay.jsx":"38","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/data/board.js":"39","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/cloudinaryService.js":"40","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/TaskPreview.jsx":"41","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/boardNavbar/InfoBoardModal.jsx":"42","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/MembersBoard.jsx":"43","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx":"44","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/dashboard/ChartLabelsTasks.jsx":"45","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/dashboard/ChartGroupsTasks.jsx":"46","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/dashboard/ChartMembersTasks.jsx":"47","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx":"48","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx":"49","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/GroupModal.jsx":"50","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/shared/ModalAction.jsx":"51","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx":"52","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx":"53","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx":"54","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx":"55","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/CopyModal.jsx":"56","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MoveModal.jsx":"57","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx":"58","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx":"59"},{"size":910,"mtime":1623055307903,"results":"60","hashOfConfig":"61"},{"size":5064,"mtime":1623055307907,"results":"62","hashOfConfig":"61"},{"size":364,"mtime":1623055307905,"results":"63","hashOfConfig":"61"},{"size":752,"mtime":1623055307912,"results":"64","hashOfConfig":"61"},{"size":515,"mtime":1623055307783,"results":"65","hashOfConfig":"61"},{"size":892,"mtime":1623162926293,"results":"66","hashOfConfig":"61"},{"size":426,"mtime":1623055307912,"results":"67","hashOfConfig":"61"},{"size":669,"mtime":1623055307912,"results":"68","hashOfConfig":"61"},{"size":668,"mtime":1623055307911,"results":"69","hashOfConfig":"61"},{"size":605,"mtime":1623055307906,"results":"70","hashOfConfig":"61"},{"size":6484,"mtime":1623162761722,"results":"71","hashOfConfig":"61"},{"size":5447,"mtime":1623055307905,"results":"72","hashOfConfig":"61"},{"size":3044,"mtime":1623159903505,"results":"73","hashOfConfig":"61"},{"size":2210,"mtime":1623163126768,"results":"74","hashOfConfig":"61"},{"size":9256,"mtime":1623159903503,"results":"75","hashOfConfig":"61"},{"size":3395,"mtime":1623055307903,"results":"76","hashOfConfig":"61"},{"size":6040,"mtime":1623161366361,"results":"77","hashOfConfig":"61"},{"size":1321,"mtime":1623055307910,"results":"78","hashOfConfig":"61"},{"size":2894,"mtime":1623145073996,"results":"79","hashOfConfig":"61"},{"size":1966,"mtime":1623055307911,"results":"80","hashOfConfig":"61"},{"size":2097,"mtime":1623055307910,"results":"81","hashOfConfig":"61"},{"size":3565,"mtime":1623145086725,"results":"82","hashOfConfig":"61"},{"size":193,"mtime":1623055307899,"results":"83","hashOfConfig":"61"},{"size":4394,"mtime":1623066831275,"results":"84","hashOfConfig":"61"},{"size":2324,"mtime":1623055307909,"results":"85","hashOfConfig":"61"},{"size":515,"mtime":1623055307893,"results":"86","hashOfConfig":"61"},{"size":725,"mtime":1623055307911,"results":"87","hashOfConfig":"61"},{"size":1709,"mtime":1623055307891,"results":"88","hashOfConfig":"61"},{"size":6648,"mtime":1623159903499,"results":"89","hashOfConfig":"61"},{"size":2900,"mtime":1623066831274,"results":"90","hashOfConfig":"61"},{"size":530,"mtime":1623055307892,"results":"91","hashOfConfig":"61"},{"size":671,"mtime":1623055307905,"results":"92","hashOfConfig":"61"},{"size":1093,"mtime":1623055307908,"results":"93","hashOfConfig":"61"},{"size":2286,"mtime":1623055307908,"results":"94","hashOfConfig":"61"},{"size":12594,"mtime":1623159903500,"results":"95","hashOfConfig":"61"},{"size":23198,"mtime":1623159903501,"results":"96","hashOfConfig":"61"},{"size":1087,"mtime":1623055307909,"results":"97","hashOfConfig":"61"},{"size":313,"mtime":1623055307899,"results":"98","hashOfConfig":"61"},{"size":298329,"mtime":1623055307902,"results":"99","hashOfConfig":"61"},{"size":634,"mtime":1623055307908,"results":"100","hashOfConfig":"61"},{"size":7637,"mtime":1623159903499,"results":"101","hashOfConfig":"61"},{"size":2123,"mtime":1623159903501,"results":"102","hashOfConfig":"61"},{"size":820,"mtime":1623055307892,"results":"103","hashOfConfig":"61"},{"size":2193,"mtime":1623055307893,"results":"104","hashOfConfig":"61"},{"size":2391,"mtime":1623066831273,"results":"105","hashOfConfig":"61"},{"size":2004,"mtime":1623066831272,"results":"106","hashOfConfig":"61"},{"size":2520,"mtime":1623066831273,"results":"107","hashOfConfig":"61"},{"size":5340,"mtime":1623061155150,"results":"108","hashOfConfig":"61"},{"size":4606,"mtime":1623159903502,"results":"109","hashOfConfig":"61"},{"size":3384,"mtime":1623159903503,"results":"110","hashOfConfig":"61"},{"size":213,"mtime":1623055307899,"results":"111","hashOfConfig":"61"},{"size":1671,"mtime":1623055307897,"results":"112","hashOfConfig":"61"},{"size":1617,"mtime":1623055307896,"results":"113","hashOfConfig":"61"},{"size":647,"mtime":1623055307895,"results":"114","hashOfConfig":"61"},{"size":2244,"mtime":1623055307897,"results":"115","hashOfConfig":"61"},{"size":2896,"mtime":1623055307896,"results":"116","hashOfConfig":"61"},{"size":3090,"mtime":1623055307897,"results":"117","hashOfConfig":"61"},{"size":127,"mtime":1623055307897,"results":"118","hashOfConfig":"61"},{"size":4324,"mtime":1623062518502,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5e33ms",{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"151"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"151"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"151"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"151"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"151"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"151"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"151"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"151"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"151"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"151"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"151"},"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/index.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/serviceWorkerRegistration.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/reportWebVitals.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/store.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/App.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/userReducer.js",["251"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/systemReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/reviewReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/reducers/boardReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/routes.js",["252"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/AppHeader.jsx",["253"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Login.jsx",["254"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Home.jsx",["255","256","257","258","259","260","261","262","263"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/UserDetails.jsx",["264","265"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Board.jsx",["266","267"],"import { connect } from 'react-redux'\nimport { add, loadBoard, update, setBoard, remove } from '../store/actions/boardsAction.js';\nimport { loading } from '../store/actions/systemAction';\nimport { loadUsers } from '../store/actions/userActions.js'\nimport React, { Component } from 'react'\nimport { TaskList } from '../cmps/board/TaskList'\nimport { BoardNavbar } from '../cmps/board/boardNavbar/BoardNavbar'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Route, Switch } from 'react-router';\nimport { TaskDetails } from '../cmps/board/taskDetails/TaskDetails';\nimport { boardService } from '.././services/boardService.js'\nimport { utilService } from '../services/generalService/utilService.js'\nimport { socketService } from '../services/generalService/socketService.js'\nimport { ModalWrapper } from '../cmps/shared/ModalWrapper.jsx';\nimport { Dashboard } from './Dashboard';\nimport { Calendar } from './calendar';\n\nconst EMPTY_GROUP = { title: '' }\n\nclass _Board extends Component {\n    state = {\n        group: EMPTY_GROUP,\n        displayBoard: 'board'\n    }\n\n    onToggleActivities = () => {\n        document.body.classList.toggle('activities-open');\n    }\n\n    async componentDidMount() {\n        const { boardId } = this.props.match.params\n        this.props.loadBoard(boardId);\n        this.props.loadUsers();\n        socketService.setup()\n        socketService.on('updated board', (board) => {\n            if (boardId !== board._id) return\n            this.props.setBoard(board)\n        })\n        socketService.emit('add member', boardId)\n        this.removeClassName();\n        const board = await boardService.getById(boardId)\n        document.body.style.background = board.style ? `url(${board.style})` : 'rgb(0, 121, 191)'\n        document.body.style.backgroundRepeat = \"no-repeat\";\n        document.body.style.backgroundSize = \"cover\";\n        document.querySelector('.app-header').style.backgroundColor = `rgba(0, 0, 0, 0.15)`;\n    }\n\n    componentWillUnmount() {\n        socketService.off('updated board', this.props.setBoard)\n        socketService.terminate()\n        document.body.style.backgroundImage = `linear-gradient(to bottom right,#f0e3fc,#dff2fe,#daf5f7,#e0f6ea,#eef4e0)`\n        document.querySelector('.app-header').style.backgroundColor = `#026AA7`\n    }\n\n    favBoard = () => {\n        let board = { ...this.props.board }\n        board.isFavorite = board.isFavorite ? false : true;\n        this.props.update(board)\n    }\n\n\n    onUpdate = (updateBoard) => {\n        this.props.update(updateBoard)\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            group: {\n                ...prevState.group,\n                [field]: value,\n            }\n        }))\n    }\n\n    removeBoard = () => {\n        this.props.remove(this.props.board._id)\n        this.props.history.push('/board')\n    }\n\n\n    removeClassName() {\n        if (document.querySelector('.board')) {\n            document.querySelector('.board').classList.remove('max-screen');\n        }\n    };\n\n    onAddGroup = () => {\n        const copyBoard = { ...this.props.board };\n        this.setState({ group: { ...this.state.group, id: utilService.makeId() } })\n        copyBoard.groups.push(utilService.formatNewGroup(this.state.group))\n        this.props.update(copyBoard)\n        this.setState({ group: EMPTY_GROUP })\n    }\n\n    onDragEnd = res => {\n        const { destination, source, type } = res\n        if (!destination) return\n        if (destination.droppableId === source.droppableId &&\n            destination.index === source.index) return\n        const copyBoard = JSON.parse(JSON.stringify(this.props.board))\n        const activity = {}\n        if (type === 'task') {\n            const sourceListIdx = boardService.getGroupIdxById(copyBoard, source.droppableId)\n            const destinationListIdx = boardService.getGroupIdxById(copyBoard, destination.droppableId)\n            const task = copyBoard.groups[sourceListIdx].tasks.splice(source.index, 1)\n            copyBoard.groups[destinationListIdx].tasks.splice(destination.index, 0, task[0])\n            const sourceListName = copyBoard.groups[sourceListIdx].title\n            const destinationListName = copyBoard.groups[destinationListIdx].title\n            activity.txt = `has moved ${task[0].title} from ${sourceListName} to ${destinationListName}`\n        }\n        else {\n            const list = copyBoard.groups.splice(source.index, 1)\n            copyBoard.groups.splice(destination.index, 0, list[0])\n            activity.txt = `has moved list ${list[0].title}`\n        }\n        this.props.update(copyBoard)\n        console.log('Moved and updated!', copyBoard)\n    }\n\n    onCloseDetails = () => {\n        this.props.history.push(`/board/${this.props.board._id}`)\n\n    }\n\n    changeDisplay = (changeDisplay) => {\n        this.setState({ ...this.state, displayBoard: changeDisplay })\n    }\n    render() {\n        const { board } = this.props;\n        if (!board) {\n            return <div className=\"loader w-100 h-100 flex center content-center\">Loading...</div>\n        }\n        // loading ui\n        // this.props.loading();\n        // if(this.props.isLoading) return <h1 className=\"w-100 h-100 flex center content-center\">Loading...</h1>\n        if (this.props.isLoading) return <div className=\"loader w-100 h-100 flex left content-center\">Loading...</div>\n        const displayBoard = this.state.displayBoard;\n        return (\n            <DragDropContext\n                onDragEnd={this.onDragEnd}\n            >\n                <div\n                    className=\"board flex column  animate__animated animate__fadeInRight \">\n                    <div className=\"board-screen\" onClick={this.onToggleActivities}></div>\n                    <BoardNavbar\n                        favBoard={this.favBoard}\n                        removeBoard={this.removeBoard}\n                        users={this.props.users}\n                        board={board}\n                        updateBoard={this.onUpdate}\n                        changeDisplay={this.changeDisplay}\n                        displayBoard={displayBoard}\n                        onToggleActivities={this.onToggleActivities}\n                    />\n                    {displayBoard === 'board' && (\n                        <div className=\"board-list flex w-100 \"\n                        >\n                            <Droppable droppableId={board._id}\n                                direction=\"horizontal\"\n                                type=\"group\"\n                            >\n                                {provided => (\n                                    <ul\n                                        className=\"groups clean-list flex \"\n                                        {...provided.droppableProps}\n                                        ref={provided.innerRef}\n                                    >\n                                        {board && board.groups.map((group, idx) =>\n                                            <TaskList\n                                                index={idx}\n                                                key={group.id}\n                                                board={board}\n                                                group={group}\n                                                updateBoard={this.onUpdate}\n                                            />)}\n                                        {provided.placeholder}\n                                    </ul>\n\n                                )}\n                            </Droppable>\n                            <div className=\" flex\">\n                                <form onSubmit={(ev) => {\n                                    ev.preventDefault()\n                                    this.onAddGroup()\n                                }}>\n                                    <input autoComplete=\"off\" className=\"add-group\" value={this.state.group.title} type=\"text\" placeholder=\"+ Add another list\" name=\"title\" onChange={this.handleChange} />\n                                </form>\n                            </div>\n                        </div>\n                    )}\n                    {displayBoard === 'dashboard' && <Dashboard />}\n                    {displayBoard === 'calendar' && <Calendar />}\n\n\n                    <Switch>\n                        <Route\n                            path={'/board/:boardId/:groupId/:taskId'}\n                            render={(props) => <ModalWrapper onClick={this.onCloseDetails}>\n                                <TaskDetails overlayHeight={538} {...props} />\n                            </ModalWrapper>}>\n                        </Route>\n                    </Switch>\n                </div>\n            </DragDropContext>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n        isLoading: state.systemModule.isLoading,\n        users: state.userModule.users\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    loadBoard,\n    update,\n    loadUsers,\n    setBoard\n    // loading\n}\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)\n\n\n",["268","269"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Chat.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/BoardList.jsx",["270","271","272"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/reviewActions.js",["273","274"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/boardsAction.js",["275"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/userActions.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/userService.js",["276"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/boardService.js",["277","278","279","280"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/shared/ModalWrapper.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/utilService.js",["281","282"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/socketService.js",["283"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/UserPreview.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/store/actions/systemAction.js",["284"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/Upload.jsx",["285","286"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/TaskList.jsx",["287","288"],"import { TaskPreview } from '../board/TaskPreview'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Component } from 'react';\nimport { boardService } from '../../services/boardService.js'\nimport { utilService } from '../../services/generalService/utilService.js'\nimport { GroupModal } from './taskDetails/action/actionModal/GroupModal'\nconst EMPTY_TASK = { title: '' }\nconst EMPTY_GROUP = { title: '' }\n\nexport class TaskList extends Component {\n    state = {\n        group: EMPTY_GROUP,\n        task: EMPTY_TASK\n    }\n    componentDidMount() {\n        this.setState({ group: this.props.group })\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            task: {\n                ...prevState.task,\n                [field]: value,\n            }\n        }))\n    }\n\n    updateGroup = () => {\n        if (!this.state.group.title) return;\n        const copyBoard = { ...this.props.board };\n        this.props.updateBoard(copyBoard)\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\n        copyBoard.groups[groupIdx] = this.state.group\n        console.log(copyBoard)\n    }\n\n    handleChangeGroup = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            group: {\n                ...prevState.group,\n                [field]: value,\n            }\n        }))\n    }\n\n    onAddTask = () => {\n        if (!this.state.task.title) return;\n        const { group } = this.props\n        const copyBoard = { ...this.props.board };\n        const groupIdx = boardService.getGroupIdxById(copyBoard, group.id)\n        copyBoard.groups[groupIdx].tasks.push(utilService.formatNewTask(this.state.task))\n        console.log(this.state.task)\n        this.setState({ task: EMPTY_TASK })\n        this.props.updateBoard(copyBoard)\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n\n    render() {\n        const { board, group, updateBoard, index } = this.props\n\n        return (\n            <Draggable index={index} draggableId={group.id} >\n                {(provided, snapshot) => {\n                    return <li className=\"group br-3\"\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                    >\n                        <form className=\"\" onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.updateGroup()\n\n                        }}>\n                            <div style={{ backgroundColor: group.color ? group.color : 'transparent' }} className=\"group-title w-100 flex center space-between pb-2\">\n                                <input\n                                    autoComplete=\"off\"\n                                    className=\"app-input font-w2 font-m lh-20 \"\n                                    onBlur={this.updateGroup}\n                                    type=\"text\"\n                                    value={this.state.group.title}\n                                    name=\"title\"\n                                    onChange={this.handleChangeGroup}\n                                />\n                                <div className=\"group-menu\" >\n                                    <div className=\"btn\" onMouseDown={(ev) => {\n                                        if (ev.button == 0) {\n                                            this.toggleModal(`g-${this.state.group.id}`)\n                                        }\n                                    }\n                                    }\n                                    >...</div>\n                                    <GroupModal\n                                        toggleModal={() => { this.toggleModal() }}\n                                        group={group}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                        <div className=\"wrap-task-list pad-001\">\n\n                            <div className=\"task-list flex column center \">\n                                <Droppable\n                                    droppableId={group.id}\n                                    type='task'>\n                                    {(provided) => (\n                                        <div className=\"task-list-droppable\"\n                                            ref={provided.innerRef}\n                                            {...provided.droppableProps}\n                                        >\n                                            {group.tasks.map((task, idx) => (\n                                                <TaskPreview key={task.id}\n                                                    board={board}\n                                                    index={idx}\n                                                    groupId={group.id}\n                                                    updateBoard={updateBoard}\n                                                    task={task}\n                                                    group={group}\n                                                />\n                                            ))}\n                                            {!utilService.isFalse(group.tasks) && <h1 className=\"task-title fam-1 font-m\">No tasks to show</h1>}\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </div>\n                            <form onSubmit={(ev) => {\n                                ev.preventDefault()\n                                this.onAddTask()\n                                console.log(ev)\n                            }}>\n                                <input autoComplete=\"off\" className=\"add-task\" value={this.state.task.title} type=\"text\" placeholder=\"+ Add a card\" name=\"title\" onChange={this.handleChange} />\n                            </form>\n                        </div>\n                    </li>\n                }}\n            </Draggable>)\n        /*    </div> */\n    }\n}","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/Dashboard.jsx",["289","290","291"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { ChartMembersTasks } from '../cmps/dashboard/ChartMembersTasks';\nimport { ChartLabelsTasks } from '../cmps/dashboard/ChartLabelsTasks';\nimport { ChartGroupsTasks } from '../cmps/dashboard/ChartGroupsTasks';\nimport { withRouter } from \"react-router\";\nimport { boardService } from '../services/boardService'\n\n\n\nclass _Dashboard extends Component {\n    state = {\n        board: null,\n        tasks: null,\n        groups: null,\n        membersBoard: null,\n        labelsBoard: null\n    }\n\n    componentDidMount() {\n        const board = this.props.board;\n        console.log(board);\n        const tasks = boardService.getTasks(board.groups);\n        const groups = board.groups;\n        const membersBoard = board.members;\n        const labelsBoard = board.labels;\n\n        this.setState({\n            ...this.state,\n            board: board,\n            groups: groups,\n            tasks: tasks,\n            membersBoard: membersBoard,\n            labelsBoard: labelsBoard\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n    checkDataExist() {\n        const { board, groups, tasks, membersBoard, labelsBoard } = this.state;\n        return board && groups && tasks && membersBoard && labelsBoard;\n    }\n\n    render() {\n        const { board, groups, tasks, membersBoard, labelsBoard } = this.state;\n        if (!this.checkDataExist()) return <h1>Loading...</h1>\n        return <div className=\"dashboard w-100 h-100 flex column center space-between pb-1\">\n            <div className=\"w-100 flex space-evenly \">\n                <div className=\"dashboard flex column center content-center\">\n                    <p className=\"font-1 fam-1 c-white\">Tasks Per Staff</p>\n                    <ChartMembersTasks membersBoard={membersBoard} tasks={tasks} />\n                </div>\n                <div className=\"dashboard flex column center content-center\">\n                    <p className=\"font-1 fam-1 c-white\">Tasks Per Label</p>\n                    <ChartLabelsTasks labelsBoard={labelsBoard} tasks={tasks} />\n                </div>\n                <div className=\"dashboard flex column center content-center\">\n                    <p className=\"font-1 fam-1 c-white\">Tasks Per Groups</p>\n                    <ChartGroupsTasks groups={groups} tasks={tasks} />\n                </div>\n            </div>\n            <div className=\"w-100 flex space-evenly\">\n\n            </div>\n            <div className=\"w-100 flex space-evenly\">\n\n            </div>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const Dashboard = connect(mapStateToProps, mapDispatchToProps)(withRouter(_Dashboard))","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/MiniBoard.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/pages/calendar.jsx",["292","293"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/httpService.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/asyncStorageService.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx",["294","295"],"import { MembersBoard } from '../MembersBoard';\nimport { add, loadBoard, update, setBoard, remove } from '../../../store/actions/boardsAction.js';\nimport { MdKeyboardArrowDown } from 'react-icons/md'\nimport { RiDashboardLine } from 'react-icons/ri'\nimport { AiOutlineStar, AiFillStar } from 'react-icons/ai'\nimport { Component } from 'react';\nimport { BoardMembersModal } from './BoardMembersModal'\n// import { InfoBoardModal } from './InfoBoardModal'\nimport { BsCalendar } from 'react-icons/bs'\nimport { BiBarChartAlt2 } from 'react-icons/bi'\nimport { connect } from 'react-redux'\nimport { utilService } from '../../../services/generalService/utilService.js';\nimport { UserPreview } from '../UserPreview.jsx';\n\n\n\nclass _BoardNavbar extends Component {\n    state = {\n        displayBoard: this.props.displayBoard,\n        title: this.props.board.title,\n        members: this.props.board.members,\n        backgrounds: ['',\n            'https://trello-backgrounds.s3.amazonaws.com/SharedBackground/2286x1600/24baa6609b89fb8eb0cc0aceb70eaf36/photo-1557682250-33bd709cbe85.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671389/backrounds/0_jflqwf.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671416/backrounds/1_gavwov.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991464/backrounds/images_nnscac.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991434/backrounds/ded84385480090c3464352f152dbc0c8_bzdu9x.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991432/backrounds/508751_bftz6u.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991426/backrounds/wp4676582_rhnghy.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991421/backrounds/Eb3zqm9WsAIalyT_sdypqq.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991411/backrounds/wallpapersden.com_cool-4k-pattern_3840x2160_ag3xac.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991393/backrounds/wp5633980_gb2sub.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991348/backrounds/65c7d4a8f34de11f9414ce49b847e56a_bvwpgt.gif',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991338/backrounds/Vaporwave-4K-Wallpapers_mmacwb.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622991315/backrounds/thor-stormbreaker-minimalist-wallpaper_goxnts.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671401/backrounds/2_gstip0.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671404/backrounds/4_ly2zj7.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671430/backrounds/6_mi6wun.jpg',\n            'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671421/backrounds/7_oivv0t.jpg',\n        ],\n        isActivities: true\n    }\n\n    componentDidMount() {\n        this.setState({\n            ...this.state,\n            displayBoard: this.props.displayBoard,\n            title: this.props.board.title,\n            members: this.props.board.members\n        })\n    }\n\n\n    onAddMemberToBoard = (addedMember) => {\n        const { members } = this.state\n        const memberIdx = members.findIndex(member => member._id === addedMember._id)\n        if (memberIdx !== -1) {\n            members.splice(memberIdx, 1)\n        }\n        else members.push(addedMember)\n        const copyBoard = { ...this.props.board }\n        copyBoard.members = members\n        console.log(members)\n        this.props.updateBoard(copyBoard)\n    }\n\n    isMemberChecked = (memberCheck) => {\n        const memberIdx = this.state.members.findIndex(member => member._id === memberCheck._id)\n        if (memberIdx !== -1) {\n            return 'checked'\n        }\n        else return ''\n    }\n\n    toggleActivities = () => {\n        this.setState({ isActivities: !this.state.isActivities })\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n    onChangeBoardName = () => {\n        const board = this.props.board\n        board.title = this.state.title\n        this.props.updateBoard(board)\n    }\n\n    onChangeBg = (url) => {\n        const board = this.props.board\n        board.style = url\n        document.body.style.background = board.style ? `url(${board.style})` : 'rgb(0, 121, 191)'\n        document.body.style.backgroundRepeat = \"no-repeat\";\n        document.body.style.backgroundSize = \"cover\";\n        this.props.updateBoard(board)\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n        this.setState({ [field]: value })\n    }\n\n    render() {\n        const { board, onUpdate } = this.props;\n        console.log(this.props);\n        const displayBoard = this.props.displayBoard\n        if (!board) return <div>Loading...</div>\n        return (\n            <nav className=\"board-navbar flex space-between font-m c-white fam-1 \">\n                <ul className=\"left-bar flex center space-evenly \">\n                    <ul className=\"display-option\">\n                        {displayBoard === 'board' &&\n                            <div className=\"board-option\">\n                                <li className=\"btn-board btn-board-navbar bg-board-btn flex center space-evenly cur-poiner\"\n                                    onClick={() => { this.props.changeDisplay('dashboard')}}>\n                                    <span className=\"ps-xxs flex center\">< BiBarChartAlt2/></span>\n                                Dashboard\n                                </li>\n                            </div>\n                        }\n\n                        {displayBoard === 'dashboard' &&\n                            <div className=\"board-option\">\n                                <li className=\"btn-board btn-board-navbar bg-board-btn flex center space-evenly cur-poiner\"\n                                    onClick={() => { this.props.changeDisplay('board') }}>\n                                    <span className=\"ps-xxs flex center\"><RiDashboardLine /></span>\n                                    Board\n                                </li>\n                            </div>\n                        }\n\n                        {/* {displayBoard === 'calendar' &&\n                            <div className=\"board-option\">\n                                <li className=\"btn-board btn-board-navbar bg-board-btn flex center space-evenly cur-poiner\" onClick={() => { this.toggleModal('info-board-wrap-modal') }}>\n                                    <span className=\"ps-xxs flex center\"><BsCalendar /></span>\n                                    Calendar\n                                    <span className=\"font-2 flex right\">\n                                        <MdKeyboardArrowDown />\n                                    </span>\n                                </li>\n                                <InfoBoardModal\n                                    toggleModal={() => { this.toggleModal() }}\n                                    changeDisplay={this.props.changeDisplay}\n                                />\n                            </div>\n                        } */}\n\n                    </ul>\n\n                    <li className=\"btn-board bold ps-xxs\">\n                        <div onClick={(ev) => {\n                            ev.preventDefault()\n                            this.onChangeBoardName(ev)\n                        }}>\n                            <input type=\"text\"\n                                className=\"app-input bold font-m lh-20 c-white title-nav-input \"\n                                name=\"title\"\n                                onChange={this.handleChange}\n                                autoComplete=\"off\"\n                                value={this.state.title}\n                                onBlur={this.onChangeBoardName}\n                                minLength={2}\n                                maxLength={13}\n                            />\n                        </div>\n                    </li>\n                    <li className=\"btn-board btn-board-navbar bg-board-btn\" onClick={this.props.favBoard}>\n                        {!board.isFavorite && <AiOutlineStar />}\n                        {board.isFavorite && <AiFillStar />}\n                    </li>\n                    <span className=\"board-btn-divider\"></span>\n                    <li className=\"btn-board btn-board-navbar bg-board-btn\">Visiblity</li>\n                    <span className=\"board-btn-divider\"></span>\n                    <li className=\"btn-board bg-inherit\" ><MembersBoard /></li>\n                    <ul className=\"members-wrap \">\n                        <li\n                            className=\"btn-board btn-board-navbar bg-board-btn\"\n                            onClick={() => { this.toggleModal('board-members-wrap-modal') }}>\n                            Invite\n                        </li>\n                        <BoardMembersModal\n                            users={this.props.users}\n                            isMemberChecked={this.isMemberChecked}\n                            onAddMemberToBoard={this.onAddMemberToBoard}\n                            toggleModal={() => { this.toggleModal() }}\n                        />\n                    </ul>\n                </ul>\n                <ul className=\"right-bar flex center\">\n                    <li className=\"btn-board btn-board-navbar bg-board-btn\" onClick={() => this.props.removeBoard()}>Delete Board</li>\n                    <li onClick={() => { this.props.onToggleActivities() }} className=\"btn-board btn-board-navbar bg-board-btn \">...\n                    </li>\n                    <div className=\"board-menu flex column\">\n                        <div className=\"flex mb-06 space-between\">\n                            <h1 className=\"center-self\">Menu</h1>\n                            <button className=\"menu-btn\" onClick={this.toggleActivities}>{this.state.isActivities ? 'Backgrounds' : 'Activities'}</button>\n                        </div>\n\n                        <ul>\n                            {\n                                this.state.isActivities && board.activities && board.activities.map(activity => {\n                                    if (!activity) return\n                                    return <li key={activity.id} className=\"full-activty flex column\">\n                                        <div className=\"flex space-between\">\n                                            <div className=\"content-gap flex center\">\n                                                <UserPreview user={activity.byMember} />\n                                                <div className=\"commenter-name\">{activity.byMember.fullname}</div>\n                                                <small>{utilService.timeAgo(activity.createdAt)}</small>\n                                            </div>\n                                        </div>\n                                        <div className=\"comment-gap\">\n                                            <p className=\"comment-txt \">{activity.txt}</p>\n                                        </div>\n                                    </li>\n\n                                })\n\n                            }\n                        </ul>\n                        <ul className=\"flex column align-center gap-1\">\n                            {\n                                !this.state.isActivities && this.state.backgrounds.map((background) => {\n                                    return <li onClick={() => { this.onChangeBg(background) }} className={\"miniBoard cur-pointer flex center content-center\"} style={{ backgroundImage: \"url(\" + background + \")\" }}>\n\n                                    </li>\n                                })\n                            }</ul>\n                    </div>\n                </ul>\n            </nav>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n        loggedInUser: state.userModule.loggedInUser,\n\n    }\n}\n\nconst mapDispatchToProps = {\n    remove,\n    add,\n    loadBoard,\n    update,\n    setBoard\n}\n\nexport const BoardNavbar = connect(mapStateToProps, mapDispatchToProps)(_BoardNavbar)","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx",["296","297","298","299","300","301","302","303"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { boardService } from '../../../services/boardService.js'\nimport { remove, add, loadBoard, update, setBoard } from '../../../store/actions/boardsAction.js';\nimport onClickOutside from \"react-onclickoutside\";\nimport { BsCardChecklist } from 'react-icons/bs'\nimport { GrTextAlignFull } from 'react-icons/gr'\nimport { FaRegCommentDots } from 'react-icons/fa'\nimport { utilService } from '../../../services/generalService/utilService.js';\nimport { CheckList } from './CheckList';\nimport { ActionList } from './action/ActionList';\nimport { UserPreview } from '../UserPreview.jsx';\nimport { RiDeleteBin6Line } from 'react-icons/ri'\nimport { socketService } from '../../../services/generalService/socketService.js'\n\n// import {TaskTitle} from '../taskDetails/TaskTitle';\n\n\nclass _TaskDetails extends Component {\n    state = {\n        group: null,\n        task: null,\n        onFocus: false,\n        overlay: false,\n        isComments: true,\n        commentInputVal: ''\n    }\n    elModalRef = React.createRef()\n    _isMounted = React.createRef(false)\n\n    componentDidMount() {\n        const { boardId, taskId, groupId } = this.props.match.params;\n        const board = { ...this.props.board };\n        const group = boardService.getGroupById(board, groupId);\n        const task = boardService.getTaskById(group, taskId);\n        this.addClassName();\n        this.props.loadBoard(boardId);\n        // this.props.loadUsers();\n        document.body.classList.add('noscroll')\n        this.setState({ ...this.state, group, task })\n        socketService.setup()\n        socketService.on('updated board', (board) => {\n            if (boardId !== board._id) return\n            this.props.setBoard(board)\n        })\n        socketService.emit('add member', boardId)\n    }\n\n    componentWillUnmount() {\n        document.body.classList.remove('noscroll')\n        socketService.off('updated board', this.props.setBoard)\n        socketService.terminate()\n    }\n\n    // componentDidUpdate(prevProps) {\n    //     if (prevProps.board !== this.props.board) {\n    //         const { boardId, taskId, groupId } = this.props.match.params;\n    //         const board = { ...this.props.board };\n    //         const group = boardService.getGroupById(board, groupId);\n    //         const task = boardService.getTaskById(group, taskId);\n    //         this.setState({ group, task }, this.props.query)\n    //     }\n\n    // }\n\n\n    componentDidUpdate() {\n        // modalPos.top = `calc(55% + ${(this.elModalRef.current.clientHeight\n        //     - this.props.overlayHeight)/2}px)`\n        // console.log('modalPos: ', modalPos)\n        // if (this._isMounted.current) {\n\n        // } else {\n        //     console.log('is mounted false')\n        //     this._isMounted.current = true\n        // }\n    }\n\n    //Destroyed the check list! don't use it! -tamir&naav- <3\n\n    // componentDidUpdate(prevProps) {\n    //     if (this.props !== prevProps) {\n    //         console.log('props change');\n    //     }\n    // }\n\n    addClassName() {\n        document.querySelector('.board').classList.add('max-screen');\n    };\n\n    createActivity = (txt = '') => {\n        const { loggedInUser } = this.props\n        const task = { ...this.state.task }\n        const activityTxt = `${loggedInUser.fullname} ${txt}`\n\n        return {\n            id: utilService.makeId(),\n            createdAt: Date.now(),\n            byMember: loggedInUser,\n            txt: activityTxt,\n            task\n        };\n    }\n\n    onToggleComments = () => {\n        this.setState({ isComments: !this.state.isComments })\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            task: {\n                ...prevState.task,\n                [field]: value,\n            }\n        }))\n    }\n\n    handleClickOutside = evt => {\n        // ..handling code goes here...\n    };\n\n    updateTask = (txt) => {\n        console.log('here', txt)\n        if (!this.state.task.title) return;\n        let copyBoard = utilService.deepClone(this.props.board);\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\n        const taskIdx = boardService.getTaskIdxById(this.state.group, this.state.task.id)\n        copyBoard.groups[groupIdx].tasks[taskIdx] = utilService.deepClone(this.state.task)\n        this.props.update(copyBoard, this.createActivity(txt))\n    }\n\n    updateTaskLabel = (updateTask) => {\n        console.log('prevLabel: ', this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\n        const task = this.state.task;\n        task.labelIds = updateTask.labelIds;\n        this.updateTask('updated label')\n        console.log('Label: ', this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\n    }\n\n    onSaveDueDate = (date) => {\n        const { task } = this.state;\n        task.dueDate = date\n        this.updateTask('saved duedate')\n    }\n\n    updateTaskState = (task) => {\n        this.setState({ task })\n    }\n\n    onAddCheckList = (task) => {\n\n        if (!task.checklists) {\n            task.checklists = [];\n        }\n        task.checklists.push({ id: utilService.makeId(), title: 'Checklist', todos: [] })\n        this.setState({ task }, () => {\n            this.updateTask('added checklist')\n        })\n    }\n\n    onRemoveCheckList = (checklistIdx) => {\n        const { task } = { ...this.state }\n        // const task = JSON.parse(JSON.stringify(this.state.task))\n        task.checklists.splice(checklistIdx, 1)\n        this.setState({ task }, () => { this.updateTask('removed a checklist') })\n    }\n\n    onUpdateChecklist = (checklist) => {\n        this.state.task.checklists = this.state.task.checklists.map(cl => cl.id === checklist.id ? checklist : cl)\n        this.setState({ task: { ...this.state.task } }, () => { this.updateTask('updated checklist') })\n    }\n\n    onDeleteTask = () => {\n        const { boardId } = this.props.match.params;\n        const copyboard = this.props.board\n        const { task, group } = this.state\n        group.tasks.splice(boardService.getTaskIdxById(group, task.id), 1)\n        copyboard.groups[boardService.getGroupIdxById(copyboard, group.id)] = group\n        this.props.update(copyboard)\n        this.props.history.push(`/board/${boardId}`)\n    }\n\n    onAddMemberToTask = (addedMember) => {\n        const { task } = this.state;\n        let str = ''\n        const memberIdx = task.members.findIndex(member => member._id === addedMember._id)\n        if (memberIdx !== -1) {\n            task.members.splice(memberIdx, 1)\n            str = `removed ${addedMember.fullname} from task`\n        }\n        else {\n            task.members.push(addedMember)\n            str = `added ${addedMember.fullname} to task`\n        }\n        console.log('str', str)\n        this.updateTask(str)\n    }\n\n\n    onSaveDueDate = (date) => {\n        const { task } = this.state;\n        task.dueDate = date\n\n        this.updateTask('added a due date')\n    }\n\n    isMemberChecked = (memberCheck) => {\n        const { task } = this.state;\n        const memberIdx = task.members.findIndex(member => member._id === memberCheck._id)\n        if (memberIdx !== -1) {\n            return 'checked'\n        }\n        else return ''\n    }\n\n    isDueDateDone = (val) => {\n        const { task } = this.state;\n        task.isDone = val\n        let str = val ? 'marked task as done' : 'marked task as not completed'\n        this.updateTask(str)\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n    openOverlay = () => {\n        this.setState({ ...this.state, overlay: 'details-overlay' });\n    }\n\n    addImgToTask = (imgUrl) => {\n        const { task } = this.state;\n        task.imgUrl = imgUrl\n        this.updateTask('added image to task')\n    }\n\n\n    closeOverlay = (ev) => {\n        if (!ev.target.classList.contains('btn-action') && !ev.target.classList.contains('btn-act')) {\n            if (ev.target.offsetParent !== undefined && ev.target.offsetParent.classList[0] !== undefined && ev.target.offsetParent.classList[0] === 'task-details') {\n                const modals = document.querySelectorAll('.action-modal');\n                if (modals) {\n                    modals.forEach(\n                        el => el.classList.add('d-none'));\n                }\n                this.setState({ ...this.state, overlay: '' });\n\n            }\n        }\n        // this.setState({ ...this.state, overlay: '' });\n        // if(ev.target.classList.contain('btn-action'))\n    }\n\n    onAddLabelTask = (labelId) => {\n        const task = this.state;\n        if (!task.labels) {\n            task.labels = [];\n        }\n        task.labels.push(labelId);\n    }\n\n    onSendComment = (txt) => {\n        const { loggedInUser } = this.props\n        const { task } = this.state;\n        task.comments.unshift({ id: utilService.makeId(), txt, createdAt: Date.now(), byMember: loggedInUser })\n        this.setState({ commentInputVal: '' })\n        this.updateTask(`commented on \"${task.title}\"`)\n    }\n\n    onRemoveComment = (commentIdx) => {\n        const { task } = this.state;\n        task.comments.splice(commentIdx, 1)\n        this.updateTask(`removed a comment from \"${task.title}\"`)\n    }\n\n    handelCommentChange = ({ target }) => {\n        const value = target.value\n        this.setState({ commentInputVal: value })\n    }\n\n    moveTask = (moveTo) => {\n        if (moveTo !== this.state.group.id) {\n            const copyBoard = { ...this.props.board }\n            copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.state.group.id)].tasks.splice(\n                boardService.getTaskIdxById(this.state.group, this.state.task.id), 1)\n            copyBoard.groups[moveTo].tasks.push(this.state.task)\n            this.setState({ group: copyBoard.groups[moveTo] })\n            this.props.update(copyBoard)\n        }\n        // this.props.history.push(`/board/${copyBoard._id}`)\n    }\n\n\n\n    render() {\n        var counter = 0;\n        const { task, isComments } = this.state;\n        const { board, loggedInUser } = this.props\n        if (!task) return <h1>Loading...</h1>\n        return (\n            <section\n                ref={this.elModalRef}\n                className={`task-details modal w-50 flex bg-modal c-stand fam-1 pad-1 ${this.state.overlay} `}\n                onClick={(ev) => {\n                    ev.stopPropagation()\n                    this.closeOverlay(ev)\n                }}\n            >\n                <div className=\"info-task flex column w-79 h-100 content-start\">\n                    {/* Title */}\n                    <form className=\"task-title flex column content-start pb-2 w-100\" onSubmit={(ev) => {\n                        ev.preventDefault()\n                        this.updateTask('updated task name')\n                    }}>\n                        <div className=\"task-title flex center h-33\">\n                            <label\n                                htmlFor=\"title\"\n                                className=\"font-3 flex center w-100\">\n                                <BsCardChecklist />\n                                <input\n                                    onBlur={() => this.updateTask('updated checklist name')}\n                                    type=\"text\"\n                                    autoComplete=\"off\"\n                                    value={task.title}\n                                    name=\"title\"\n                                    className=\"input-details title-task-input\"\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                        </div>\n                        <h3 className=\"task-list-title fam-1 font-2 left-self h-20 center\">in list{' '}\n                            <span className=\"t-decor\">{this.state.group.title}</span>\n                        </h3>\n                    </form>\n\n                    <section className=\"info-task flex wrap gap-1 center mb-1\">\n                        <div className=\"task-members\">\n                            {task.members.length > 0 && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">MEMBERS</h3>}\n                            <ul className=\"flex center gap-xs\">\n                                {task.members.map(member => {\n                                    return <UserPreview key={member._id} user={member} />\n                                })}\n                                {task.members.length > 0 &&\n                                    <span onClick={() => { this.toggleModal('members-wrap-modal'); this.openOverlay() }} className=\"btn-act  user-preview flex center content-center font-m bg-btn cur-pointer \">+</span>}\n                            </ul>\n                        </div>\n                        <div className=\"task-labels flex column center wrap\">\n                            {(task.labelIds && task.labelIds.length > 0) && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">LABELS</h3>}\n                            <ul className=\"flex center wrap\">\n                                {task.labelIds && task.labelIds.map(labelId => {\n                                    const label = board.labels.find(label => {\n                                        return label.id === labelId;\n                                    })\n                                    if (label) {\n                                        return (\n                                            <div\n                                                key={label.id}\n                                                className={`details-label bold flex center pad-xs mb-03`} onClick={() => { this.toggleModal('label-wrap-modal') }} style={{ backgroundColor: label.color }}\n                                            >\n                                                {label.title}\n                                            </div>\n                                        )\n                                    }\n                                })}\n                                {task.labelIds && task.labelIds.length > 0 && <span onClick={() => { this.toggleModal('label-wrap-modal'); this.openOverlay(); }} className=\"details-label bold flex center pad-xs mb-03 bg-btn btn-act cur-pointer\">+</span>}\n                            </ul>\n                        </div>\n                        {task.dueDate && <div className=\"task-duedate flex center column\">\n                            <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">DUE DATE</h3>\n                            <div className=\"flex\">\n                                <input onChange={(ev) => { this.isDueDateDone(ev.target.checked) }} checked={task.isDone} type=\"checkbox\" />\n                                <p>{Intl.DateTimeFormat('IL-il').format(task.dueDate)}</p>\n                                {task.isDone && <div className=\"complete-duedate\">complete</div>}\n                            </div>\n                        </div>}\n                    </section>\n\n                    <section className=\"desc-section\">\n                        <div className=\"desc-header flex row mb-1\">\n                            <GrTextAlignFull /><label>Description</label>\n                        </div>\n                        <form onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.updateTask('changed task description')\n                        }}>\n\n                            <textarea placeholder=\"Add a description for this task...\" onBlur={() => this.updateTask('changed task description')} type=\"textArea\" value={task.description} name=\"description\" className=\"input-details w-90 margin-content fam-1\" onChange={this.handleChange} />\n                        </form>\n                    </section>\n                    {task.imgUrl && <img className=\"details-img\" src={task.imgUrl} />}\n                    {utilService.isFalse(task.checklists) && <ul className=\"todos clean-list mb-3 \">\n                        {task.checklists.map((checklist, idx) => {\n                            return <CheckList\n                                key={checklist.id}\n                                onRemoveCheckList={this.onRemoveCheckList}\n                                updateChecklist={this.onUpdateChecklist}\n                                idx={idx}\n                                checklists={task.checklists}\n                                handleChange={this.handleChange}\n                                updateTask={this.updateTask}\n                                checklist={checklist}\n                                updateTaskState={this.updateTaskState}\n                                task={task}\n                            />\n                        })}\n                    </ul>}\n\n                    <section className=\"comment-section\">\n                        <div className=\"desc-header center space-between flex row mb-1\">\n                            <div className=\" desc-header flex align-center mar-0 center-self row\"> <FaRegCommentDots /><label>{isComments ? 'Comments' : 'Activities'}</label> </div>\n                            <span className=\"btn-del-chacklist font-m cur-pointer\" onClick={this.onToggleComments}>{!isComments ? 'Comments' : 'Activities'}</span>\n                        </div>\n                        <div className=\"new-comment flex center content-gap\">\n                            <UserPreview user={loggedInUser} />\n                            <form onSubmit={(ev) => {\n                                ev.preventDefault()\n                                this.onSendComment(ev.target[0].value)\n                            }}>\n                                <input autoComplete=\"off\" onChange={this.handelCommentChange} type=\"text\" value={this.state.commentInputVal} className=\"comment-input\" placeholder=\"Write a comment...\" name=\"txt\" />\n                                <button className=\"btn-send-comment\">Send</button>\n                            </form>\n                        </div>\n\n                        {task.comments && <ul className=\"comments clean-list\">\n                            {isComments && task.comments.map((comment, idx) => {\n                                return <li key={comment.id} className=\"full-comment flex column\">\n                                    <div className=\"flex space-between center\">\n                                        <div className=\"content-gap flex center\">\n                                            <UserPreview user={comment.byMember} />\n                                            <div className=\"commenter-name\">{comment.byMember.fullname}</div>\n                                            <small>{utilService.timeAgo(comment.createdAt)}</small>\n                                        </div>\n                                        <div className='btn-del-comment' onClick={() => { this.onRemoveComment(idx) }}><RiDeleteBin6Line /></div>\n                                    </div>\n                                    <div className=\"comment-gap\">\n                                        <p className=\"comment-txt \">{comment.txt}</p>\n                                    </div>\n                                </li>\n                            })}\n                            {\n                                !isComments && board.activities.map(activity => {\n                                    if (!activity) return\n                                    if (task.id === activity.task.id && counter < 3) {\n                                        counter++\n                                        return <li key={activity.id} className=\"full-comment flex column\">\n                                            <div className=\"flex space-between\">\n                                                <div className=\"content-gap flex center\">\n                                                    <UserPreview user={activity.byMember} />\n                                                    <div className=\"commenter-name\">{activity.byMember.fullname}</div>\n                                                    <small>{utilService.timeAgo(activity.createdAt)}</small>\n                                                </div>\n                                            </div>\n                                            <div className=\"comment-gap\">\n                                                <p className=\"comment-txt \">{activity.txt}</p>\n                                            </div>\n                                        </li>\n                                    }\n                                })}\n                        </ul>}\n                    </section>\n                </div>\n                <ActionList\n                    openOverlay={() => { this.openOverlay() }}\n                    onSaveDueDate={this.onSaveDueDate}\n                    onDeleteTask={this.onDeleteTask}\n                    toggleModal={this.toggleModal}\n                    isMemberChecked={this.isMemberChecked}\n                    onAddMemberToTask={this.onAddMemberToTask}\n                    task={task}\n                    group={this.state.group}\n                    onAddCheckList={this.onAddCheckList}\n                    moveTask={this.moveTask}\n                    updateState={() => { this.updateState() }}\n                    updateTask={this.updateTask}\n                    addImgToTask={this.addImgToTask}\n                    updateTaskLabel={this.updateTaskLabel}\n                />\n            </section>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    loadBoard,\n    update,\n    setBoard\n}\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(_TaskDetails)","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/reviewService.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/shared/Overlay.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/data/board.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/services/generalService/cloudinaryService.js",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/TaskPreview.jsx",["304","305","306","307","308","309"],"import { Link } from 'react-router-dom'\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Provider } from 'react-redux';\nimport { boardService } from '../../services/boardService.js'\nimport { BsCheckBox } from 'react-icons/bs'\nimport { FaRegCommentDots } from 'react-icons/fa'\nimport { AiOutlineClockCircle, AiOutlineClose } from 'react-icons/ai'\nimport { GrTextAlignFull } from 'react-icons/gr'\nimport { connect } from 'react-redux'\nimport { utilService } from '../../services/generalService/utilService'\nimport React, { Component } from 'react'\nimport { UserPreview } from './UserPreview.jsx';\n\nimport { toggleLabel } from '../../store/actions/systemAction.js';\n\n\n\n// export function TaskPreview({ board, index, task, updateBoard, groupId }) {\nclass _TaskPreview extends Component {\n\n    getStyle = (style, snapshot) => {\n        if (!snapshot.isDropAnimating) {\n            return style;\n        }\n        const { moveTo, curve, duration } = snapshot.dropAnimation;\n        // move to the right spot\n        const translate = `translate(${moveTo.x}px, ${moveTo.y}px)`;\n        // add a bit of turn for fun\n        const rotate = 'rotate(0.01turn)';\n\n        // patching the existing style\n        return {\n            ...style,\n            background: '#fff',\n            transform: `${translate} ${rotate}`,\n            // slowing down the drop because we can\n            transition: `all ${curve} 0.2s`,\n        };\n    }\n\n    onRemoveTask = (taskId) => {\n        const { board, index, task, updateBoard, groupId } = this.props\n        const group = board.groups[boardService.getGroupIdxById(board, groupId)]\n        board.groups[boardService.getGroupIdxById(board, groupId)].tasks.splice(boardService.getTaskIdxById(group, taskId), 1)\n        updateBoard({ ...board })\n    }\n\n    dueDateDonePreview = (task) => {\n        if(task.isDone) return 'done-preview'\n        else return ''\n     }\n    render() {\n        const { board, index, task, group, groupId } = this.props\n        const isLabelOpen = this.props.isLabelOpen;\n        return <Draggable\n            draggableId={task.id}\n            index={index}\n        // isDragDisabled={false}\n        >\n            {(provided, snapshot) => {\n                return (\n                    <div\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isdragging={snapshot.isDragging && !snapshot.isDropAnimating ? 'true' : 'false'}\n                        style={this.getStyle(provided.draggableProps.style, snapshot)}\n                    >\n                        <div className=\"wrap-list-task br-3\">\n                            <div className=\"wrap-task-prev\">\n                            {task.imgUrl && <img className=\"preview-img\" src={task.imgUrl}/> }\n                                <div className=\"task-preview flex column\">\n                                    {/* <Link to={`/board/${board._id}/${task.id}`}> */}\n                                    <span className=\"cur-pointer fam-1 font-s bold flex d-none \" onClick={() => { this.onRemoveTask(task.id) }}><AiOutlineClose className=\"preview-icon\" /></span>\n                                    {utilService.isFalse(task.labelIds) &&\n                                                <div className=\"labels-container flex  wrap\" onClick={(ev) => {\n                                                    ev.stopPropagation();\n                                                }}>\n                                                    {\n                                                        task.labelIds.map(labelId => {\n                                                            const label = board.labels.find(label => {\n                                                                return label.id === labelId;\n                                                            })\n\n                                                            if (label) {\n                                                                return <div\n                                                                    key={label.id}\n                                                                    className={`preview-label flex  ${isLabelOpen && \"label-open\"}`}\n                                                                    onClick={() => this.props.toggleLabel(!isLabelOpen)}\n                                                                    style={{ backgroundColor: label.color }}\n                                                                >\n                                                                    {this.props.isLabelOpen && label.title}\n                                                                </div>\n                                                            }\n                                                        })}\n\n                                        </div>\n                                    }\n\n                                    <Link to={`/board/${board._id}/${groupId}/${task.id}`}>\n\n\n                                        <h1 style={{color:group.color?group.color:'#172b4d'}} className=\"task-title fam-1 font-m\">{task.title}</h1>\n                                        <div className=\"task-mini-details flex row-reverse w-100 space-between gap-xs fam-1 c-stand center\">\n                                            <div>\n                                            {utilService.isFalse(task.members) && <small className=\"flex center\">{task.members.map(member => { return <UserPreview key={member._id} user={member} /> }).splice(0, 3)}</small>}\n                                            </div>\n                                            <div className=\"flex\">\n                                            {utilService.isFalse(task.comments) && <small className=\"flex center\"><FaRegCommentDots className=\"preview-icon\" /></small>}\n                                            {utilService.isFalse(task.checklists) && <div className={`preview-icon flex row center ${boardService.checklistPreview(task).isDone && \"done-preview\"}`}>\n                                                <BsCheckBox className=\"preview-icon\" />\n                                                <small>{boardService.checklistPreview(task).str}</small>\n                                            </div>}\n                                            {task.dueDate && <div className={`preview-icon flex row center ${this.dueDateDonePreview(task)}`}>\n                                                <AiOutlineClockCircle className=\"preview-icon\" />\n                                                <small>\n                                                    { utilService.getFormattedDate(task.dueDate) }\n                                                </small>\n                                            </div>}\n                                            {task.description && <small className=\"flex center\"><GrTextAlignFull className=\"preview-icon\" /></small>}\n                                            </div>\n                                        </div>\n                                    </Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n            }\n        </Draggable>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n        isLabelOpen : state.systemModule.isLabelsOpen\n    }\n}\nconst mapDispatchToProps = {\n    toggleLabel\n}\nexport const TaskPreview = connect(mapStateToProps, mapDispatchToProps)(_TaskPreview)","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/boardNavbar/InfoBoardModal.jsx",["310","311"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport { Link } from 'react-router-dom';\nimport { BsCalendar } from 'react-icons/bs'\nimport { BiBarChartAlt2 } from 'react-icons/bi'\nimport { RiDashboardLine } from 'react-icons/ri'\n\n\n\n\n\nclass _InfoBoardModal extends Component {\n\n    render() {\n        const { board } = this.props;\n        return <div className=\"action-modal info-board-wrap-modal d-none p-abs flex\">\n            <ModalAction>\n                <div className=\"info-board-modal p-abs flex column center bg-white c-stand z-1 br-3 h-50\">\n                    <span className=\"cur-pointer fam-1 font-m bold flex w-100 content-end\" onClick={() => { this.props.toggleModal() }}><AiOutlineClose /></span>\n                    <div className=\"action-content font-m \">\n                        <ul className=\"flex column h-100 w-100\">\n                            <li\n                                onClick={() => { this.props.changeDisplay('board') }}>\n                                <RiDashboardLine />Board\n                            </li>\n                            <li \n                                onClick={() => { this.props.changeDisplay('dashboard') }}>\n                                <BiBarChartAlt2 />Dashboard\n                            </li>\n                            <li\n                                onClick={() => { this.props.changeDisplay('calendar') }}>\n                                 <BsCalendar /> Calender</li>\n                        </ul>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const InfoBoardModal = connect(mapStateToProps, mapDispatchToProps)(_InfoBoardModal)","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/MembersBoard.jsx",["312"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/dashboard/ChartLabelsTasks.jsx",["313","314"],"import { Component } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { connect } from 'react-redux';\nimport { utilService } from '../../services/generalService/utilService'\n\n// import { add, loadBoard, update, setBoard, remove } from '../store/actions/boardsAction.js';\n\n\n\nclass _ChartLabelsTasks extends Component {\n    state = {\n        tasks: null,\n        labels: null\n    }\n\n    componentDidMount() {\n        this.setState({\n            ...this.state,\n            tasks: this.props.tasks,\n            labels: this.props.labelsBoard\n        })\n    }\n\n    mapLabelsTask = (labels, tasks) => {\n\n        const mapObj = {};\n        if (labels && tasks) {\n            labels.forEach(label => {\n                mapObj[`${label.title}`] = 0;\n                console.log(mapObj);\n                tasks.forEach(task => {\n                    if (task.labelIds) {\n                        task.labelIds.forEach(labelId => {\n                            if (labelId === label.id) {\n                                mapObj[`${label.title}`]++;\n                            }\n                        })\n                    }\n                })\n            });\n            return mapObj;\n        }\n\n    }\n\n    render() {\n        const { tasks, labels } = this.state;\n        if (!tasks || !labels) return <h1>Loading...</h1>\n        const mapLabelsTask = this.mapLabelsTask(labels, tasks);\n        const backgroundColorDashboard = [];\n        const backgroundColorBorder = [];\n\n        labels.forEach( label => {\n            backgroundColorDashboard.push(label.color);\n        })\n        const data = {\n            labels: Object.keys(mapLabelsTask),\n            datasets: [\n                {\n                    label: 'Task per Member',\n                    data: Object.values(mapLabelsTask),\n\n                    backgroundColor: backgroundColorDashboard,\n                    borderColor: [\n                        '#95a5a6',\n                    ],\n                    borderWidth: 0.5,\n                },\n            ],\n        };\n        return (\n            <div className=\"category-chart\">\n                <Pie data={data} />\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n\n}\nexport const ChartLabelsTasks = connect(mapStateToProps, mapDispatchToProps)(_ChartLabelsTasks)","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/dashboard/ChartGroupsTasks.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/dashboard/ChartMembersTasks.jsx",["315"],"import { Component } from 'react';\nimport { Bar     } from 'react-chartjs-2';\nimport { connect } from 'react-redux';\nimport {utilService} from '../../services/generalService/utilService'\n\n// import { add, loadBoard, update, setBoard, remove } from '../store/actions/boardsAction.js';\n\n\n\nclass _ChartMembersTasks extends Component {\n    state = {\n        tasks: null,\n        members: null\n    }\n\n    componentDidMount() {\n        this.setState({\n            ...this.state,\n            tasks: this.props.tasks,\n            members: this.props.membersBoard\n        })\n    }\n\n    mapMembersTask = (members,tasks) => {\n\n        const mapObj = {};\n        members.forEach( member => {\n            mapObj[`${member.fullname}`] = 0;\n            console.log(mapObj);\n            tasks.forEach( task => {\n                task.members.forEach( currMember => {\n                    if(currMember.fullname === member.fullname){\n                        mapObj[`${member.fullname}`]++;\n                    }\n                })\n            })\n        });\n        return mapObj;\n        \n    }\n    \n\n    render() {\n        const {tasks, members} = this.state;\n        if(!tasks || !members) return <h1>Loading...</h1>\n        const mapMembersTask = this.mapMembersTask(members,tasks);\n        const backgroundColor = [];\n        const borderColor = [];\n\n        utilService.randColor(Object.keys(mapMembersTask).length).forEach( color => {\n            backgroundColor.push(color[0]);\n            borderColor.push(color[1]);\n        });\n\n        const data = {\n            labels: Object.keys(mapMembersTask),\n            datasets: [\n                {\n                    label: '',\n                    data: Object.values(mapMembersTask),\n                    backgroundColor: backgroundColor,\n                    borderColor: borderColor,\n                    borderWidth: 0.5,\n                },\n            ],\n        };\n\n        const options = {\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    beginAtZero: true,\n                  },\n                },\n              ],\n            },\n          };\n\n          \n\n        return (\n            <div className=\"category-chart\">\n                <Bar data={data} />\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n\n}\nexport const ChartMembersTasks = connect(mapStateToProps, mapDispatchToProps)(_ChartMembersTasks)","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx",["316","317","318"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { MdLabelOutline } from 'react-icons/md'\nimport { AiOutlineClockCircle, AiOutlineCheckSquare, AiOutlineDelete } from 'react-icons/ai'\nimport { BiCopy } from 'react-icons/bi'\nimport { FiUsers } from 'react-icons/fi'\nimport { BsImage, BsArrowRight } from 'react-icons/bs'\nimport { LabelModal } from './actionModal/LabelModal';\nimport { MembersModal } from './actionModal/MembersModal'\nimport { DueDateModal } from './actionModal/DueDateModal'\nimport { MoveModal } from './actionModal/MoveModal'\nimport { CopyModal } from './actionModal/CopyModal'\nimport { withRouter } from \"react-router\";\nimport { Upload } from '../../../Upload';\nimport { GrClose } from 'react-icons/gr';\n\n\n\nclass _ActionList extends Component {\n    state = {\n        task: null\n    }\n\n    componentDidMount() {\n\n        this.setState({\n            task: this.props.task\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n    }\n\n    closeDetails = () => {\n        const boardId = this.props.match.params.boardId;\n        this.props.history.push(`/board/${boardId}`)\n    }\n    render() {\n        const { task } = this.state\n        if (!task) return <h1>Loading...</h1>\n        return (\n            <div className=\"menu-task flex column w-50 content-start ps-1\">\n                <div className=\"details-action flex column w-100\">\n                    <div className=\"close-details fam-2 font-1 bold cur-pointer mb-2\" onClick={() => this.closeDetails()}>\n                        <GrClose/>\n                    </div>\n                    <label htmlFor=\"actions\" className=\"font-m pb-3 ps-2 mb-1\">ACTIONS</label>\n                </div>\n                <ul className=\"action-menu flex column w-100 clean-list font-m pad-0 fw-2\">\n\n                    <li className=\"label-wrap\" onClick={() => this.props.openOverlay('label-wrap-modal')}>\n                        <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('label-wrap-modal') }}><MdLabelOutline />Labels</div>\n                        <LabelModal toggleModal={() => { this.props.toggleModal() }} updateTaskLabel={this.props.updateTaskLabel}\n                            task={task} />\n                    </li>\n\n                    <ul className=\"members-wrap\">\n                        <li className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('members-wrap-modal') }}><FiUsers className=\"action-icon\" />Members</li>\n                        <MembersModal isMemberChecked={this.props.isMemberChecked} onAddMemberToTask={this.props.onAddMemberToTask} toggleModal={() => { this.props.toggleModal() }} />\n                    </ul>\n\n                    <li className=\"duedate-wrap\">\n                        <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClockCircle className=\"action-icon\" />DueDate</div>\n                        <DueDateModal onSaveDueDate={this.props.onSaveDueDate} toggleModal={() => { this.props.toggleModal() }} />\n                    </li>\n\n                    <li onClick={() => { this.props.onAddCheckList(task) }} className=\"btn-action\"><AiOutlineCheckSquare className=\"action-icon\" />Checklist</li>\n                    <li onClick={(ev) => { ev.stopPropagation() }} className=\"no-modal-action\"><Upload addImgToTask={this.props.addImgToTask} /></li>\n                    <li className=\"move-wrap\">\n                        <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><BsArrowRight />Move</div>\n                        <MoveModal group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\n                    </li>\n                    <li className=\"copy-wrap\">\n                        <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('copy-wrap-modal') }}><BiCopy className=\"action-icon\" />Copy</div>\n                        <CopyModal className=\"action-icon\" group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\n                    </li>\n                    <li onClick={() => { this.props.onDeleteTask() }} className=\"btn-action btn-delete\"><AiOutlineDelete className=\"action-icon\" />Delete</li>\n                </ul>\n            </div>\n        )\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const ActionList = connect(mapStateToProps, mapDispatchToProps)(withRouter(_ActionList));\n","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/GroupModal.jsx",["319","320","321","322"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport { remove, add, loadBoard, update, setBoard } from '../../../../../store/actions/boardsAction.js';\nimport { boardService } from '../../../../../services/boardService.js'\n\nclass _GroupModal extends Component {\n    state = {\n        group: null\n    }\n\n    componentDidMount() {\n        this.setState({ group: this.props.group })\n    }\n\n    changeGroupColor(color) {\n        const copyBoard = { ...this.props.board }\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\n        copyBoard.groups[groupIdx].color = (copyBoard.groups[groupIdx].color === color) ? '' : color;\n        this.setState({group:copyBoard.groups[groupIdx]})\n        this.props.update(copyBoard)\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n\n    addTask = () => {\n\n    }\n\n    removeList = (groupId) => {\n        const copyBoard = { ...this.props.board }\n        const groupIdx = boardService.getGroupIdxById(copyBoard, groupId)\n        copyBoard.groups.splice(groupIdx, 1)\n        this.props.update(copyBoard)\n    }\n    render() {\n        const group = this.state.group;\n        if (!group) return <h1>Loading...</h1>\n        const groupId = group.id;\n        return <div className={`action-modal group-wrap-modal g-${groupId} d-none p-abs flex`}>\n            <ModalAction>\n                <div className=\"group-modal p-abs flex column pad-07 c-stand z-1 br-3\">\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\n                        <h1 className=\"fam-1 font-2 \">List: {group.title}</h1>\n                        <span className=\"cur-pointer fam-1 font-m bold\" onClick={() => { this.props.toggleModal(`${groupId}`) }}><AiOutlineClose /></span>\n                    </div>\n                    <div className=\"action-content\">\n                        <ul className=\"flex column space-between\">\n                            <ul >\n                                <li onClick={() => { this.AddTask() }} className=\"font-2 fam-1 pad-1 li-btn flex center\">Add Task...</li>\n                                <li onClick={() => { this.removeList(groupId) }} className=\"font-2 fam-1 pad-1 flex center li-btn\">Remove List...</li>\n                                <li className=\"group-colors font-2 fam-1 pad-1 flex center\">\n                                    {this.props.board.labels.map(label => <div onClick={() => { this.changeGroupColor(label.color) }} className=\"group-label\" style={{\n                                        backgroundColor: label.color, height: group.color === label.color ? '38px' : '32px',\n                                        width: group.color === label.color ? '38px' : '32px'\n                                    }}></div>)}\n                                </li>\n                            </ul>\n                        </ul>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const GroupModal = connect(mapStateToProps, mapDispatchToProps)(_GroupModal)","/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/shared/ModalAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx",["323"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/CopyModal.jsx",["324","325"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MoveModal.jsx",["326","327"],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4 new/Taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx",["328","329","330","331","332"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { FiEdit2 } from 'react-icons/fi'\nimport { withRouter } from \"react-router\";\nimport { update } from '../../../../store/actions/boardsAction';\nimport { boardService } from '../../../../services/boardService';\n\nclass _LabelTask extends Component {\n    state = {\n        isDisable: true,\n        titleLabel: this.props.label.title ? this.props.label.title : '',\n        task: null,\n        group: null\n    }\n\n    componentDidMount() {\n        const { taskId, groupId } = this.props.match.params;\n        const board = this.props.board;\n        const group = boardService.getGroupById(board, groupId);\n        const task = boardService.getTaskById(group, taskId);\n        this.setState({ ...this.state, task: task, group: group });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props !== prevProps) {\n            const { boardId, taskId, groupId } = this.props.match.params;\n            const board = { ...this.props.board };\n            const group = boardService.getGroupById(board, groupId);\n            const task = boardService.getTaskById(group, taskId);\n            this.setState({ ...this.state, task: task, group: group });\n        }\n\n    }\n\n    toggleLabel(labelId, nameInput) {\n        const { task, group } = this.state;\n        const board = { ...this.props.board };\n        if (!task.labelIds) {\n            task.labelIds = []\n        }\n        const labelIdx = task.labelIds.findIndex(currLabelId => currLabelId === labelId);\n        if (labelIdx > -1) {\n            task.labelIds.splice(labelIdx, 1)\n        } else task.labelIds.push(labelId)\n        this.props.updateTaskLabel(task)\n        // const updateBoard = boardService.updateTaskAtBoard(board, group, task);\n        // this.props.update(updateBoard)\n    }\n\n    toggleDisable(nameInput) {\n        document.querySelector(`.${nameInput}`).disabled = !(document.querySelector(`.${nameInput}`).disabled); \n        this.setState({\n            isDisable: !this.state.isDisable\n        })\n    }\n\n    borderLabel = (task, labelId) => {\n        if (task.labelIds) {\n            if (task.labelIds.includes(labelId))\n                return 'border';\n        }\n        return '';\n    }\n\n    handleChange = ({ target }) => {\n        const value = target.value;\n        this.setState({\n            ...this.state,\n            titleLabel: value\n        });\n        const label = this.props.label;\n        label.title = target.value;\n        this.updateLabelBoard(label);\n    }\n\n    updateLabelBoard = (label) => {\n        const { board } = this.props;\n        const idx = board.labels.findIndex(currLabel => currLabel.id === label.id);\n        board.labels.splice(idx, 1, label);\n        this.props.update(board);\n    };\n\n    render() {\n        const task = this.props.task;\n        if(!task) return <h1>lodaing...</h1>\n        const { label } = this.props;\n        let className;\n        if (task) {\n            className = this.borderLabel(task, label.id);\n        }\n        const nameInput = `label-${label.id}`;\n        return (\n            <div className=\"label flex center space-between w-100 pad-s h-20\" data-label={label.id}>\n                <div className={`wrap-label ${className} w-90`} onClick={() => this.toggleLabel(label.id, nameInput)}\n                >\n                    <input\n                        type=\"text\"\n                        name={nameInput}\n                        value={this.state.titleLabel}\n                        style={{ background: `${label.color}` }}\n                        className={`label-input ${nameInput} ${this.state.isDisable}  cur-pointer`}\n                        onChange={this.handleChange}\n                        maxLength={13}\n                        disabled\n                    />\n                </div>\n                    <span onClick={() => { this.toggleDisable(nameInput) }} className=\"edit-label ps-1\"><FiEdit2 /> </span>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const LabelTask = connect(mapStateToProps, mapDispatchToProps)(withRouter(_LabelTask))",{"ruleId":"333","severity":1,"message":"334","line":2,"column":34,"nodeType":"335","messageId":"336","endLine":2,"endColumn":51},{"ruleId":"333","severity":1,"message":"337","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":14},{"ruleId":"333","severity":1,"message":"338","line":6,"column":37,"nodeType":"335","messageId":"336","endLine":6,"endColumn":48},{"ruleId":"333","severity":1,"message":"339","line":4,"column":8,"nodeType":"335","messageId":"336","endLine":4,"endColumn":16},{"ruleId":"333","severity":1,"message":"340","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":17},{"ruleId":"333","severity":1,"message":"341","line":7,"column":10,"nodeType":"335","messageId":"336","endLine":7,"endColumn":21},{"ruleId":"333","severity":1,"message":"342","line":7,"column":23,"nodeType":"335","messageId":"336","endLine":7,"endColumn":32},{"ruleId":"333","severity":1,"message":"343","line":7,"column":34,"nodeType":"335","messageId":"336","endLine":7,"endColumn":46},{"ruleId":"333","severity":1,"message":"344","line":8,"column":10,"nodeType":"335","messageId":"336","endLine":8,"endColumn":19},{"ruleId":"345","severity":1,"message":"346","line":41,"column":11,"nodeType":"347","endLine":41,"endColumn":57},{"ruleId":"345","severity":1,"message":"346","line":51,"column":11,"nodeType":"347","endLine":51,"endColumn":64},{"ruleId":"345","severity":1,"message":"346","line":60,"column":11,"nodeType":"347","endLine":60,"endColumn":60},{"ruleId":"345","severity":1,"message":"346","line":68,"column":11,"nodeType":"347","endLine":68,"endColumn":60},{"ruleId":"333","severity":1,"message":"348","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":16},{"ruleId":"345","severity":1,"message":"346","line":43,"column":11,"nodeType":"347","endLine":43,"endColumn":28},{"ruleId":"333","severity":1,"message":"349","line":3,"column":10,"nodeType":"335","messageId":"336","endLine":3,"endColumn":17},{"ruleId":"333","severity":1,"message":"350","line":8,"column":27,"nodeType":"335","messageId":"336","endLine":8,"endColumn":36},{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","replacedBy":"354"},{"ruleId":"333","severity":1,"message":"355","line":6,"column":10,"nodeType":"335","messageId":"336","endLine":6,"endColumn":21},{"ruleId":"356","severity":1,"message":"357","line":95,"column":49,"nodeType":"358","messageId":"359","endLine":95,"endColumn":51},{"ruleId":"356","severity":1,"message":"357","line":99,"column":49,"nodeType":"358","messageId":"359","endLine":99,"endColumn":51},{"ruleId":"333","severity":1,"message":"360","line":3,"column":10,"nodeType":"335","messageId":"336","endLine":3,"endColumn":23},{"ruleId":"333","severity":1,"message":"361","line":3,"column":25,"nodeType":"335","messageId":"336","endLine":3,"endColumn":50},{"ruleId":"333","severity":1,"message":"362","line":81,"column":19,"nodeType":"335","messageId":"336","endLine":81,"endColumn":31},{"ruleId":"333","severity":1,"message":"363","line":3,"column":7,"nodeType":"335","messageId":"336","endLine":3,"endColumn":23},{"ruleId":"333","severity":1,"message":"355","line":1,"column":10,"nodeType":"335","messageId":"336","endLine":1,"endColumn":21},{"ruleId":"333","severity":1,"message":"364","line":4,"column":10,"nodeType":"335","messageId":"336","endLine":4,"endColumn":24},{"ruleId":"333","severity":1,"message":"365","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":15},{"ruleId":"356","severity":1,"message":"366","line":108,"column":44,"nodeType":"358","messageId":"367","endLine":108,"endColumn":46},{"ruleId":"368","severity":1,"message":"369","line":121,"column":16,"nodeType":"370","messageId":"371","endLine":121,"endColumn":18},{"ruleId":"368","severity":1,"message":"369","line":126,"column":23,"nodeType":"370","messageId":"371","endLine":126,"endColumn":25},{"ruleId":"333","severity":1,"message":"372","line":43,"column":7,"nodeType":"335","messageId":"336","endLine":43,"endColumn":20},{"ruleId":"333","severity":1,"message":"355","line":1,"column":10,"nodeType":"335","messageId":"336","endLine":1,"endColumn":21},{"ruleId":"333","severity":1,"message":"373","line":6,"column":9,"nodeType":"335","messageId":"336","endLine":6,"endColumn":21},{"ruleId":"333","severity":1,"message":"374","line":31,"column":11,"nodeType":"335","messageId":"336","endLine":31,"endColumn":23},{"ruleId":"333","severity":1,"message":"375","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":25},{"ruleId":"368","severity":1,"message":"369","line":103,"column":55,"nodeType":"370","messageId":"371","endLine":103,"endColumn":57},{"ruleId":"333","severity":1,"message":"376","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":14},{"ruleId":"333","severity":1,"message":"377","line":2,"column":16,"nodeType":"335","messageId":"336","endLine":2,"endColumn":23},{"ruleId":"333","severity":1,"message":"378","line":48,"column":16,"nodeType":"335","messageId":"336","endLine":48,"endColumn":21},{"ruleId":"333","severity":1,"message":"376","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":14},{"ruleId":"333","severity":1,"message":"377","line":2,"column":16,"nodeType":"335","messageId":"336","endLine":2,"endColumn":23},{"ruleId":"333","severity":1,"message":"379","line":112,"column":24,"nodeType":"335","messageId":"336","endLine":112,"endColumn":32},{"ruleId":"356","severity":1,"message":"380","line":221,"column":52,"nodeType":"381","messageId":"382","endLine":221,"endColumn":58},{"ruleId":"333","severity":1,"message":"376","line":3,"column":10,"nodeType":"335","messageId":"336","endLine":3,"endColumn":14},{"ruleId":"333","severity":1,"message":"383","line":6,"column":8,"nodeType":"335","messageId":"336","endLine":6,"endColumn":22},{"ruleId":"333","severity":1,"message":"384","line":30,"column":17,"nodeType":"335","messageId":"336","endLine":30,"endColumn":24},{"ruleId":"385","severity":1,"message":"386","line":144,"column":9,"nodeType":"387","endLine":144,"endColumn":24},{"ruleId":"356","severity":1,"message":"357","line":326,"column":81,"nodeType":"358","messageId":"359","endLine":326,"endColumn":83},{"ruleId":"345","severity":1,"message":"346","line":366,"column":41,"nodeType":"347","endLine":366,"endColumn":90},{"ruleId":"356","severity":1,"message":"357","line":416,"column":67,"nodeType":"358","messageId":"359","endLine":416,"endColumn":69},{"ruleId":"356","severity":1,"message":"380","line":417,"column":55,"nodeType":"381","messageId":"382","endLine":417,"endColumn":61},{"ruleId":"333","severity":1,"message":"388","line":3,"column":10,"nodeType":"335","messageId":"336","endLine":3,"endColumn":18},{"ruleId":"333","severity":1,"message":"389","line":25,"column":32,"nodeType":"335","messageId":"336","endLine":25,"endColumn":40},{"ruleId":"333","severity":1,"message":"390","line":42,"column":24,"nodeType":"335","messageId":"336","endLine":42,"endColumn":29},{"ruleId":"333","severity":1,"message":"391","line":42,"column":31,"nodeType":"335","messageId":"336","endLine":42,"endColumn":35},{"ruleId":"345","severity":1,"message":"346","line":71,"column":45,"nodeType":"347","endLine":71,"endColumn":93},{"ruleId":"356","severity":1,"message":"357","line":80,"column":83,"nodeType":"358","messageId":"359","endLine":80,"endColumn":85},{"ruleId":"333","severity":1,"message":"376","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":14},{"ruleId":"333","severity":1,"message":"378","line":17,"column":17,"nodeType":"335","messageId":"336","endLine":17,"endColumn":22},{"ruleId":"333","severity":1,"message":"376","line":4,"column":10,"nodeType":"335","messageId":"336","endLine":4,"endColumn":14},{"ruleId":"333","severity":1,"message":"355","line":4,"column":10,"nodeType":"335","messageId":"336","endLine":4,"endColumn":21},{"ruleId":"333","severity":1,"message":"392","line":51,"column":15,"nodeType":"335","messageId":"336","endLine":51,"endColumn":36},{"ruleId":"333","severity":1,"message":"355","line":4,"column":9,"nodeType":"335","messageId":"336","endLine":4,"endColumn":20},{"ruleId":"333","severity":1,"message":"376","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":14},{"ruleId":"333","severity":1,"message":"377","line":2,"column":16,"nodeType":"335","messageId":"336","endLine":2,"endColumn":23},{"ruleId":"333","severity":1,"message":"393","line":8,"column":10,"nodeType":"335","messageId":"336","endLine":8,"endColumn":17},{"ruleId":"333","severity":1,"message":"394","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":16},{"ruleId":"333","severity":1,"message":"395","line":5,"column":18,"nodeType":"335","messageId":"336","endLine":5,"endColumn":21},{"ruleId":"333","severity":1,"message":"396","line":5,"column":23,"nodeType":"335","messageId":"336","endLine":5,"endColumn":32},{"ruleId":"333","severity":1,"message":"397","line":5,"column":42,"nodeType":"335","messageId":"336","endLine":5,"endColumn":50},{"ruleId":"333","severity":1,"message":"355","line":5,"column":9,"nodeType":"335","messageId":"336","endLine":5,"endColumn":20},{"ruleId":"333","severity":1,"message":"398","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":19},{"ruleId":"333","severity":1,"message":"373","line":7,"column":10,"nodeType":"335","messageId":"336","endLine":7,"endColumn":22},{"ruleId":"333","severity":1,"message":"398","line":5,"column":10,"nodeType":"335","messageId":"336","endLine":5,"endColumn":19},{"ruleId":"333","severity":1,"message":"373","line":7,"column":10,"nodeType":"335","messageId":"336","endLine":7,"endColumn":22},{"ruleId":"333","severity":1,"message":"376","line":2,"column":10,"nodeType":"335","messageId":"336","endLine":2,"endColumn":14},{"ruleId":"333","severity":1,"message":"377","line":2,"column":16,"nodeType":"335","messageId":"336","endLine":2,"endColumn":23},{"ruleId":"333","severity":1,"message":"384","line":27,"column":21,"nodeType":"335","messageId":"336","endLine":27,"endColumn":28},{"ruleId":"333","severity":1,"message":"399","line":37,"column":23,"nodeType":"335","messageId":"336","endLine":37,"endColumn":28},{"ruleId":"333","severity":1,"message":"378","line":38,"column":15,"nodeType":"335","messageId":"336","endLine":38,"endColumn":20},"no-unused-vars","'localLoggedinUser' is assigned a value but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'IoAppsSharp' is defined but never used.","'LoginPic' is defined but never used.","'connect' is defined but never used.","'loadReviews' is defined but never used.","'addReview' is defined but never used.","'removeReview' is defined but never used.","'loadUsers' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Upload' is defined but never used.","'loading' is defined but never used.","'Draggable' is defined but never used.","no-native-reassign",["400"],"no-negated-in-lhs",["401"],"'utilService' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'socketService' is defined but never used.","'SOCKET_EVENT_REVIEW_ADDED' is defined but never used.","'updatedBoard' is assigned a value but never used.","'SCORE_FOR_REVIEW' is assigned a value but never used.","'BsBookmarkDash' is defined but never used.","'Board' is defined but never used.","Array.prototype.findIndex() expects a return value from arrow function.","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'socketIsReady' is assigned a value but never used.","'boardService' is defined but never used.","'previewStyle' is assigned a value but never used.","'DragDropContext' is defined but never used.","'Link' is defined but never used.","'NavLink' is defined but never used.","'board' is assigned a value but never used.","'onUpdate' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'onClickOutside' is defined but never used.","'boardId' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Provider' is defined but never used.","'duration' is assigned a value but never used.","'index' is assigned a value but never used.","'task' is assigned a value but never used.","'backgroundColorBorder' is assigned a value but never used.","'BsImage' is defined but never used.","'remove' is defined but never used.","'add' is defined but never used.","'loadBoard' is defined but never used.","'setBoard' is defined but never used.","'LabelTask' is defined but never used.","'group' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]