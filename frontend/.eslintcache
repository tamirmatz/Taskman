[{"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\index.js":"1","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\serviceWorkerRegistration.js":"2","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\store.js":"4","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\App.jsx":"5","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\userReducer.js":"6","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\systemReducer.js":"7","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\reviewReducer.js":"8","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\boardReducer.js":"9","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\routes.js":"10","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\AppHeader.jsx":"11","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\LoginSignup.jsx":"12","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Chat.jsx":"13","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\UserDetails.jsx":"14","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Board.jsx":"15","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\BoardList.jsx":"16","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Home.jsx":"17","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskDetails.jsx":"18","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\boardsAction.js":"19","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\userActions.js":"20","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\reviewActions.js":"21","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\socketService.js":"22","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\userService.js":"23","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\Upload.jsx":"24","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskList.jsx":"25","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\reviewService.js":"26","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\boardService.js":"27","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\httpService.js":"28","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\cloudinaryService.js":"29","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\utilService.js":"30","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\asyncStorageService.js":"31","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskPreview.jsx":"32","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\data\\board.js":"33","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\ModalWrapper.jsx":"34","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\Overlay.jsx":"35"},{"size":935,"mtime":1622098926959,"results":"36","hashOfConfig":"37"},{"size":5201,"mtime":1622098926966,"results":"38","hashOfConfig":"37"},{"size":377,"mtime":1622098926965,"results":"39","hashOfConfig":"37"},{"size":752,"mtime":1622112896615,"results":"40","hashOfConfig":"37"},{"size":535,"mtime":1622209089530,"results":"41","hashOfConfig":"37"},{"size":737,"mtime":1622098926983,"results":"42","hashOfConfig":"37"},{"size":322,"mtime":1622098926982,"results":"43","hashOfConfig":"37"},{"size":669,"mtime":1622098926981,"results":"44","hashOfConfig":"37"},{"size":688,"mtime":1622215143805,"results":"45","hashOfConfig":"37"},{"size":660,"mtime":1622294072453,"results":"46","hashOfConfig":"37"},{"size":834,"mtime":1622371122334,"results":"47","hashOfConfig":"37"},{"size":5395,"mtime":1622098926963,"results":"48","hashOfConfig":"37"},{"size":3395,"mtime":1622115436998,"results":"49","hashOfConfig":"37"},{"size":732,"mtime":1622098926964,"results":"50","hashOfConfig":"37"},{"size":5527,"mtime":1622376997207,"results":"51","hashOfConfig":"37"},{"size":917,"mtime":1622208691502,"results":"52","hashOfConfig":"37"},{"size":1028,"mtime":1622377619731,"results":"53","hashOfConfig":"37"},{"size":4849,"mtime":1622369954569,"results":"54","hashOfConfig":"37"},{"size":1930,"mtime":1622280991275,"results":"55","hashOfConfig":"37"},{"size":1574,"mtime":1622098926978,"results":"56","hashOfConfig":"37"},{"size":1321,"mtime":1622115440359,"results":"57","hashOfConfig":"37"},{"size":2419,"mtime":1622115444535,"results":"58","hashOfConfig":"37"},{"size":2300,"mtime":1622115443280,"results":"59","hashOfConfig":"37"},{"size":1127,"mtime":1622115446261,"results":"60","hashOfConfig":"37"},{"size":4549,"mtime":1622371122336,"results":"61","hashOfConfig":"37"},{"size":1087,"mtime":1622115441879,"results":"62","hashOfConfig":"37"},{"size":3437,"mtime":1622288628247,"results":"63","hashOfConfig":"37"},{"size":1136,"mtime":1622115365941,"results":"64","hashOfConfig":"37"},{"size":587,"mtime":1622115356033,"results":"65","hashOfConfig":"37"},{"size":3330,"mtime":1622301321356,"results":"66","hashOfConfig":"37"},{"size":2404,"mtime":1622283961369,"results":"67","hashOfConfig":"37"},{"size":5232,"mtime":1622376997200,"results":"68","hashOfConfig":"37"},{"size":305507,"mtime":1622370291033,"results":"69","hashOfConfig":"37"},{"size":165,"mtime":1622294072443,"results":"70","hashOfConfig":"37"},{"size":105,"mtime":1622294072445,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1prlnqd",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\index.js",[],["150","151"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\store.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\App.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\systemReducer.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\reviewReducer.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\boardReducer.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\routes.js",["152","153","154","155"],"import { Home } from './pages/Home'\r\nimport { LoginSignup } from './pages/LoginSignup'\r\nimport { Chat } from './pages/Chat'\r\nimport { UserDetails } from './pages/UserDetails'\r\nimport { BoardList } from './pages/BoardList'\r\nimport { Board } from './pages/Board'\r\nimport { TaskDetails } from './cmps/board/TaskDetails'\r\n\r\nexport const routes = [\r\n    /* {\r\n        path: '/board/:boardId/:groupId/:taskId',\r\n        component: TaskDetails,\r\n    }, */\r\n    {\r\n        path: '/board/:boardId',\r\n        component: Board,\r\n    },\r\n    {\r\n        path: '/board',\r\n        component: BoardList\r\n    },\r\n    {\r\n        path: '/',\r\n        component: Home,\r\n    },\r\n]\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\AppHeader.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\LoginSignup.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Chat.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\UserDetails.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Board.jsx",["156"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\BoardList.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Home.jsx",["157","158","159","160","161","162","163"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskDetails.jsx",["164","165"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { boardService } from '../../services/boardService.js'\r\nimport { remove, add, loadBoard, update } from '../../store/actions/boardsAction.js';\r\nimport onClickOutside from \"react-onclickoutside\";\r\nimport { BsCardChecklist } from 'react-icons/bs'\r\nimport { GrTextAlignFull } from 'react-icons/gr'\r\nimport { utilService } from '../../services/generalService/utilService.js';\r\n\r\nclass _TaskDetails extends Component {\r\n    state = {\r\n        group: null,\r\n        task: null,\r\n        onFocus: false,\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { boardId, taskId, groupId } = this.props.match.params;\r\n        console.log(boardId)\r\n        await this.props.loadBoard(boardId);\r\n        const copyBoard = { ...this.props.board };\r\n        const group = boardService.getGroupById(copyBoard, groupId);\r\n        const task = boardService.getTaskById(group, taskId);\r\n        this.setState({ ...this.state, group, task })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            task: {\r\n                ...prevState.task,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n    handleClickOutside = evt => {\r\n        // ..handling code goes here...\r\n    };\r\n\r\n    updateTask = () => {\r\n        if (!this.state.task.title) return;\r\n        const copyBoard = { ...this.props.board };\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\r\n        const taskIdx = boardService.getTaskIdxById(this.state.group, this.state.task.id)\r\n        copyBoard.groups[groupIdx].tasks[taskIdx] = this.state.task\r\n        this.props.update(copyBoard)\r\n    }\r\n\r\n\r\n    render() {\r\n        const { task } = this.state;\r\n        if (!task) return <h1>Loading...</h1>\r\n        return (\r\n\r\n            <section className=\"task-details w-50 flex bg-modal pos-fixed c-stand fam-1 pad-1\">\r\n                <div className=\"info-task flex column w-70\">\r\n                    <form className=\"form-details flex column\" onSubmit={(ev) => {\r\n                        ev.preventDefault()\r\n                        this.updateTask()\r\n                    }}>\r\n                        <div className=\"details-header flex row\">\r\n                            <label htmlFor=\"title\" className=\"font-6\"><BsCardChecklist /></label>\r\n                            <input onBlur={this.updateTask} type=\"text\" value={task.title} name=\"title\" className=\"w-50 input-details\" onChange={this.handleChange} />\r\n                        </div>\r\n                        <h3>in list {this.state.group.title}</h3>\r\n                    </form>\r\n                    <section className=\"details-section\">\r\n                        <div className=\"details-section-header flex row\">\r\n                            <GrTextAlignFull /><label>Description</label>\r\n                        </div>\r\n                        <form onSubmit={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.updateTask()\r\n                        }}>\r\n\r\n                            <textarea placeholder=\"Add a description for this task...\" onBlur={this.updateTask} type=\"textArea\" value={task.description} name=\"description\" className=\"w-90 input-details\" onChange={this.handleChange} />\r\n                        </form>\r\n                    </section>\r\n                    {task.comments && <ul className=\"comments clean-list\">\r\n                        {task.comments.map(comment => {\r\n                            return <li className=\"full-comment flex row\">\r\n                                <img className=\"avatar\" src={comment.byMember.imgUrl} />\r\n                                <div className=\"comment-text flex column\">\r\n                                    <h3 className=\"commenter-name\">{comment.byMember.fullname}</h3>\r\n                                    {comment.txt}\r\n                                    <small>{utilService.timeAgo(comment.createdAt)}</small>\r\n                                </div>\r\n                            </li>\r\n                        })}\r\n                    </ul>}\r\n                </div>\r\n                <div className=\"menu-task flex w-30\">\r\n\r\n                </div>\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    remove,\r\n    add,\r\n    loadBoard,\r\n    update\r\n}\r\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(onClickOutside(_TaskDetails))","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\boardsAction.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\reviewActions.js",["166","167"],"import { reviewService } from '../../services/reviewService'\r\nimport { userService } from '../../services/userService'\r\nimport { socketService, SOCKET_EVENT_REVIEW_ADDED } from '../../services/generalService/socketService'\r\n\r\n\r\nexport function loadReviews() {\r\n  return async dispatch => {\r\n    try {\r\n      const reviews = await reviewService.query()\r\n      dispatch({ type: 'SET_REVIEWS', reviews })\r\n\r\n      // socketService.on(SOCKET_EVENT_REVIEW_ADDED, review =>{\r\n      //   dispatch({ type: 'ADD_REVIEW', review })\r\n      // })\r\n\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in loadReviews', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addReview(review) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedReview = await reviewService.add(review)\r\n      dispatch({ type: 'ADD_REVIEW', review: addedReview })\r\n\r\n      const score = await userService.increaseScore()\r\n      dispatch({ type: 'SET_SCORE', score })\r\n      \r\n    } catch (err) {\r\n      console.log('ReviewActions: err in addReview', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeReview(reviewId) {\r\n  return async dispatch => {\r\n    try {\r\n      await reviewService.remove(reviewId)\r\n      dispatch({ type: 'REMOVE_REVIEW', reviewId })\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in removeReview', err)\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\socketService.js",["168","169"],"import io from 'socket.io-client'\r\nimport {httpService} from './httpService'\r\n\r\nexport const SOCKET_EMIT_USER_WATCH = 'user-watch';\r\nexport const SOCKET_EVENT_USER_UPDATED = 'user-updated';\r\nexport const SOCKET_EVENT_REVIEW_ADDED = 'review-added';\r\n\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'production')? '' : '//localhost:3030'\r\n// export const socketService = createSocketService()\r\nexport const socketService = createDummySocketService()\r\n\r\nwindow.socketService = socketService\r\n\r\nvar socketIsReady = false;\r\n// socketService.setup()\r\n\r\n\r\nfunction createSocketService() {\r\n  var socket = null;\r\n  const socketService = {\r\n    async setup() {\r\n      if (socket) return\r\n      await httpService.get('setup-session')\r\n      socket = io(baseUrl, { reconnection: false})\r\n      socketIsReady = true;\r\n    },\r\n    async on(eventName, cb) {\r\n      if (!socket) await socketService.setup()\r\n      socket.on(eventName, cb)\r\n    },\r\n    async off(eventName, cb=null) {\r\n      if (!socket) await socketService.setup()\r\n      if (!cb) socket.removeAllListeners(eventName)\r\n      else socket.off(eventName, cb)\r\n    },\r\n    async emit(eventName, data) {\r\n      if (!socket) await socketService.setup()\r\n      socket.emit(eventName, data)\r\n    },\r\n    terminate() {\r\n      socket = null\r\n      socketIsReady = false\r\n    }\r\n  }\r\n  return socketService\r\n}\r\n\r\n// eslint-disable-next-line\r\nfunction createDummySocketService() {\r\n  var listenersMap = {}\r\n  const socketService = {\r\n    listenersMap,\r\n    setup() {\r\n      listenersMap = {}\r\n    },\r\n    terminate() {\r\n      this.setup()\r\n    },\r\n    on(eventName, cb) {\r\n      listenersMap[eventName] = [...(listenersMap[eventName]) || [], cb]\r\n    },\r\n    off(eventName, cb) {\r\n      if (!listenersMap[eventName]) return\r\n      if (!cb) delete listenersMap[eventName]\r\n      else listenersMap[eventName] = listenersMap[eventName].filter(l => l !== cb)\r\n    },\r\n    emit(eventName, data) {\r\n      if (!listenersMap[eventName]) return\r\n      listenersMap[eventName].forEach(listener => {\r\n        listener(data)\r\n      })\r\n    },\r\n    debugMsg() {\r\n      this.emit('chat addMsg', {from: 'Someone', txt: 'Aha it worked!'})\r\n    },\r\n  }\r\n  return socketService\r\n}\r\n\r\n\r\n// Basic Tests\r\nfunction cb(x) {console.log(x)}\r\nsocketService.on('baba', cb)\r\nsocketService.on('mama', cb)\r\nsocketService.on('lala', cb)\r\nsocketService.emit('baba', 'DATA')\r\n// socketService.off('baba', cb)\r\n\r\n\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\userService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\Upload.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskList.jsx",["170"],"import { TaskPreview } from '../board/TaskPreview'\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { Component } from 'react';\r\nimport { boardService } from '../../services/boardService.js'\r\nimport { utilService } from '../../services/generalService/utilService.js'\r\n\r\nconst EMPTY_TASK = { title: '' }\r\nconst EMPTY_GROUP = { title: '' }\r\nexport class TaskList extends Component {\r\n    state = {\r\n        group: EMPTY_GROUP,\r\n        task: EMPTY_TASK\r\n    }\r\n    componentDidMount() {\r\n        this.setState({ group: this.props.group })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            task: {\r\n                ...prevState.task,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n    updateGroup = () => {\r\n        if (!this.state.group.title) return;\r\n        const copyBoard = { ...this.props.board };\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\r\n        copyBoard.groups[groupIdx] = this.state.group\r\n        this.props.updateBoard(copyBoard)\r\n    }\r\n\r\n    handleChangeGroup = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            group: {\r\n                ...prevState.group,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n    onAddTask = () => {\r\n        if (!this.state.task.title) return;\r\n        const { group } = this.props\r\n        const copyBoard = { ...this.props.board };\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, group.id)\r\n        copyBoard.groups[groupIdx].tasks.push(utilService.formatNewTask(this.state.task))\r\n        this.props.updateBoard(copyBoard)\r\n        this.setState({ task: EMPTY_TASK })\r\n    }\r\n\r\n    render() {\r\n        const { board, group, updateBoard, index } = this.props\r\n\r\n        return/*  <div className=\"group-container\"> */(\r\n            <Draggable index={index} isDragDisabled={false} draggableId={group.id}>\r\n                {(provided, snapshot) => {\r\n                    return <li className=\"task-list\"\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        style={{\r\n                            backgroundColor: snapshot.isDraggingOver ? 'lightblue' : '#EBECF0'\r\n                        }}\r\n                    >\r\n                        <form className=\"mb-2\" onSubmit={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.updateGroup()\r\n\r\n                        }}>   <input className=\"group-title-preview preview-add-task\" onBlur={this.updateGroup} type=\"text\" value={this.state.group.title} name=\"title\" onChange={this.handleChangeGroup} /></form>\r\n\r\n                        <Droppable key={index} droppableId={group.id} type='task'>\r\n                            {(provided) => (\r\n                                <div ref={provided.innerRef} {...provided.droppableProps}>\r\n                                    {group.tasks.map((task, idx) => (\r\n                                        <TaskPreview key={task.id}\r\n                                            board={board}\r\n                                            index={idx}\r\n                                            groupId={group.id}\r\n                                            updateBoard={updateBoard}\r\n                                            task={task}\r\n                                        />\r\n                                    ))}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                        <form onSubmit={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.onAddTask()\r\n                            console.log(ev)\r\n                        }}>\r\n                            <input className=\"preview-add-task\" value={this.state.task.title} type=\"text\" placeholder=\"+ Add a task\" name=\"title\" onChange={this.handleChange} />\r\n                        </form>\r\n                    </li>\r\n                }}\r\n            </Draggable>)\r\n        /*    </div> */\r\n    }\r\n}","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\reviewService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\boardService.js",["171"],"import { utilService } from './generalService/utilService.js'\r\nimport { storageService } from './generalService/asyncStorageService.js'\r\n\r\nwindow.storageService = storageService;\r\n\r\nconst STORAGE_KEY = 'board'\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    update,\r\n    add,\r\n    getGroupById,\r\n    getTaskById,\r\n    getGroupIdxById,\r\n    addTask,\r\n    checklistPreview,\r\n    getTaskIdxById\r\n}\r\n\r\n\r\nfunction query() {\r\n    return storageService.query(STORAGE_KEY)\r\n}\r\n\r\nfunction getById(boardId) {\r\n    const board = storageService.get(STORAGE_KEY, boardId);\r\n    return board\r\n}\r\n\r\nfunction remove(boardId) {\r\n    return storageService.remove(STORAGE_KEY, boardId)\r\n}\r\n\r\nfunction add() {\r\n    const newBoard = _createBoard()\r\n    const savedBoard = storageService.post(STORAGE_KEY, newBoard)\r\n    return savedBoard\r\n}\r\n\r\nfunction update(board) {\r\n    console.log('service')\r\n    return storageService.put(STORAGE_KEY, board)\r\n\r\n}\r\n\r\n//task crud\r\nfunction getGroupById(board, groupId) {\r\n    return board.groups.find(group => group.id === groupId);\r\n}\r\n\r\nfunction getGroupIdxById(board, groupId) {\r\n    return board.groups.findIndex(group => group.id === groupId);\r\n}\r\n\r\nfunction getTaskIdxById(group, taskId) {\r\n    return group.tasks.findIndex(task => task.id === taskId);\r\n}\r\n\r\nfunction getTaskById(group, taskId) {\r\n    return group.tasks.find(task => task.id === taskId)\r\n}\r\n\r\nfunction addTask(board, group, title) {\r\n    const newTask = {\r\n        id: utilService.makeId(),\r\n        title: title\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction _createBoard(title = 'New Board', loggedInUser = { fullname: 'some user', _id: 'u101', imgUrl: 'http://some-img.jpg' }) {\r\n    const board = {\r\n        \"_id\": utilService.makeId(),\r\n        title,\r\n        \"createdAt\": Date.now(),\r\n        \"createdBy\": {\r\n            \"_id\": loggedInUser._id,\r\n            \"fullname\": loggedInUser.fullname,\r\n            \"imgUrl\": loggedInUser.imgUrl\r\n        },\r\n        \"style\": {},\r\n        \"labels\": [\r\n            {\r\n                \"id\": \"l101\",\r\n                \"title\": \"Done\",\r\n                \"color\": \"#61bd4f\"\r\n            },\r\n            {\r\n                \"id\": \"l101\",\r\n                \"title\": \"Todo\",\r\n                \"color\": \"green\"\r\n            }\r\n        ],\r\n        \"members\": [\r\n            {\r\n                \"_id\": loggedInUser._id,\r\n                \"fullname\": loggedInUser.fullname,\r\n                \"imgUrl\": loggedInUser.imgUrl\r\n            }\r\n        ],\r\n        \"groups\": [\r\n            {\r\n                \"id\": utilService.makeId(),\r\n                \"title\": \"Group 1\",\r\n                \"tasks\": [\r\n                    {\r\n                        \"id\": \"c101\",\r\n                        \"title\": \"Replace logo\"\r\n                    },\r\n                    {\r\n                        \"id\": \"c102\",\r\n                        \"title\": \"Add Samples\"\r\n                    }\r\n                ],\r\n                \"checklists\": [],\r\n                \"style\": {}\r\n            },\r\n        ],\r\n        \"activities\": []\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\nfunction checklistPreview(task){\r\n    const checklists = task.checklists\r\n    let allTodos = 0;\r\n    let doneTodos = 0;\r\n    checklists.forEach(checkList => {\r\n        allTodos += checkList.todos.length;\r\n        checkList.todos.forEach(todo => {\r\n            if(todo.isDone) doneTodos++\r\n        })\r\n    });\r\n\r\n    const str = `${doneTodos}/${allTodos}`\r\n    return str\r\n} ","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\httpService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\cloudinaryService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\utilService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\asyncStorageService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskPreview.jsx",["172","173","174","175","176","177","178","179"],"import { Link } from 'react-router-dom'\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { Provider } from 'react-redux';\r\nimport { boardService } from '../../services/boardService.js'\r\nimport { BsCheckBox } from 'react-icons/bs'\r\nimport { FaRegCommentDots } from 'react-icons/fa'\r\nimport { AiOutlineClockCircle } from 'react-icons/ai'\r\nimport { GrTextAlignFull } from 'react-icons/gr'\r\nimport { utilService } from '../../services/generalService/utilService'\r\nimport React, { Component } from 'react'\r\n\r\n\r\n\r\n// export function TaskPreview({ board, index, task, updateBoard, groupId }) {\r\nexport class TaskPreview extends Component {\r\n    state = {\r\n        isLabelOpen: false\r\n    }\r\n\r\n    toggleLabels = () => {\r\n        this.setState({ isLabelOpen: !this.state.isLabelOpen })\r\n    }\r\n\r\n    getStyle = (style, snapshot) => {\r\n        if (!snapshot.isDropAnimating) {\r\n            return style;\r\n        }\r\n        const { moveTo, curve, duration } = snapshot.dropAnimation;\r\n        // move to the right spot\r\n        const translate = `translate(${moveTo.x}px, ${moveTo.y}px)`;\r\n        // add a bit of turn for fun\r\n        const rotate = 'rotate(0.01turn)';\r\n\r\n        // patching the existing style\r\n        return {\r\n            ...style,\r\n            transform: `${translate} ${rotate}`,\r\n            // slowing down the drop because we can\r\n            transition: `all ${curve} 0.2s`,\r\n        };\r\n    }\r\n\r\n    onRemoveTask = (taskId) => {\r\n        const { board, index, task, updateBoard, groupId } = this.props\r\n        const group = board.groups[boardService.getGroupIdxById(board, groupId)]\r\n        board.groups[boardService.getGroupIdxById(board, groupId)].tasks.splice(boardService.getTaskIdxById(group, taskId), 1)\r\n        updateBoard({ ...board })\r\n    }\r\n    render() {\r\n        const { board, index, task, updateBoard, groupId } = this.props\r\n        return <Draggable\r\n            draggableId={task.id}\r\n            index={index}\r\n            isDragDisabled={false}\r\n        >\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                    isDragging={snapshot.isDragging && !snapshot.isDropAnimating}\r\n                    style={this.getStyle(provided.draggableProps.style, snapshot)}\r\n                >\r\n\r\n                    <div className=\"task-preview font-s pad-20 flex column\">\r\n                        {/* <Link to={`/board/${board._id}/${task.id}`}> */}\r\n                        <div className=\"flex row space-between center w-90\">\r\n                            <div className=\"label-task-prev\">\r\n                                {utilService.isFalse(task.labelIds) &&\r\n                                    <div className=\"labels-container wrap flex\" onClick={(ev) => {\r\n                                        ev.stopPropagation();\r\n                                    }}>\r\n                                        {task.labelIds.map(labelId => {\r\n\r\n                                            const label = board.labels.find(label => {\r\n                                                return label.id === labelId;\r\n                                            })\r\n                                            console.log(label)\r\n\r\n                                            if (label)\r\n                                                return <div className={`preview-label font-5 ${this.state.isLabelOpen && \"label-open\"}`} onClick={this.toggleLabels} style={{ backgroundColor: label.color }}>\r\n                                                    {this.state.isLabelOpen && label.title}\r\n                                                </div>\r\n                                        })}</div>}\r\n                            </div>\r\n                            <span className=\"cur-pointer\" onClick={() => { this.onRemoveTask(task.id) }}>X</span>\r\n                        </div>\r\n\r\n                        <Link to={`/board/${board._id}/${groupId}/${task.id}`}>\r\n\r\n\r\n                            <h1 className=\"c-stand pad-07 fam-1\">{task.title}</h1>\r\n                            <div className=\"flex row\">\r\n                                {utilService.isFalse(task.comments) && <small className=\"flex center\"><FaRegCommentDots /></small>}\r\n                                {utilService.isFalse(task.checklists) && <div className=\"flex row center\">\r\n                                    <BsCheckBox />\r\n                                    <small>{boardService.checklistPreview(task)}</small>\r\n                                </div>}\r\n                                {task.dueDate && <div className=\"flex row center\">\r\n                                    <AiOutlineClockCircle />\r\n                                    <small>{utilService.timeAgo(task.dueDate)}</small>\r\n                                </div>}\r\n                                {task.description && <small className=\"flex center\"><GrTextAlignFull /></small>}\r\n                            </div>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n        </Draggable>\r\n    }\r\n}\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\data\\board.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\ModalWrapper.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\Overlay.jsx",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":21},{"ruleId":"184","severity":1,"message":"188","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":14},{"ruleId":"184","severity":1,"message":"189","line":4,"column":10,"nodeType":"186","messageId":"187","endLine":4,"endColumn":21},{"ruleId":"184","severity":1,"message":"190","line":7,"column":10,"nodeType":"186","messageId":"187","endLine":7,"endColumn":21},{"ruleId":"184","severity":1,"message":"191","line":5,"column":27,"nodeType":"186","messageId":"187","endLine":5,"endColumn":36},{"ruleId":"184","severity":1,"message":"192","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":17},{"ruleId":"184","severity":1,"message":"193","line":4,"column":10,"nodeType":"186","messageId":"187","endLine":4,"endColumn":21},{"ruleId":"184","severity":1,"message":"194","line":4,"column":23,"nodeType":"186","messageId":"187","endLine":4,"endColumn":32},{"ruleId":"184","severity":1,"message":"195","line":4,"column":34,"nodeType":"186","messageId":"187","endLine":4,"endColumn":46},{"ruleId":"184","severity":1,"message":"196","line":5,"column":10,"nodeType":"186","messageId":"187","endLine":5,"endColumn":19},{"ruleId":"184","severity":1,"message":"197","line":6,"column":10,"nodeType":"186","messageId":"187","endLine":6,"endColumn":14},{"ruleId":"198","severity":1,"message":"199","line":36,"column":11,"nodeType":"200","endLine":36,"endColumn":57},{"ruleId":"184","severity":1,"message":"197","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":14},{"ruleId":"198","severity":1,"message":"199","line":86,"column":33,"nodeType":"200","endLine":86,"endColumn":89},{"ruleId":"184","severity":1,"message":"201","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":23},{"ruleId":"184","severity":1,"message":"202","line":3,"column":25,"nodeType":"186","messageId":"187","endLine":3,"endColumn":50},{"ruleId":"184","severity":1,"message":"203","line":19,"column":10,"nodeType":"186","messageId":"187","endLine":19,"endColumn":29},{"ruleId":"184","severity":1,"message":"204","line":43,"column":7,"nodeType":"186","messageId":"187","endLine":43,"endColumn":20},{"ruleId":"184","severity":1,"message":"205","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":25},{"ruleId":"184","severity":1,"message":"206","line":66,"column":11,"nodeType":"186","messageId":"187","endLine":66,"endColumn":18},{"ruleId":"184","severity":1,"message":"205","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":25},{"ruleId":"184","severity":1,"message":"207","line":2,"column":38,"nodeType":"186","messageId":"187","endLine":2,"endColumn":47},{"ruleId":"184","severity":1,"message":"208","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":18},{"ruleId":"184","severity":1,"message":"209","line":28,"column":32,"nodeType":"186","messageId":"187","endLine":28,"endColumn":40},{"ruleId":"184","severity":1,"message":"210","line":44,"column":24,"nodeType":"186","messageId":"187","endLine":44,"endColumn":29},{"ruleId":"184","severity":1,"message":"211","line":44,"column":31,"nodeType":"186","messageId":"187","endLine":44,"endColumn":35},{"ruleId":"184","severity":1,"message":"212","line":50,"column":37,"nodeType":"186","messageId":"187","endLine":50,"endColumn":48},{"ruleId":"213","severity":1,"message":"214","line":72,"column":60,"nodeType":"215","messageId":"216","endLine":72,"endColumn":62},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"no-unused-vars","'LoginSignup' is defined but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'UserDetails' is defined but never used.","'TaskDetails' is defined but never used.","'Draggable' is defined but never used.","'connect' is defined but never used.","'loadReviews' is defined but never used.","'addReview' is defined but never used.","'removeReview' is defined but never used.","'loadUsers' is defined but never used.","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'socketService' is defined but never used.","'SOCKET_EVENT_REVIEW_ADDED' is defined but never used.","'createSocketService' is defined but never used.","'socketIsReady' is assigned a value but never used.","'DragDropContext' is defined but never used.","'newTask' is assigned a value but never used.","'Droppable' is defined but never used.","'Provider' is defined but never used.","'duration' is assigned a value but never used.","'index' is assigned a value but never used.","'task' is assigned a value but never used.","'updateBoard' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]