[{"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\index.js":"1","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\store.js":"4","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\App.jsx":"5","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\userReducer.js":"6","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\boardReducer.js":"7","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\systemReducer.js":"8","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\reviewReducer.js":"9","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\routes.js":"10","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\AppHeader.jsx":"11","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\UserDetails.jsx":"12","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Board.jsx":"13","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Home.jsx":"14","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\BoardList.jsx":"15","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Chat.jsx":"16","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\TaskDetails.jsx":"17","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\boardService.js":"18","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\reviewActions.js":"19","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\ModalWrapper.jsx":"20","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\boardsAction.js":"21","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\userActions.js":"22","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\utilService.js":"23","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\socketService.js":"24","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\UserPreview.jsx":"25","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\userService.js":"26","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\asyncStorageService.js":"27","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\httpService.js":"28","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\Upload.jsx":"29","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskList.jsx":"30","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\MiniBoard.jsx":"31","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardNavbar.jsx":"32","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckList.jsx":"33","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\reviewService.js":"34","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\Overlay.jsx":"35","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\data\\board.js":"36","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\cloudinaryService.js":"37","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskPreview.jsx":"38","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\MembersBoard.jsx":"39","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckListStatus.jsx":"40","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\ActionList.jsx":"41","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\LabelModal.jsx":"42","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MembersModal.jsx":"43","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\ModalAction.jsx":"44","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\OverlayAction.jsx":"45","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\systemAction.js":"46","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\LabelTask.jsx":"47","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Login.jsx":"48","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardMembersModal.jsx":"49","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\DueDateModal.jsx":"50","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MoveModal.jsx":"51","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\CopyModal.jsx":"52","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\GroupModal.jsx":"53"},{"size":935,"mtime":1622098926959,"results":"54","hashOfConfig":"55"},{"size":377,"mtime":1622098926965,"results":"56","hashOfConfig":"55"},{"size":5201,"mtime":1622098926966,"results":"57","hashOfConfig":"55"},{"size":752,"mtime":1622112896615,"results":"58","hashOfConfig":"55"},{"size":535,"mtime":1622209089530,"results":"59","hashOfConfig":"55"},{"size":868,"mtime":1622452098317,"results":"60","hashOfConfig":"55"},{"size":688,"mtime":1622215143805,"results":"61","hashOfConfig":"55"},{"size":426,"mtime":1622658771162,"results":"62","hashOfConfig":"55"},{"size":669,"mtime":1622098926981,"results":"63","hashOfConfig":"55"},{"size":634,"mtime":1622628379726,"results":"64","hashOfConfig":"55"},{"size":3044,"mtime":1622890495896,"results":"65","hashOfConfig":"55"},{"size":1405,"mtime":1622627111688,"results":"66","hashOfConfig":"55"},{"size":8538,"mtime":1622889548264,"results":"67","hashOfConfig":"55"},{"size":3018,"mtime":1622885548819,"results":"68","hashOfConfig":"55"},{"size":5077,"mtime":1622889374296,"results":"69","hashOfConfig":"55"},{"size":3395,"mtime":1622115436998,"results":"70","hashOfConfig":"55"},{"size":18304,"mtime":1622890495897,"results":"71","hashOfConfig":"55"},{"size":3211,"mtime":1622672132024,"results":"72","hashOfConfig":"55"},{"size":1321,"mtime":1622115440359,"results":"73","hashOfConfig":"55"},{"size":165,"mtime":1622294072443,"results":"74","hashOfConfig":"55"},{"size":2193,"mtime":1622828106030,"results":"75","hashOfConfig":"55"},{"size":1966,"mtime":1622631383176,"results":"76","hashOfConfig":"55"},{"size":2864,"mtime":1622795681824,"results":"77","hashOfConfig":"55"},{"size":2414,"mtime":1622479249276,"results":"78","hashOfConfig":"55"},{"size":533,"mtime":1622636238075,"results":"79","hashOfConfig":"55"},{"size":2097,"mtime":1622479249277,"results":"80","hashOfConfig":"55"},{"size":2404,"mtime":1622283961369,"results":"81","hashOfConfig":"55"},{"size":1136,"mtime":1622115365941,"results":"82","hashOfConfig":"55"},{"size":1709,"mtime":1622811036686,"results":"83","hashOfConfig":"55"},{"size":6617,"mtime":1622822164785,"results":"84","hashOfConfig":"55"},{"size":541,"mtime":1622829857073,"results":"85","hashOfConfig":"55"},{"size":4389,"mtime":1622829205715,"results":"86","hashOfConfig":"55"},{"size":5653,"mtime":1622811036692,"results":"87","hashOfConfig":"55"},{"size":1087,"mtime":1622115441879,"results":"88","hashOfConfig":"55"},{"size":117,"mtime":1622707504525,"results":"89","hashOfConfig":"55"},{"size":305529,"mtime":1622471688098,"results":"90","hashOfConfig":"55"},{"size":658,"mtime":1622730288568,"results":"91","hashOfConfig":"55"},{"size":7737,"mtime":1622822164787,"results":"92","hashOfConfig":"55"},{"size":847,"mtime":1622822164782,"results":"93","hashOfConfig":"55"},{"size":662,"mtime":1622730288556,"results":"94","hashOfConfig":"55"},{"size":4702,"mtime":1622886740347,"results":"95","hashOfConfig":"55"},{"size":1719,"mtime":1622811069496,"results":"96","hashOfConfig":"55"},{"size":2305,"mtime":1622724409468,"results":"97","hashOfConfig":"55"},{"size":220,"mtime":1622559991731,"results":"98","hashOfConfig":"55"},{"size":129,"mtime":1622707504524,"results":"99","hashOfConfig":"55"},{"size":756,"mtime":1622658771160,"results":"100","hashOfConfig":"55"},{"size":4493,"mtime":1622811036700,"results":"101","hashOfConfig":"55"},{"size":5488,"mtime":1622821897159,"results":"102","hashOfConfig":"55"},{"size":2261,"mtime":1622724409454,"results":"103","hashOfConfig":"55"},{"size":1668,"mtime":1622710501026,"results":"104","hashOfConfig":"55"},{"size":3169,"mtime":1622794813965,"results":"105","hashOfConfig":"55"},{"size":2973,"mtime":1622707504516,"results":"106","hashOfConfig":"55"},{"size":2573,"mtime":1622794813991,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1prlnqd",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"110"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"110"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"110"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"110"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"110"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"110"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"110"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"110"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"110"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"110"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"110"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"110"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"110"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"110"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"110"},"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\index.js",[],["234","235"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\store.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\App.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\userReducer.js",["236"],"let localLoggedinUser = null\r\nif (sessionStorage.loggedinUser) localLoggedinUser = JSON.parse(sessionStorage.loggedinUser)\r\nconst defUser = {\r\n  \"_id\": \"u101\",\r\n  \"fullname\": \"Abi Abambi\",\r\n  \"username\": \"abi@ababmi.com\",\r\n  \"password\": \"aBambi123\",\r\n  \"imgUrl\": \"http://some-img.jpg\",\r\n  \"mentions\": [{\r\n    \"id\": \"m101\",\r\n    \"boardId\": \"m101\",\r\n    \"taskId\": \"t101\"\r\n  }]\r\n}\r\nconst initialState = {\r\n  loggedInUser: defUser,\r\n  users: []\r\n}\r\n\r\nexport function userReducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return { ...state, loggedInUser: action.user }\r\n    case 'REMOVE_USER':\r\n      return {\r\n        ...state,\r\n        users: state.users.filter(user => user._id !== action.userId)\r\n      }\r\n    case 'SET_USERS':\r\n      return { ...state, users: action.users }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\boardReducer.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\systemReducer.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\reducers\\reviewReducer.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\routes.js",["237"],"import { Home } from './pages/Home'\r\nimport { Chat } from './pages/Chat'\r\nimport { UserDetails } from './pages/UserDetails'\r\nimport { BoardList } from './pages/BoardList'\r\nimport { Board } from './pages/Board'\r\nimport { Login } from './pages/Login'\r\n\r\nexport const routes = [\r\n    {\r\n        path: '/user/:userId',\r\n        component: UserDetails,\r\n    },\r\n    {\r\n        path: '/board/:boardId',\r\n        component: Board,\r\n    },\r\n    {\r\n        path: '/login',\r\n        component: Login,\r\n    },\r\n    {\r\n        path: '/board',\r\n        component: BoardList\r\n    },\r\n    {\r\n        path: '/',\r\n        component: Home,\r\n    },\r\n]\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\AppHeader.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\UserDetails.jsx",["238","239","240"],"import React, { Component } from 'react'\r\nimport { Upload } from '../cmps/Upload'\r\nimport ProfileImg from '../assets/img/profilePic.jpg'\r\nimport { userService } from '../services/userService.js'\r\n\r\nexport class UserDetails extends Component {\r\n  state = {\r\n    user: null\r\n  }\r\n  async componentDidMount() {\r\n    const user = await userService.getById(this.props.match.params.userId)\r\n    // const user = {\r\n    //   _id: 'a123',\r\n    //   username: 'NadavMgr',\r\n    //   fullame: 'Nadav Magier',\r\n    //   email: 'nadav1410@gmail.com',\r\n    //   imgUrl: 'https://res.cloudinary.com/dorshaul/image/upload/v1617004425/ytav_twnglu.jpg',\r\n    //   createdAt: '2021-03-29T07:54:21.000Z'\r\n    // }\r\n    this.setState({ user })\r\n  }\r\n\r\n  render() {\r\n    if(!this.state.user) return <div>loading..</div>\r\n    const { _id, username, fullname, email, imgUrl } = this.state.user\r\n    const url = (imgUrl) ? imgUrl : ProfileImg\r\n    return (\r\n      <section className=\"user-details-container\">\r\n        <div className=\"user-details flex\">\r\n          <img src={url} />\r\n          <div className=\"txt-user-details flex column fam-1\">\r\n            <span className=\"user-fullname\">{fullname}</span>\r\n            <span className=\"user-username\">@{username}</span>\r\n            <span className=\"user-email\">{email}</span>\r\n          </div>\r\n        </div>\r\n        {/* <Upload /> */}\r\n\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Board.jsx",["241","242"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Home.jsx",["243","244","245","246","247","248","249","250","251"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\BoardList.jsx",["252","253","254","255","256","257","258","259","260","261","262","263"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Chat.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\TaskDetails.jsx",["264","265","266","267","268"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { boardService } from '../../../services/boardService.js'\r\nimport { remove, add, loadBoard, update } from '../../../store/actions/boardsAction.js';\r\nimport onClickOutside from \"react-onclickoutside\";\r\nimport { BsCardChecklist } from 'react-icons/bs'\r\nimport { GrTextAlignFull } from 'react-icons/gr'\r\nimport { FaRegCommentDots } from 'react-icons/fa'\r\nimport { utilService } from '../../../services/generalService/utilService.js';\r\nimport { CheckList } from './CheckList';\r\nimport { ActionList } from './action/ActionList';\r\nimport { UserPreview } from '../UserPreview.jsx';\r\nimport { RiDeleteBin6Line } from 'react-icons/ri'\r\n\r\n// import {TaskTitle} from '../taskDetails/TaskTitle';\r\n\r\n\r\n\r\nclass _TaskDetails extends Component {\r\n    state = {\r\n        group: null,\r\n        task: null,\r\n        onFocus: false,\r\n        overlay: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { boardId, taskId, groupId } = this.props.match.params;\r\n        const board = { ...this.props.board };\r\n        const group = boardService.getGroupById(board, groupId);\r\n        const task = boardService.getTaskById(group, taskId);\r\n        this.addClassName();\r\n        this.setState({ ...this.state, group, task })\r\n    }\r\n\r\n\r\n\r\n    //Destroyed the check list! don't use it! -tamir&naav- <3\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     if (this.props !== prevProps) {\r\n    //         console.log('props change');\r\n    //     }\r\n    // }\r\n\r\n\r\n    addClassName() {\r\n        document.querySelector('.board').classList.add('max-screen');\r\n    };\r\n\r\n    addActivity = (board, txt = '') => {\r\n        const { loggedInUser } = this.props\r\n        const task = { ...this.state.task }\r\n        const activity = `${loggedInUser.fullname}${txt}`\r\n        const copyboard = JSON.parse(JSON.stringify(board))\r\n        // board.activities = []\r\n        copyboard.activities.unshift({ id: utilService.makeId(), txt: activity, createdAt: Date.now(), byMember: loggedInUser, task })\r\n        console.log('board after', copyboard.activities)\r\n        console.log('copy board', copyboard)\r\n        return copyboard;\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            task: {\r\n                ...prevState.task,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n    handleClickOutside = evt => {\r\n        // ..handling code goes here...\r\n    };\r\n\r\n    updateTask = (txt) => {\r\n        console.log('here')\r\n        if (!this.state.task.title) return;\r\n        let copyBoard = { ...this.props.board };\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\r\n        const taskIdx = boardService.getTaskIdxById(this.state.group, this.state.task.id)\r\n        copyBoard.groups[groupIdx].tasks[taskIdx] = this.state.task\r\n        copyBoard = this.addActivity(copyBoard, txt)\r\n        this.props.update(copyBoard)\r\n    }\r\n    \r\n    updateTaskLabel= (updateTask) => {\r\n        console.log('prevLabel: ',this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\r\n        const task  = this.state.task;\r\n        task.labelIds = updateTask.labelIds;\r\n        this.updateTask()\r\n        console.log('Label: ',this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\r\n    }\r\n\r\n    onSaveDueDate = (date) => {\r\n        const { task } = this.state;\r\n        task.dueDate = date\r\n        this.updateTask()\r\n    }\r\n\r\n    updateTaskState = (task) => {\r\n        this.setState({ task })\r\n    }\r\n\r\n    onAddCheckList = (task) => {\r\n        if (!task.checklists) {\r\n            task.checklists = [];\r\n        }\r\n        task.checklists.push({ id: utilService.makeId(), title: 'Checklist', todos: [] })\r\n        this.setState({ task }, () => {\r\n            this.updateTask('Added Checklist')\r\n        })\r\n    }\r\n\r\n    onRemoveCheckList = (checklistIdx) => {\r\n        const { task } = { ...this.state }\r\n        // const task = JSON.parse(JSON.stringify(this.state.task))\r\n        task.checklists.splice(checklistIdx, 1)\r\n        this.setState({ task }, this.updateTask)\r\n    }\r\n\r\n    onUpdateChecklist = (checklist) => {\r\n        this.state.task.checklists.map(cl => cl.id === checklist.id ? checklist : cl)\r\n        this.setState({ task: { ...this.state.task } }, this.updateTask)\r\n    }\r\n\r\n    onDeleteTask = () => {\r\n        const { boardId } = this.props.match.params;\r\n        const copyboard = this.props.board\r\n        const { task, group } = this.state\r\n        group.tasks.splice(boardService.getTaskIdxById(group, task.id), 1)\r\n        copyboard.groups[boardService.getGroupIdxById(copyboard, group.id)] = group\r\n        this.props.update(copyboard)\r\n        this.props.history.push(`/board/${boardId}`)\r\n    }\r\n\r\n    onAddMemberToTask = (addedMember) => {\r\n        const { task } = this.state;\r\n        const memberIdx = task.members.findIndex(member => member._id === addedMember._id)\r\n        if (memberIdx !== -1) {\r\n            task.members.splice(memberIdx, 1)\r\n        }\r\n        else task.members.push(addedMember)\r\n        this.updateTask()\r\n    }\r\n\r\n\r\n    onSaveDueDate = (date) => {\r\n        const { task } = this.state;\r\n        task.dueDate = date\r\n        \r\n        this.updateTask()\r\n    }\r\n\r\n    isMemberChecked = (memberCheck) => {\r\n        const { task } = this.state;\r\n        const memberIdx = task.members.findIndex(member => member._id === memberCheck._id)\r\n        if (memberIdx !== -1) {\r\n            return 'checked'\r\n        }\r\n        else return ''\r\n    }\r\n\r\n    isDueDateDone = (val) => {\r\n        const { task } = this.state;\r\n        task.isDone = val\r\n        this.updateTask()\r\n    }\r\n\r\n    toggleModal = (className) => {\r\n        const modals = document.querySelectorAll('.action-modal');\r\n        const currModal = document.querySelector(`.${className}`);\r\n        if (modals) {\r\n            modals.forEach(\r\n                el => el.classList.add('d-none'));\r\n        }\r\n        if (currModal) {\r\n            currModal.classList.remove('d-none');\r\n        }\r\n    }\r\n    openOverlay = () => {\r\n        this.setState({ ...this.state, overlay: 'details-overlay' });\r\n    }\r\n\r\n    addImgToTask = (imgUrl) => {\r\n        const { task } = this.state;\r\n        task.imgUrl = imgUrl\r\n        this.updateTask()\r\n    }\r\n\r\n\r\n    closeOverlay = (ev) => {\r\n        if (!ev.target.classList.contains('btn-action') && !ev.target.classList.contains('btn-act')) {\r\n            if (ev.target.offsetParent !== undefined && ev.target.offsetParent.classList[0] !== undefined && ev.target.offsetParent.classList[0] === 'task-details') {\r\n                const modals = document.querySelectorAll('.action-modal');\r\n                if (modals) {\r\n                    modals.forEach(\r\n                        el => el.classList.add('d-none'));\r\n                }\r\n                this.setState({ ...this.state, overlay: '' });\r\n\r\n            }\r\n        }\r\n        // this.setState({ ...this.state, overlay: '' });\r\n        // if(ev.target.classList.contain('btn-action'))\r\n    }\r\n\r\n    onAddLabelTask = (labelId) => {\r\n        const task = this.state;\r\n        if (!task.labels) {\r\n            task.labels = [];\r\n        }\r\n        task.labels.push(labelId);\r\n    }\r\n\r\n    onSendComment = (txt) => {\r\n        const { loggedInUser } = this.props\r\n        const { task } = this.state;\r\n        task.comments.unshift({ id: utilService.makeId(), txt, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.updateTask()\r\n    }\r\n\r\n    onRemoveComment = (commentIdx) => {\r\n        const { task } = this.state;\r\n        task.comments.splice(commentIdx, 1)\r\n        this.updateTask()\r\n    }\r\n\r\n    moveTask = (moveTo) => {\r\n        if (moveTo !== this.state.group.id) {\r\n            const copyBoard = { ...this.props.board }\r\n            copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.state.group.id)].tasks.splice(\r\n                boardService.getTaskIdxById(this.state.group, this.state.task.id), 1)\r\n            copyBoard.groups[moveTo].tasks.push(this.state.task)\r\n            this.setState({ group: copyBoard.groups[moveTo] })\r\n            this.props.update(copyBoard)\r\n        }\r\n        // this.props.history.push(`/board/${copyBoard._id}`)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { task } = this.state;\r\n        const { board, loggedInUser } = this.props\r\n        if (!task) return <h1>Loading...</h1>\r\n        return (\r\n            <section className={`task-details w-50 flex bg-modal c-stand fam-1 pad-1 ${this.state.overlay}`}\r\n                onClick={(ev) => { this.closeOverlay(ev) }}>\r\n                <div className=\"info-task flex column w-79 h-100 content-start\">\r\n                    {/* Title */}\r\n                    <form className=\"task-title flex column content-start pb-2 w-100\" onSubmit={(ev) => {\r\n                        ev.preventDefault()\r\n                        this.updateTask()\r\n                    }}>\r\n                        <div className=\"task-title flex center h-33\">\r\n                            <label\r\n                                htmlFor=\"title\"\r\n                                className=\"font-3 flex center w-100\">\r\n                                <BsCardChecklist />\r\n                                <input\r\n                                    onBlur={this.updateTask}\r\n                                    type=\"text\"\r\n                                    value={task.title}\r\n                                    name=\"title\"\r\n                                    className=\"input-details title-task-input\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <h3 className=\"task-list-title fam-1 font-2 left-self h-20 center\">in list{' '}\r\n                            <span className=\"t-decor\">{this.state.group.title}</span>\r\n                        </h3>\r\n                    </form>\r\n\r\n                    <section className=\"info-task flex wrap gap-1 center mb-1\">\r\n                        <div className=\"task-members\">\r\n                            {task.members.length > 0 && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">MEMBERS</h3>}\r\n                            <ul className=\"flex center gap-xs\">\r\n                                {task.members.map(member => {\r\n                                    return <UserPreview key={member._id} user={member} />\r\n                                })}\r\n                                {task.members.length > 0 &&\r\n                                    <span onClick={() => { this.toggleModal('members-wrap-modal'); this.openOverlay() }} className=\"btn-act  user-preview flex center content-center font-m bg-btn cur-pointer \">+</span>}\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"task-labels flex column center wrap\">\r\n                            {(task.labelIds && task.labelIds.length > 0) && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">LABELS</h3>}\r\n                            <ul className=\"flex center wrap\">\r\n                                {task.labelIds && task.labelIds.map(labelId => {\r\n                                    const label = board.labels.find(label => {\r\n                                        return label.id === labelId;\r\n                                    })\r\n                                    if (label) {\r\n                                        return (\r\n                                            <div\r\n                                                key={label.id}\r\n                                                className={`details-label bold flex center pad-xs mb-03`} onClick={() => { this.toggleModal('label-wrap-modal') }} style={{ backgroundColor: label.color }}\r\n                                            >\r\n                                                {label.title}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                                {task.labelIds && task.labelIds.length > 0 && <span onClick={() => { this.toggleModal('label-wrap-modal'); this.openOverlay(); }} className=\"details-label bold flex center pad-xs mb-03 bg-btn btn-act cur-pointer\">+</span>}\r\n                            </ul>\r\n                        </div>\r\n                        {task.dueDate && <div className=\"task-duedate flex center column\">\r\n                            <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">DUE DATE</h3>\r\n                            <div className=\"flex\">\r\n                                <input onChange={(ev) => { this.isDueDateDone(ev.target.checked) }} checked={task.isDone} type=\"checkbox\" />\r\n                                <p>{Intl.DateTimeFormat('IL-il').format(task.dueDate)}</p>\r\n                                {task.isDone && <div className=\"complete-duedate\">complete</div>}\r\n                            </div>\r\n                        </div>}\r\n                    </section>\r\n\r\n                    <section className=\"desc-section\">\r\n                        <div className=\"desc-header flex row mb-1\">\r\n                            <GrTextAlignFull /><label>Description</label>\r\n                        </div>\r\n                        <form onSubmit={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.updateTask()\r\n                        }}>\r\n\r\n                            <textarea placeholder=\"Add a description for this task...\" onBlur={this.updateTask} type=\"textArea\" value={task.description} name=\"description\" className=\"input-details w-90 margin-content fam-1\" onChange={this.handleChange} />\r\n                        </form>\r\n                    </section>\r\n                    {task.imgUrl && <img className=\"details-img\" src={task.imgUrl} />}\r\n                    {utilService.isFalse(task.checklists) && <ul className=\"todos clean-list mb-3 \">\r\n                        {task.checklists.map((checklist, idx) => {\r\n                            return <CheckList\r\n                                key={checklist.id}\r\n                                onRemoveCheckList={this.onRemoveCheckList}\r\n                                updateChecklist={this.onUpdateChecklist}\r\n                                idx={idx}\r\n                                checklists={task.checklists}\r\n                                handleChange={this.handleChange}\r\n                                updateTask={this.updateTask}\r\n                                checklist={checklist}\r\n                                updateTaskState={this.updateTaskState}\r\n                                task={task}\r\n                            />\r\n                        })}\r\n                    </ul>}\r\n\r\n                    <section className=\"comment-section\">\r\n                        <div className=\"desc-header flex row mb-1\">\r\n                            <FaRegCommentDots /><label>Comments</label>\r\n                        </div>\r\n                        <div className=\"new-comment flex center content-gap\">\r\n                            <UserPreview user={loggedInUser} />\r\n                            <form onSubmit={(ev) => {\r\n                                ev.preventDefault()\r\n                                this.onSendComment(ev.target[0].value)\r\n                            }}>\r\n                                <input className=\"comment-input\" placeholder=\"Write a comment...\" name=\"txt\">\r\n                                </input>\r\n                                <button className=\"btn-send-comment\">Send</button>\r\n                            </form>\r\n                        </div>\r\n\r\n                        {task.comments && <ul className=\"comments clean-list\">\r\n                            {task.comments.map((comment, idx) => {\r\n                                return <li className=\"full-comment flex column\">\r\n                                    <div className=\"flex space-between\">\r\n                                        <div className=\"content-gap flex center\">\r\n                                            <UserPreview user={comment.byMember} />\r\n                                            <div className=\"commenter-name\">{comment.byMember.fullname}</div>\r\n                                            <small>{utilService.timeAgo(comment.createdAt)}</small>\r\n                                        </div>\r\n                                        <div className='btn-del-comment' onClick={() => { this.onRemoveComment(idx) }}><RiDeleteBin6Line /></div>\r\n                                    </div>\r\n                                    <div className=\"comment-gap\">\r\n                                        <p className=\"comment-txt \">{comment.txt}</p>\r\n                                    </div>\r\n                                </li>\r\n                            })}\r\n                        </ul>}\r\n                    </section>\r\n                </div>\r\n                <ActionList\r\n                    openOverlay={() => { this.openOverlay() }}\r\n                    onSaveDueDate={this.onSaveDueDate}\r\n                    onDeleteTask={this.onDeleteTask}\r\n                    toggleModal={this.toggleModal}\r\n                    isMemberChecked={this.isMemberChecked}\r\n                    onAddMemberToTask={this.onAddMemberToTask}\r\n                    task={task}\r\n                    group={this.state.group}\r\n                    onAddCheckList={this.onAddCheckList}\r\n                    moveTask={this.moveTask}\r\n                    updateState={() => { this.updateState() }}\r\n                    updateTask={this.updateTask}\r\n                    addImgToTask={this.addImgToTask}\r\n                    updateTaskLabel={this.updateTaskLabel}\r\n                />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    remove,\r\n    add,\r\n    loadBoard,\r\n    update\r\n}\r\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(_TaskDetails)","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\boardService.js",["269","270"],"import { utilService } from './generalService/utilService.js'\r\nimport { storageService } from './generalService/asyncStorageService.js'\r\nimport {httpService} from '../services/generalService/httpService.js'\r\n\r\nwindow.storageService = storageService;\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    update,\r\n    add,\r\n    getGroupById,\r\n    getTaskById,\r\n    getGroupIdxById,\r\n    checklistPreview,\r\n    getTaskIdxById,\r\n    checklistPrecent,\r\n    updateTaskAtBoard\r\n}\r\n\r\n\r\nfunction query() {\r\n    // return storageService.query(STORAGE_KEY)\r\n    return httpService.get('board')\r\n}\r\n\r\nfunction getById(boardId) {\r\n    // const board = storageService.get(STORAGE_KEY, boardId);\r\n    // return board\r\n    return httpService.get(`board/${boardId}`)\r\n\r\n}\r\n\r\nfunction remove(boardId) {\r\n    return httpService.delete(`board/${boardId}`)\r\n}\r\n\r\nasync function add(title, background) {\r\n    console.log(title,background)\r\n    // const newBoard = _createBoard()\r\n    // const savedBoard = storageService.post(STORAGE_KEY, newBoard)\r\n    // return savedBoard\r\n    const board = {title ,style:{background}}\r\n    console.log(board)\r\n    const res = await httpService.post(`board`, board)\r\n    return res\r\n}\r\n\r\nasync function update(board) {\r\n    // return storageService.put(STORAGE_KEY, board)\r\n    board.activities = []\r\n    \r\n    const res = await httpService.put(`board/${board._id}`, board)\r\n    return res\r\n\r\n}\r\n\r\n//task crud\r\nfunction getGroupById(board, groupId) {\r\n    return board.groups.find(group => group.id === groupId);\r\n}\r\n\r\nfunction getGroupIdxById(board, groupId) {\r\n    return board.groups.findIndex(group => group.id === groupId);\r\n}\r\n\r\nfunction getTaskIdxById(group, taskId) {\r\n    return group.tasks.findIndex(task => task.id === taskId);\r\n}\r\n\r\nfunction getTaskById(group, taskId) {\r\n    return group.tasks.find(task => task.id === taskId)\r\n}\r\n\r\nfunction checklistPreview(task) {\r\n    const checklists = task.checklists\r\n    let isDone = false\r\n    let allTodos = 0;\r\n    let doneTodos = 0;\r\n    checklists.forEach(checkList => {\r\n        allTodos += checkList.todos.length;\r\n        checkList.todos.forEach(todo => {\r\n            if (todo.isDone) doneTodos++\r\n        })\r\n    });\r\n    if (doneTodos === allTodos && allTodos) isDone = true;\r\n    const str = `${doneTodos}/${allTodos}`\r\n    const res = { str, isDone}\r\n    return res\r\n}\r\n\r\nfunction checklistPrecent(checklist){\r\n    let doneTodos = 0;\r\n    checklist.todos.forEach(todo => {\r\n        if(todo.isDone) doneTodos++\r\n    })\r\n    const precent = (doneTodos / checklist.todos.length) * 100 \r\n    \r\n    return precent\r\n}\r\n\r\nfunction _updateTaskAtGroup(group, updateTask){\r\n    const idx = group.tasks.findIndex( task => {\r\n        task.id = updateTask.id;\r\n    })\r\n    group.tasks.splice(idx, 1, updateTask);\r\n    return group;\r\n}\r\n\r\nfunction _updateGroupAtBoard( board ,updateGroup){\r\n    const idx = getGroupIdxById(board, updateGroup.id)\r\n    board.groups[idx] = updateGroup;\r\n    return board;\r\n}\r\n\r\nfunction updateTaskAtBoard(board,group, updateTask){\r\n    const updateGroup =  _updateTaskAtGroup(group, updateTask);\r\n    const updateBoard = _updateGroupAtBoard(board, updateGroup);\r\n    return updateBoard;\r\n}","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\reviewActions.js",["271","272"],"import { reviewService } from '../../services/reviewService'\r\nimport { userService } from '../../services/userService'\r\nimport { socketService, SOCKET_EVENT_REVIEW_ADDED } from '../../services/generalService/socketService'\r\n\r\n\r\nexport function loadReviews() {\r\n  return async dispatch => {\r\n    try {\r\n      const reviews = await reviewService.query()\r\n      dispatch({ type: 'SET_REVIEWS', reviews })\r\n\r\n      // socketService.on(SOCKET_EVENT_REVIEW_ADDED, review =>{\r\n      //   dispatch({ type: 'ADD_REVIEW', review })\r\n      // })\r\n\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in loadReviews', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addReview(review) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedReview = await reviewService.add(review)\r\n      dispatch({ type: 'ADD_REVIEW', review: addedReview })\r\n\r\n      const score = await userService.increaseScore()\r\n      dispatch({ type: 'SET_SCORE', score })\r\n      \r\n    } catch (err) {\r\n      console.log('ReviewActions: err in addReview', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeReview(reviewId) {\r\n  return async dispatch => {\r\n    try {\r\n      await reviewService.remove(reviewId)\r\n      dispatch({ type: 'REMOVE_REVIEW', reviewId })\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in removeReview', err)\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\ModalWrapper.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\boardsAction.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\utilService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\socketService.js",["273"],"import io from 'socket.io-client'\r\nimport {httpService} from './httpService'\r\n\r\nexport const SOCKET_EMIT_USER_WATCH = 'user-watch';\r\nexport const SOCKET_EVENT_USER_UPDATED = 'user-updated';\r\nexport const SOCKET_EVENT_REVIEW_ADDED = 'review-added';\r\n\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'production')? '' : '//localhost:3030'\r\n// export const socketService = createSocketService()\r\nexport const socketService = createSocketService()\r\n\r\nwindow.socketService = socketService\r\n\r\nvar socketIsReady = false;\r\n// socketService.setup()\r\n\r\n\r\nfunction createSocketService() {\r\n  var socket = null;\r\n  const socketService = {\r\n    async setup() {\r\n      if (socket) return\r\n      await httpService.get('setup-session')\r\n      socket = io(baseUrl, { reconnection: false})\r\n      socketIsReady = true;\r\n    },\r\n    async on(eventName, cb) {\r\n      if (!socket) await socketService.setup()\r\n      socket.on(eventName, cb)\r\n    },\r\n    async off(eventName, cb=null) {\r\n      if (!socket) await socketService.setup()\r\n      if (!cb) socket.removeAllListeners(eventName)\r\n      else socket.off(eventName, cb)\r\n    },\r\n    async emit(eventName, data) {\r\n      if (!socket) await socketService.setup()\r\n      socket.emit(eventName, data)\r\n    },\r\n    terminate() {\r\n      socket = null\r\n      socketIsReady = false\r\n    }\r\n  }\r\n  return socketService\r\n}\r\n\r\n// eslint-disable-next-line\r\nfunction createDummySocketService() {\r\n  var listenersMap = {}\r\n  const socketService = {\r\n    listenersMap,\r\n    setup() {\r\n      listenersMap = {}\r\n    },\r\n    terminate() {\r\n      this.setup()\r\n    },\r\n    on(eventName, cb) {\r\n      listenersMap[eventName] = [...(listenersMap[eventName]) || [], cb]\r\n    },\r\n    off(eventName, cb) {\r\n      if (!listenersMap[eventName]) return\r\n      if (!cb) delete listenersMap[eventName]\r\n      else listenersMap[eventName] = listenersMap[eventName].filter(l => l !== cb)\r\n    },\r\n    emit(eventName, data) {\r\n      if (!listenersMap[eventName]) return\r\n      listenersMap[eventName].forEach(listener => {\r\n        listener(data)\r\n      })\r\n    },\r\n    debugMsg() {\r\n      this.emit('chat addMsg', {from: 'Someone', txt: 'Aha it worked!'})\r\n    },\r\n  }\r\n  return socketService\r\n}\r\n\r\n\r\n// Basic Tests\r\nfunction cb(x) {console.log(x)}\r\nsocketService.on('baba', cb)\r\nsocketService.on('mama', cb)\r\nsocketService.on('lala', cb)\r\nsocketService.emit('baba', 'DATA')\r\n// socketService.off('baba', cb)\r\n\r\n\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\UserPreview.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\userService.js",["274"],"// import { storageService } from './asyncStorageService'\r\nimport { httpService } from './generalService/httpService'\r\nconst SCORE_FOR_REVIEW = 10\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getUsers,\r\n    getById,\r\n    remove,\r\n    update,\r\n    getLoggedinUser\r\n}\r\n\r\nwindow.userService = userService\r\n// Note: due to async, must run one by one...\r\n// userService.signup({fullname: 'Puki Norma', username: 'user1', password:'123',score: 100, isAdmin: false})\r\n// userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 100, isAdmin: true})\r\n\r\nfunction getUsers() {\r\n    // return storageService.query('user')\r\n    return httpService.get(`user`)\r\n}\r\n\r\nfunction getById(userId) {\r\n    // return storageService.get('user', userId)\r\n    return httpService.get(`user/${userId}`)\r\n}\r\nfunction remove(userId) {\r\n    // return storageService.remove('user', userId)\r\n    return httpService.delete(`user/${userId}`)\r\n}\r\n\r\nasync function update(user) {\r\n    // return storageService.put('user', user)\r\n    user = await httpService.put(`user/${user._id}`, user)\r\n    // Handle case in which admin updates other user's details\r\n    if (getLoggedinUser()._id === user._id) _saveLocalUser(user)\r\n}\r\n\r\nasync function login(userCred) {\r\n    // const users = await storageService.query('user')\r\n    // const user = users.find(user => user.username === userCred.username)\r\n    // return _saveLocalUser(user)\r\n\r\n    const user = await httpService.post('auth/login', userCred)\r\n    if (user) return _saveLocalUser(user)\r\n}\r\nasync function signup(userCred) {\r\n    // const user = await storageService.post('user', userCred)\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _saveLocalUser(user)\r\n}\r\nasync function logout() {\r\n    sessionStorage.clear()\r\n    return await httpService.post('auth/logout')\r\n}\r\nfunction _saveLocalUser(user) {\r\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n    return user\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    return JSON.parse(sessionStorage.getItem('loggedinUser'))\r\n}\r\n\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\asyncStorageService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\httpService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\Upload.jsx",["275","276"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskList.jsx",["277","278"],"import { TaskPreview } from '../board/TaskPreview'\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { Component } from 'react';\r\nimport { boardService } from '../../services/boardService.js'\r\nimport { utilService } from '../../services/generalService/utilService.js'\r\nimport { GroupModal } from './taskDetails/action/actionModal/GroupModal'\r\nconst EMPTY_TASK = { title: '' }\r\nconst EMPTY_GROUP = { title: '' }\r\n\r\nexport class TaskList extends Component {\r\n    state = {\r\n        group: EMPTY_GROUP,\r\n        task: EMPTY_TASK\r\n    }\r\n    componentDidMount() {\r\n        this.setState({ group: this.props.group })\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            task: {\r\n                ...prevState.task,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n    updateGroup = () => {\r\n        if (!this.state.group.title) return;\r\n        const copyBoard = { ...this.props.board };\r\n        this.props.updateBoard(copyBoard)\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\r\n        copyBoard.groups[groupIdx] = this.state.group\r\n        console.log(copyBoard)\r\n    }\r\n\r\n    handleChangeGroup = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            group: {\r\n                ...prevState.group,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n    onAddTask = () => {\r\n        if (!this.state.task.title) return;\r\n        const { group } = this.props\r\n        const copyBoard = { ...this.props.board };\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, group.id)\r\n        copyBoard.groups[groupIdx].tasks.push(utilService.formatNewTask(this.state.task))\r\n        console.log(this.state.task)\r\n        this.setState({ task: EMPTY_TASK })\r\n        this.props.updateBoard(copyBoard)\r\n    }\r\n\r\n    toggleModal = (className) => {\r\n        const modals = document.querySelectorAll('.action-modal');\r\n        const currModal = document.querySelector(`.${className}`);\r\n        if (modals) {\r\n            modals.forEach(\r\n                el => el.classList.add('d-none'));\r\n        }\r\n        if (currModal) {\r\n            currModal.classList.remove('d-none');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { board, group, updateBoard, index } = this.props\r\n\r\n        return (\r\n            <Draggable index={index} draggableId={group.id} >\r\n                {(provided, snapshot) => {\r\n                    return <li className=\"group br-3\"\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        <form className=\"\" onSubmit={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.updateGroup()\r\n\r\n                        }}>\r\n                            <div className=\"group-title w-100 flex center space-between pb-2\">\r\n                                <input\r\n                                    className=\"app-input font-w2 font-m lh-20 \"\r\n                                    onBlur={this.updateGroup}\r\n                                    type=\"text\"\r\n                                    value={this.state.group.title}\r\n                                    name=\"title\"\r\n                                    onChange={this.handleChangeGroup}\r\n                                />\r\n                                <div className=\"group-menu\" >\r\n                                    <div className=\"btn\" onMouseDown={(ev) => {\r\n                                            if(ev.button == 0){\r\n                                                this.toggleModal(`${this.state.group.id}`)\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    >...</div>\r\n                                    <GroupModal\r\n                                     toggleModal={() => {this.toggleModal()}} \r\n                                     group={group}\r\n                                     />\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                        <div className=\"wrap-task-list\">\r\n\r\n                            <div className=\"task-list flex column center content-center\">\r\n                                <Droppable\r\n                                    droppableId={group.id}\r\n                                    type='task'>\r\n                                    {(provided) => (\r\n                                        <div className=\"task-list-droppable\"\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.droppableProps}\r\n                                        >\r\n                                            {group.tasks.map((task, idx) => (\r\n                                                <TaskPreview key={task.id}\r\n                                                    board={board}\r\n                                                    index={idx}\r\n                                                    groupId={group.id}\r\n                                                    updateBoard={updateBoard}\r\n                                                    task={task}\r\n                                                />\r\n                                            ))}\r\n                                            {!utilService.isFalse(group.tasks) && <h1 className=\"task-title fam-1 font-m\">No tasks to show</h1>}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n                                    )}\r\n                                </Droppable>\r\n                            </div>\r\n                            <form onSubmit={(ev) => {\r\n                                ev.preventDefault()\r\n                                this.onAddTask()\r\n                                console.log(ev)\r\n                            }}>\r\n                                <input className=\"add-task\" value={this.state.task.title} type=\"text\" placeholder=\"+ Add another card\" name=\"title\" onChange={this.handleChange} />\r\n                            </form>\r\n                        </div>\r\n                    </li>\r\n                }}\r\n            </Draggable>)\r\n        /*    </div> */\r\n    }\r\n}","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\MiniBoard.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardNavbar.jsx",["279"],"import { MembersBoard } from '../MembersBoard';\r\nimport { MdKeyboardArrowDown } from 'react-icons/md'\r\nimport { RiDashboardLine } from 'react-icons/ri'\r\nimport { AiOutlineStar } from 'react-icons/ai'\r\nimport { Component } from 'react';\r\nimport { BoardMembersModal } from './BoardMembersModal'\r\nimport {AiFillStar} from 'react-icons/ai'\r\n\r\n\r\n\r\nexport class BoardNavbar extends Component {\r\n    state = {\r\n        title: this.props.board.title,\r\n        members: this.props.board.members\r\n    }\r\n\r\n\r\n\r\n    onAddMemberToBoard = (addedMember) => {\r\n        const { members } = this.state\r\n        const memberIdx = members.findIndex(member => member._id === addedMember._id)\r\n        if (memberIdx !== -1) {\r\n            members.splice(memberIdx, 1)\r\n        }\r\n        else members.push(addedMember)\r\n        const copyBoard = { ...this.props.board }\r\n        copyBoard.members = members\r\n        console.log(members)\r\n        this.props.updateBoard(copyBoard)\r\n    }\r\n\r\n    isMemberChecked = (memberCheck) => {\r\n        const memberIdx = this.state.members.findIndex(member => member._id === memberCheck._id)\r\n        if (memberIdx !== -1) {\r\n            return 'checked'\r\n        }\r\n        else return ''\r\n    }\r\n\r\n    toggleModal = (className) => {\r\n        const modals = document.querySelectorAll('.action-modal');\r\n        const currModal = document.querySelector(`.${className}`);\r\n        if (modals) {\r\n            modals.forEach(\r\n                el => el.classList.add('d-none'));\r\n        }\r\n        if (currModal) {\r\n            currModal.classList.remove('d-none');\r\n        }\r\n    }\r\n    onChangeBoardName = () => {\r\n        const board = this.props.board\r\n        board.title = this.state.title\r\n        this.props.updateBoard(board)\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        this.setState({ [field]: value })\r\n    }\r\n    render() {\r\n        const { board, onUpdate } = this.props\r\n        if (!board) return <div>Loading...</div>\r\n        return (\r\n            <nav className=\"board-navbar flex space-between font-1 c-white fam-1\">\r\n                <ul className=\"left-bar flex center space-evenly \">\r\n                    <li className=\"btn-board btn-board-navbar\"><RiDashboardLine />Board<MdKeyboardArrowDown /></li>\r\n                    <li className=\"btn-board bold input-navbar\">\r\n                        <div onClick={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.onChangeBoardName(ev)\r\n                        }}>\r\n                            <input type=\"text\"\r\n                                className=\"app-input nav-board-input bold font-m lh-20 c-white \"\r\n                                name=\"title\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.title}\r\n                                onBlur={this.onChangeBoardName}\r\n                            />\r\n                        </div>\r\n                    </li>\r\n                    <li className=\"btn-board btn-board-navbar\" onClick={this.props.favBoard}>\r\n                       {!board.isFavorite && <AiOutlineStar />}\r\n                       {board.isFavorite && <AiFillStar/>}\r\n                    </li>\r\n                    <li className=\"btn-board btn-board-navbar\">Visiblity</li>\r\n                    <ul className=\"members-wrap \">\r\n                        <li\r\n                            className=\"btn-board btn-board-navbar\"\r\n                            onClick={() => { this.toggleModal('board-members-wrap-modal') }}>\r\n                            Invite\r\n                        </li>\r\n                        <BoardMembersModal\r\n                            users={this.props.users}\r\n                            isMemberChecked={this.isMemberChecked}\r\n                            onAddMemberToBoard={this.onAddMemberToBoard}\r\n                            toggleModal={() => { this.toggleModal() }}\r\n                        />\r\n                    </ul>\r\n                    <li className=\"btn-board bg-inherit\" ><MembersBoard /></li>\r\n                </ul>\r\n                <ul className=\"right-bar flex center\">\r\n                    <li className=\"btn-board btn-board-navbar\" onClick={() => this.props.removeBoard()}>Delete Board</li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckList.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\reviewService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\Overlay.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\data\\board.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\services\\generalService\\cloudinaryService.js",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\TaskPreview.jsx",["280","281","282","283","284","285","286"],"import { Link } from 'react-router-dom'\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { Provider } from 'react-redux';\r\nimport { boardService } from '../../services/boardService.js'\r\nimport { BsCheckBox } from 'react-icons/bs'\r\nimport { FaRegCommentDots } from 'react-icons/fa'\r\nimport { AiOutlineClockCircle, AiOutlineClose } from 'react-icons/ai'\r\nimport { GrTextAlignFull } from 'react-icons/gr'\r\nimport { connect } from 'react-redux'\r\nimport { utilService } from '../../services/generalService/utilService'\r\nimport React, { Component } from 'react'\r\nimport { UserPreview } from './UserPreview.jsx';\r\n\r\nimport { toggleLabel } from '../../store/actions/systemAction.js';\r\n\r\n\r\n\r\n// export function TaskPreview({ board, index, task, updateBoard, groupId }) {\r\nclass _TaskPreview extends Component {\r\n\r\n    getStyle = (style, snapshot) => {\r\n        if (!snapshot.isDropAnimating) {\r\n            return style;\r\n        }\r\n        const { moveTo, curve, duration } = snapshot.dropAnimation;\r\n        // move to the right spot\r\n        const translate = `translate(${moveTo.x}px, ${moveTo.y}px)`;\r\n        // add a bit of turn for fun\r\n        const rotate = 'rotate(0.01turn)';\r\n\r\n        // patching the existing style\r\n        return {\r\n            ...style,\r\n            background: '#fff',\r\n            transform: `${translate} ${rotate}`,\r\n            // slowing down the drop because we can\r\n            transition: `all ${curve} 0.2s`,\r\n        };\r\n    }\r\n\r\n    onRemoveTask = (taskId) => {\r\n        const { board, index, task, updateBoard, groupId } = this.props\r\n        const group = board.groups[boardService.getGroupIdxById(board, groupId)]\r\n        board.groups[boardService.getGroupIdxById(board, groupId)].tasks.splice(boardService.getTaskIdxById(group, taskId), 1)\r\n        updateBoard({ ...board })\r\n    }\r\n\r\n    dueDateDonePreview = (task) => {\r\n        if(task.isDone) return 'done-preview'\r\n        else return ''\r\n     }\r\n    render() {\r\n        const { board, index, task, updateBoard, groupId } = this.props\r\n        const isLabelOpen = this.props.isLabelOpen;\r\n        return <Draggable\r\n            draggableId={task.id}\r\n            index={index}\r\n        // isDragDisabled={false}\r\n        >\r\n            {(provided, snapshot) => {\r\n                return (\r\n                    <div\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isdragging={snapshot.isDragging && !snapshot.isDropAnimating ? 'true' : 'false'}\r\n                        style={this.getStyle(provided.draggableProps.style, snapshot)}\r\n                    >\r\n                        <div className=\"wrap-list-task br-3\">\r\n                            <div className=\"wrap-task-prev\">\r\n                                <div className=\"task-preview flex column\">\r\n                                    {/* <Link to={`/board/${board._id}/${task.id}`}> */}\r\n                                    <span className=\"cur-pointer fam-1 font-s bold flex d-none \" onClick={() => { this.onRemoveTask(task.id) }}><AiOutlineClose /></span>\r\n                                    {utilService.isFalse(task.labelIds) &&\r\n                                                <div className=\"labels-container flex  wrap\" onClick={(ev) => {\r\n                                                    ev.stopPropagation();\r\n                                                }}>\r\n                                                    {\r\n                                                        task.labelIds.map(labelId => {\r\n                                                            const label = board.labels.find(label => {\r\n                                                                return label.id === labelId;\r\n                                                            })\r\n\r\n                                                            if (label) {\r\n                                                                return <div\r\n                                                                    key={label.id}\r\n                                                                    className={`preview-label flex  ${isLabelOpen && \"label-open\"}`}\r\n                                                                    onClick={() => this.props.toggleLabel(!isLabelOpen)}\r\n                                                                    style={{ backgroundColor: label.color }}\r\n                                                                >\r\n                                                                    {this.props.isLabelOpen && label.title}\r\n                                                                </div>\r\n                                                            }\r\n                                                        })}\r\n\r\n                                        </div>\r\n                                    }\r\n\r\n                                    <Link to={`/board/${board._id}/${groupId}/${task.id}`}>\r\n\r\n\r\n                                        <h1 className=\"task-title fam-1 font-m\">{task.title}</h1>\r\n                                        <div className=\"task-mini-details flex w-100 content-start  gap-xs fam-1 c-stand\">\r\n                                            {/* {utilService.isFalse(task.members) && <small className=\"flex center\">{task.members.map(member => { return <UserPreview key={member._id} user={member} /> }).splice(0, 3)}</small>} */}\r\n                                            {utilService.isFalse(task.comments) && <small className=\"flex center\"><FaRegCommentDots /></small>}\r\n                                            {utilService.isFalse(task.checklists) && <div className={`flex row center ${boardService.checklistPreview(task).isDone && \"done-preview\"}`}>\r\n                                                <BsCheckBox />\r\n                                                <small>{boardService.checklistPreview(task).str}</small>\r\n                                            </div>}\r\n                                            {task.dueDate && <div className={`flex row center ${this.dueDateDonePreview(task)}`}>\r\n                                                <AiOutlineClockCircle />\r\n                                                <small>\r\n                                                    {task.dueDate}\r\n                                                </small>\r\n                                            </div>}\r\n                                            {task.description && <small className=\"flex center\"><GrTextAlignFull /></small>}\r\n                                        </div>\r\n                                    </Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            }\r\n        </Draggable>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board,\r\n        isLabelOpen : state.systemModule.isLabelsOpen\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    toggleLabel\r\n}\r\nexport const TaskPreview = connect(mapStateToProps, mapDispatchToProps)(_TaskPreview)","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\MembersBoard.jsx",["287"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { UserPreview } from './UserPreview';\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nclass _MembersBoard extends Component {\r\n    render() {\r\n        const members = this.props.board.members;\r\n        return (\r\n            <section className=\"members-board flex space-between\">\r\n                {members.map(member =>\r\n                    <NavLink key={member._id} to={`/user/${member._id}`}>\r\n                        <UserPreview user={member} />\r\n                    </NavLink>)}\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n}\r\nexport const MembersBoard = connect(mapStateToProps, mapDispatchToProps)(_MembersBoard)","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckListStatus.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\ActionList.jsx",["288","289"],"import React, { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { MdLabelOutline } from 'react-icons/md'\r\nimport { AiOutlineClockCircle, AiOutlineCheckSquare, AiOutlineDelete } from 'react-icons/ai'\r\nimport { BiCopy } from 'react-icons/bi'\r\nimport { FiUsers } from 'react-icons/fi'\r\nimport { BsImage, BsArrowRight } from 'react-icons/bs'\r\nimport { LabelModal } from './actionModal/LabelModal';\r\nimport { MembersModal } from './actionModal/MembersModal'\r\nimport { DueDateModal } from './actionModal/DueDateModal'\r\nimport { MoveModal } from './actionModal/MoveModal'\r\nimport { CopyModal } from './actionModal/CopyModal'\r\nimport { withRouter } from \"react-router\";\r\n\r\n\r\n\r\nclass _ActionList extends Component {\r\n    state = {\r\n        task: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n            task: this.props.task\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n    }\r\n\r\n    closeDetails = () =>{\r\n        const boardId = this.props.match.params.boradId;\r\n        this.props.history.push(`/board/${boardId}`)\r\n    }\r\n    render() {\r\n        const { task } = this.state\r\n        if (!task) return <h1>Loading...</h1>\r\n        return (\r\n            <div className=\"menu-task flex column w-40 content-start right\">\r\n                <div className=\"close-details fam-2 font-1 bold pad-1 cur-pointer\" onClick={() => this.closeDetails()}>X</div>\r\n                <div className=\"details-action flex column center pad-1 w-80\">\r\n                    <label htmlFor=\"actions\" className=\"font-m pb-3\">ACTIONS</label>\r\n                    <ul className=\"action-menu flex column w-100 clean-list font-m pad-0 fw-2\">\r\n\r\n                        <li className=\"label-wrap\" onClick={() => this.props.openOverlay('label-wrap-modal')}>\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('label-wrap-modal') }}><MdLabelOutline />Labels</div>\r\n                            <LabelModal toggleModal={() => { this.props.toggleModal() }} updateState= {() => {this.props.updateState()}}/>\r\n                        </li>\r\n\r\n                        <ul className=\"members-wrap\">\r\n                            <li className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('members-wrap-modal') }}><FiUsers className=\"action-icon\" />Members</li>\r\n                            <MembersModal isMemberChecked={this.props.isMemberChecked} onAddMemberToTask={this.props.onAddMemberToTask} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </ul>\r\n\r\n                        <li className=\"duedate-wrap\">\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClockCircle className=\"action-icon\" />DueDate</div>\r\n                            <DueDateModal onSaveDueDate={this.props.onSaveDueDate} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </li>\r\n\r\n                        <li onClick={() => { this.props.onAddCheckList(task) }} className=\"btn-action\"><AiOutlineCheckSquare className=\"action-icon\" />Checklist</li>\r\n                        <li className=\"btn-action\"><BsImage className=\"action-icon\"/>Image</li>\r\n                        <li className=\"move-wrap\">\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><BsArrowRight />Move</div>\r\n                            <MoveModal group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </li>\r\n                        <li className=\"copy-wrap\">\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('copy-wrap-modal') }}><BiCopy className=\"action-icon\" />Copy</div>\r\n                            <CopyModal className=\"action-icon\" group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </li>\r\n                        <li onClick={() => { this.props.onDeleteTask() }} className=\"btn-action btn-delete\"><AiOutlineDelete className=\"action-icon\" />Delete</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\n\r\nexport const ActionList = connect(mapStateToProps, mapDispatchToProps)(withRouter(_ActionList));\r\n","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\LabelModal.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MembersModal.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\shared\\ModalAction.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\OverlayAction.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\store\\actions\\systemAction.js",["290"],"import { utilService } from '../../services/generalService/utilService';\r\n\r\nexport function loading() { // Action Creator\r\n    return async dispatch => {\r\n        try {   \r\n            dispatch('LOADING_DONE');         \r\n            dispatch('LOADING_START');\r\n            setTimeout(() => {\r\n                dispatch('LOADING_DONE');\r\n            }, 1500);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\LabelTask.jsx",["291","292"],"import React, { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nclass _LabelTask extends Component {\r\n    state = {\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    render() {\r\n        const label = this.props.label;\r\n        console.log(label);\r\n        return (\r\n            <div className=\"label-input flex\">\r\n                <input type=\"text\"  value={label.color} onChange={ ()=> {console.log('aa');}} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\n\r\nexport const LabelTask = connect(mapStateToProps, mapDispatchToProps)(_LabelTask)","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\pages\\Login.jsx",["293"],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardMembersModal.jsx",["294"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { UserPreview } from '../UserPreview';\r\nimport { MembersBoard } from '../MembersBoard';\r\n\r\n\r\n\r\n\r\nclass _BoardMembersModal extends Component {\r\n    state = {\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    render() {\r\n        const members  = this.props.users;\r\n        return <div className=\"action-modal c-stand board-members-wrap-modal d-none p-abs flex\">\r\n            <ModalAction>\r\n                <div className=\"members-modal p-abs flex column pad-1\">\r\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center content-end gap-5 w-70\">\r\n                        <h1 className=\"fam-1 font-1 \">Members</h1>\r\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('board-members-wrap-modal') }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content\">\r\n                        <ul>\r\n                            {members.map(member => {\r\n                                return <li key={member._id} onClick={() => { this.props.onAddMemberToBoard(member) }} className=\"flex space-between member-modal center\">\r\n                                    <div className=\"flex center gap-xs\">\r\n                                        <UserPreview user={member}/>\r\n                                        <p>{member.fullname} ({member.username})</p>\r\n                                    </div>\r\n                                    <span className={`check ${this.props.isMemberChecked(member)}`}>✓</span>\r\n                                </li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\n\r\nexport const BoardMembersModal = connect(mapStateToProps, mapDispatchToProps)(_BoardMembersModal)","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\DueDateModal.jsx",[],"C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MoveModal.jsx",["295"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { LabelTask } from '../LabelTask'\r\nimport { update } from '../../../../../store/actions/boardsAction';\r\nimport { boardService } from '../../../../../services/boardService'\r\n\r\n\r\nclass _MoveMdodal extends Component {\r\n    state = {\r\n        moveTo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    moveTask = () => {\r\n        if (this.state.moveTo !== this.props.group.id) {\r\n            const copyBoard = { ...this.props.board }\r\n            copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.props.group.id)].tasks.splice(\r\n                boardService.getTaskIdxById(this.props.group, this.props.task.id), 1)\r\n            copyBoard.groups[this.state.moveTo].tasks.push(this.props.task)\r\n            this.props.update(copyBoard)\r\n        }\r\n        // this.props.history.push(`/board/${copyBoard._id}`)\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        console.log(target.value)\r\n        this.setState({ moveTo: target.value })\r\n    }\r\n    render() {\r\n        return <div className=\"action-modal move-wrap-modal d-none p-abs flex\">\r\n            <ModalAction>\r\n                <div className=\"move-modal w-100 p-abs flex column pad-1\">\r\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\r\n                        <h1 className=\"fam-1 font-1 \">Move to</h1>\r\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content w-100\">\r\n                        <form onSubmit={(ev) => {\r\n                            this.moveTask()\r\n                            ev.preventDefault()\r\n                        }}>\r\n                            <select onChange={this.handleChange}>\r\n                                {this.props.board.groups.map((group, idx) => {\r\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\r\n                                })}\r\n                                {this.props.board.groups.map((group, idx) => {\r\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\r\n                                })}\r\n                            </select>\r\n                            <button className=\"btn-copy-move\">Move</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    update\r\n}\r\n\r\n\r\nexport const MoveMdodal = connect(mapStateToProps, mapDispatchToProps)(_MoveMdodal)","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\CopyModal.jsx",["296","297"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { LabelTask } from '../LabelTask'\r\nimport { update } from '../../../../../store/actions/boardsAction';\r\nimport { boardService } from '../../../../../services/boardService'\r\nimport { utilService } from '../../../../../services/generalService/utilService';\r\n\r\n\r\nclass _CopyModal extends Component {\r\n    state = {\r\n        copyTo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    copyTask = () => {\r\n        if (this.state.copyTo !== this.props.group.id) {\r\n            const copyBoard = { ...this.props.board }\r\n            const task = { ...this.props.task }\r\n            task.id = utilService.makeId()\r\n            copyBoard.groups[this.state.copyTo].tasks.push(task)\r\n            this.props.update(copyBoard)\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        console.log(target.value)\r\n        this.setState({ copyTo: target.value })\r\n    }\r\n    render() {\r\n        return <div className=\"action-modal copy-wrap-modal d-none p-abs flex\">\r\n            <ModalAction>\r\n                <div className=\"copy-modal p-abs flex column pad-1\">\r\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\r\n                        <h1 className=\"fam-1 font-1\">Copy</h1>\r\n                        <span className=\"cur-pointer fam-1 font-1 bold\" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content\">\r\n                        <form onSubmit={(ev) => {\r\n                            this.copyTask()\r\n                            ev.preventDefault()\r\n                        }}>\r\n                            <select onChange={this.handleChange}>\r\n                                {this.props.board.groups.map((group) => {\r\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\r\n                                })}\r\n                                {this.props.board.groups.map((group, idx) => {\r\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\r\n                                })}\r\n                            </select>\r\n                            <button className=\"btn-copy-move\">Copy</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    update\r\n}\r\n\r\n\r\nexport const CopyModal = connect(mapStateToProps, mapDispatchToProps)(_CopyModal)","C:\\Users\\ravit\\OneDrive\\שולחן העבודה\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\GroupModal.jsx",["298","299","300","301"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { remove, add, loadBoard, update, setBoard } from '../../../../../store/actions/boardsAction.js';\r\nimport { boardService } from '../../../../../services/boardService.js'\r\n\r\nclass _GroupModal extends Component {\r\n    state = {\r\n        group: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ group: this.props.group })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    addTask = () => {\r\n\r\n    }\r\n\r\n    removeList = (groupId) => {\r\n        const copyBoard = { ...this.props.board }\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, groupId)\r\n        copyBoard.groups.splice(groupIdx,1)\r\n        this.props.update(copyBoard)\r\n    }\r\n    render() {\r\n        const group = this.state.group;\r\n        if (!group) return <h1>Loading...</h1>\r\n        const groupId = group.id;\r\n        return <div className={`action-modal group-wrap-modal ${groupId} d-none p-abs flex`}>\r\n            <ModalAction>\r\n                <div className=\"group-modal p-abs flex column pad-07 c-stand z-1 br-3\">\r\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\r\n                        <h1 className=\"fam-1 font-2 \">List: {group.title}</h1>\r\n                        <span className=\"cur-pointer fam-1 font-m bold\" onClick={() => { this.props.toggleModal(`${groupId}`) }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content\">\r\n                        <ul className=\"flex column space-between\">\r\n                            <ul >\r\n                                <li onClick={() => { this.AddTask() }} className=\"font-2 fam-1 pad-1 li-btn flex center\">Add Task...</li>\r\n                                <li onClick={() => { this.removeList(groupId) }} className=\"font-2 fam-1 pad-1 flex center li-btn\">Remove List...</li>\r\n                                <h1>Label of color!!!</h1>\r\n                            </ul>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    update\r\n}\r\n\r\n\r\nexport const GroupModal = connect(mapStateToProps, mapDispatchToProps)(_GroupModal)",{"ruleId":"302","replacedBy":"303"},{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","severity":1,"message":"307","line":2,"column":34,"nodeType":"308","messageId":"309","endLine":2,"endColumn":51},{"ruleId":"306","severity":1,"message":"310","line":2,"column":10,"nodeType":"308","messageId":"309","endLine":2,"endColumn":14},{"ruleId":"306","severity":1,"message":"311","line":2,"column":10,"nodeType":"308","messageId":"309","endLine":2,"endColumn":16},{"ruleId":"306","severity":1,"message":"312","line":25,"column":13,"nodeType":"308","messageId":"309","endLine":25,"endColumn":16},{"ruleId":"313","severity":1,"message":"314","line":30,"column":11,"nodeType":"315","endLine":30,"endColumn":28},{"ruleId":"306","severity":1,"message":"316","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":17},{"ruleId":"306","severity":1,"message":"317","line":8,"column":27,"nodeType":"308","messageId":"309","endLine":8,"endColumn":36},{"ruleId":"306","severity":1,"message":"318","line":2,"column":10,"nodeType":"308","messageId":"309","endLine":2,"endColumn":17},{"ruleId":"306","severity":1,"message":"319","line":7,"column":10,"nodeType":"308","messageId":"309","endLine":7,"endColumn":21},{"ruleId":"306","severity":1,"message":"320","line":7,"column":23,"nodeType":"308","messageId":"309","endLine":7,"endColumn":32},{"ruleId":"306","severity":1,"message":"321","line":7,"column":34,"nodeType":"308","messageId":"309","endLine":7,"endColumn":46},{"ruleId":"306","severity":1,"message":"322","line":8,"column":10,"nodeType":"308","messageId":"309","endLine":8,"endColumn":19},{"ruleId":"313","severity":1,"message":"314","line":41,"column":11,"nodeType":"315","endLine":41,"endColumn":57},{"ruleId":"313","severity":1,"message":"314","line":51,"column":11,"nodeType":"315","endLine":51,"endColumn":64},{"ruleId":"313","severity":1,"message":"314","line":60,"column":11,"nodeType":"315","endLine":60,"endColumn":60},{"ruleId":"313","severity":1,"message":"314","line":68,"column":11,"nodeType":"315","endLine":68,"endColumn":60},{"ruleId":"306","severity":1,"message":"323","line":6,"column":10,"nodeType":"308","messageId":"309","endLine":6,"endColumn":21},{"ruleId":"306","severity":1,"message":"324","line":7,"column":8,"nodeType":"308","messageId":"309","endLine":7,"endColumn":10},{"ruleId":"306","severity":1,"message":"325","line":8,"column":8,"nodeType":"308","messageId":"309","endLine":8,"endColumn":10},{"ruleId":"306","severity":1,"message":"326","line":9,"column":8,"nodeType":"308","messageId":"309","endLine":9,"endColumn":10},{"ruleId":"306","severity":1,"message":"327","line":10,"column":8,"nodeType":"308","messageId":"309","endLine":10,"endColumn":10},{"ruleId":"306","severity":1,"message":"328","line":11,"column":8,"nodeType":"308","messageId":"309","endLine":11,"endColumn":10},{"ruleId":"306","severity":1,"message":"329","line":12,"column":8,"nodeType":"308","messageId":"309","endLine":12,"endColumn":10},{"ruleId":"306","severity":1,"message":"330","line":13,"column":8,"nodeType":"308","messageId":"309","endLine":13,"endColumn":10},{"ruleId":"306","severity":1,"message":"331","line":14,"column":8,"nodeType":"308","messageId":"309","endLine":14,"endColumn":10},{"ruleId":"306","severity":1,"message":"332","line":15,"column":10,"nodeType":"308","messageId":"309","endLine":15,"endColumn":15},{"ruleId":"333","severity":1,"message":"334","line":76,"column":49,"nodeType":"335","messageId":"336","endLine":76,"endColumn":51},{"ruleId":"333","severity":1,"message":"334","line":80,"column":49,"nodeType":"335","messageId":"336","endLine":80,"endColumn":51},{"ruleId":"306","severity":1,"message":"337","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":14},{"ruleId":"306","severity":1,"message":"338","line":6,"column":8,"nodeType":"308","messageId":"309","endLine":6,"endColumn":22},{"ruleId":"306","severity":1,"message":"339","line":29,"column":17,"nodeType":"308","messageId":"309","endLine":29,"endColumn":24},{"ruleId":"333","severity":1,"message":"334","line":294,"column":77,"nodeType":"335","messageId":"336","endLine":294,"endColumn":79},{"ruleId":"313","severity":1,"message":"314","line":334,"column":37,"nodeType":"315","endLine":334,"endColumn":86},{"ruleId":"306","severity":1,"message":"323","line":1,"column":10,"nodeType":"308","messageId":"309","endLine":1,"endColumn":21},{"ruleId":"333","severity":1,"message":"340","line":104,"column":45,"nodeType":"335","messageId":"341","endLine":104,"endColumn":47},{"ruleId":"306","severity":1,"message":"342","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":23},{"ruleId":"306","severity":1,"message":"343","line":3,"column":25,"nodeType":"308","messageId":"309","endLine":3,"endColumn":50},{"ruleId":"306","severity":1,"message":"344","line":43,"column":7,"nodeType":"308","messageId":"309","endLine":43,"endColumn":20},{"ruleId":"306","severity":1,"message":"345","line":3,"column":7,"nodeType":"308","messageId":"309","endLine":3,"endColumn":23},{"ruleId":"306","severity":1,"message":"346","line":6,"column":9,"nodeType":"308","messageId":"309","endLine":6,"endColumn":21},{"ruleId":"306","severity":1,"message":"347","line":31,"column":11,"nodeType":"308","messageId":"309","endLine":31,"endColumn":23},{"ruleId":"306","severity":1,"message":"348","line":2,"column":10,"nodeType":"308","messageId":"309","endLine":2,"endColumn":25},{"ruleId":"349","severity":1,"message":"350","line":102,"column":58,"nodeType":"351","messageId":"352","endLine":102,"endColumn":60},{"ruleId":"306","severity":1,"message":"353","line":63,"column":24,"nodeType":"308","messageId":"309","endLine":63,"endColumn":32},{"ruleId":"306","severity":1,"message":"354","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":18},{"ruleId":"306","severity":1,"message":"355","line":12,"column":10,"nodeType":"308","messageId":"309","endLine":12,"endColumn":21},{"ruleId":"306","severity":1,"message":"356","line":25,"column":32,"nodeType":"308","messageId":"309","endLine":25,"endColumn":40},{"ruleId":"306","severity":1,"message":"357","line":42,"column":24,"nodeType":"308","messageId":"309","endLine":42,"endColumn":29},{"ruleId":"306","severity":1,"message":"358","line":42,"column":31,"nodeType":"308","messageId":"309","endLine":42,"endColumn":35},{"ruleId":"306","severity":1,"message":"359","line":53,"column":37,"nodeType":"308","messageId":"309","endLine":53,"endColumn":48},{"ruleId":"333","severity":1,"message":"334","line":80,"column":83,"nodeType":"335","messageId":"336","endLine":80,"endColumn":85},{"ruleId":"306","severity":1,"message":"337","line":4,"column":10,"nodeType":"308","messageId":"309","endLine":4,"endColumn":14},{"ruleId":"306","severity":1,"message":"337","line":2,"column":10,"nodeType":"308","messageId":"309","endLine":2,"endColumn":14},{"ruleId":"306","severity":1,"message":"360","line":2,"column":16,"nodeType":"308","messageId":"309","endLine":2,"endColumn":23},{"ruleId":"306","severity":1,"message":"323","line":1,"column":10,"nodeType":"308","messageId":"309","endLine":1,"endColumn":21},{"ruleId":"306","severity":1,"message":"337","line":2,"column":10,"nodeType":"308","messageId":"309","endLine":2,"endColumn":14},{"ruleId":"306","severity":1,"message":"360","line":2,"column":16,"nodeType":"308","messageId":"309","endLine":2,"endColumn":23},{"ruleId":"306","severity":1,"message":"361","line":4,"column":8,"nodeType":"308","messageId":"309","endLine":4,"endColumn":16},{"ruleId":"306","severity":1,"message":"362","line":6,"column":10,"nodeType":"308","messageId":"309","endLine":6,"endColumn":22},{"ruleId":"306","severity":1,"message":"363","line":5,"column":10,"nodeType":"308","messageId":"309","endLine":5,"endColumn":19},{"ruleId":"306","severity":1,"message":"363","line":5,"column":10,"nodeType":"308","messageId":"309","endLine":5,"endColumn":19},{"ruleId":"306","severity":1,"message":"346","line":7,"column":10,"nodeType":"308","messageId":"309","endLine":7,"endColumn":22},{"ruleId":"306","severity":1,"message":"364","line":5,"column":10,"nodeType":"308","messageId":"309","endLine":5,"endColumn":16},{"ruleId":"306","severity":1,"message":"365","line":5,"column":18,"nodeType":"308","messageId":"309","endLine":5,"endColumn":21},{"ruleId":"306","severity":1,"message":"366","line":5,"column":23,"nodeType":"308","messageId":"309","endLine":5,"endColumn":32},{"ruleId":"306","severity":1,"message":"367","line":5,"column":42,"nodeType":"308","messageId":"309","endLine":5,"endColumn":50},"no-native-reassign",["368"],"no-negated-in-lhs",["369"],"no-unused-vars","'localLoggedinUser' is assigned a value but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'Upload' is defined but never used.","'_id' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'loading' is defined but never used.","'Draggable' is defined but never used.","'connect' is defined but never used.","'loadReviews' is defined but never used.","'addReview' is defined but never used.","'removeReview' is defined but never used.","'loadUsers' is defined but never used.","'utilService' is defined but never used.","'p0' is defined but never used.","'p1' is defined but never used.","'p2' is defined but never used.","'p3' is defined but never used.","'p4' is defined but never used.","'p5' is defined but never used.","'p6' is defined but never used.","'p7' is defined but never used.","'Board' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Link' is defined but never used.","'onClickOutside' is defined but never used.","'boardId' is assigned a value but never used.","Array.prototype.findIndex() expects a return value from arrow function.","expectedInside","'socketService' is defined but never used.","'SOCKET_EVENT_REVIEW_ADDED' is defined but never used.","'socketIsReady' is assigned a value but never used.","'SCORE_FOR_REVIEW' is assigned a value but never used.","'boardService' is defined but never used.","'previewStyle' is assigned a value but never used.","'DragDropContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onUpdate' is assigned a value but never used.","'Provider' is defined but never used.","'UserPreview' is defined but never used.","'duration' is assigned a value but never used.","'index' is assigned a value but never used.","'task' is assigned a value but never used.","'updateBoard' is assigned a value but never used.","'NavLink' is defined but never used.","'LoginPic' is defined but never used.","'MembersBoard' is defined but never used.","'LabelTask' is defined but never used.","'remove' is defined but never used.","'add' is defined but never used.","'loadBoard' is defined but never used.","'setBoard' is defined but never used.","no-global-assign","no-unsafe-negation"]