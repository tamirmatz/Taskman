[{"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/index.js":"1","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/serviceWorkerRegistration.js":"2","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/reportWebVitals.js":"3","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/App.jsx":"4","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/store.js":"5","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/routes.js":"6","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/systemReducer.js":"7","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/userReducer.js":"8","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/reviewReducer.js":"9","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/boardReducer.js":"10","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/AppHeader.jsx":"11","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/UserDetails.jsx":"12","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Board.jsx":"13","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Chat.jsx":"14","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Home.jsx":"15","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/BoardList.jsx":"16","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/userActions.js":"17","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/reviewActions.js":"18","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/boardsAction.js":"19","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/userService.js":"20","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/socketService.js":"21","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/Upload.jsx":"22","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskList.jsx":"23","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/reviewService.js":"24","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/boardService.js":"25","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/httpService.js":"26","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/cloudinaryService.js":"27","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/utilService.js":"28","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/asyncStorageService.js":"29","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskPreview.jsx":"30","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/data/board.js":"31","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalWrapper.jsx":"32","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/Overlay.jsx":"33","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MiniBoard.jsx":"34","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/UserPreview.jsx":"35","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MembersBoard.jsx":"36","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx":"37","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx":"38","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx":"39","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx":"40","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx":"41","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx":"42","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx":"43","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalAction.jsx":"44","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx":"45","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/systemAction.js":"46","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx":"47","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Login.jsx":"48","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx":"49","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx":"50","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MoveModal.jsx":"51","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/CopyModal.jsx":"52","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/GroupModal.jsx":"53"},{"size":910,"mtime":1610189396000,"results":"54","hashOfConfig":"55"},{"size":5064,"mtime":499155300000,"results":"56","hashOfConfig":"55"},{"size":364,"mtime":499155300000,"results":"57","hashOfConfig":"55"},{"size":515,"mtime":1622208933114,"results":"58","hashOfConfig":"55"},{"size":752,"mtime":1622123464533,"results":"59","hashOfConfig":"55"},{"size":605,"mtime":1622631139552,"results":"60","hashOfConfig":"55"},{"size":426,"mtime":1622658555468,"results":"61","hashOfConfig":"55"},{"size":868,"mtime":1622452229862,"results":"62","hashOfConfig":"55"},{"size":669,"mtime":1609949674000,"results":"63","hashOfConfig":"55"},{"size":668,"mtime":1622215305163,"results":"64","hashOfConfig":"55"},{"size":2756,"mtime":1622705437441,"results":"65","hashOfConfig":"55"},{"size":1405,"mtime":1622631139549,"results":"66","hashOfConfig":"55"},{"size":7464,"mtime":1622724287974,"results":"67","hashOfConfig":"55"},{"size":3395,"mtime":1622123464523,"results":"68","hashOfConfig":"55"},{"size":3007,"mtime":1622724696093,"results":"69","hashOfConfig":"55"},{"size":4598,"mtime":1622811806669,"results":"70","hashOfConfig":"55"},{"size":1966,"mtime":1622631634138,"results":"71","hashOfConfig":"55"},{"size":1321,"mtime":1622123464531,"results":"72","hashOfConfig":"55"},{"size":2107,"mtime":1622659243477,"results":"73","hashOfConfig":"55"},{"size":2097,"mtime":1622445084281,"results":"74","hashOfConfig":"55"},{"size":2324,"mtime":1622477414605,"results":"75","hashOfConfig":"55"},{"size":1709,"mtime":1622802147089,"results":"76","hashOfConfig":"55"},{"size":6470,"mtime":1622811806667,"results":"77","hashOfConfig":"55"},{"size":1087,"mtime":1622123464528,"results":"78","hashOfConfig":"55"},{"size":3211,"mtime":1622668911601,"results":"79","hashOfConfig":"55"},{"size":1093,"mtime":1622401206514,"results":"80","hashOfConfig":"55"},{"size":634,"mtime":1622729808649,"results":"81","hashOfConfig":"55"},{"size":2767,"mtime":1622811806670,"results":"82","hashOfConfig":"55"},{"size":2319,"mtime":1622289086771,"results":"83","hashOfConfig":"55"},{"size":7593,"mtime":1622817987441,"results":"84","hashOfConfig":"55"},{"size":298329,"mtime":1622473341850,"results":"85","hashOfConfig":"55"},{"size":158,"mtime":1622292625069,"results":"86","hashOfConfig":"55"},{"size":115,"mtime":1622705437461,"results":"87","hashOfConfig":"55"},{"size":457,"mtime":1622811044554,"results":"88","hashOfConfig":"55"},{"size":515,"mtime":1622636334712,"results":"89","hashOfConfig":"55"},{"size":819,"mtime":1622659243467,"results":"90","hashOfConfig":"55"},{"size":3890,"mtime":1622705437446,"results":"91","hashOfConfig":"55"},{"size":17879,"mtime":1622811044555,"results":"92","hashOfConfig":"55"},{"size":5514,"mtime":1622806762037,"results":"93","hashOfConfig":"55"},{"size":647,"mtime":1622727037391,"results":"94","hashOfConfig":"55"},{"size":4611,"mtime":1622811044555,"results":"95","hashOfConfig":"55"},{"size":1671,"mtime":1622811044558,"results":"96","hashOfConfig":"55"},{"size":2244,"mtime":1622724287973,"results":"97","hashOfConfig":"55"},{"size":213,"mtime":1622559883755,"results":"98","hashOfConfig":"55"},{"size":127,"mtime":1622705437460,"results":"99","hashOfConfig":"55"},{"size":725,"mtime":1622658555466,"results":"100","hashOfConfig":"55"},{"size":4368,"mtime":1622811044557,"results":"101","hashOfConfig":"55"},{"size":5213,"mtime":1622794511194,"results":"102","hashOfConfig":"55"},{"size":2201,"mtime":1622724287971,"results":"103","hashOfConfig":"55"},{"size":1617,"mtime":1622707689473,"results":"104","hashOfConfig":"55"},{"size":3090,"mtime":1622794511192,"results":"105","hashOfConfig":"55"},{"size":2896,"mtime":1622705437454,"results":"106","hashOfConfig":"55"},{"size":2506,"mtime":1622807168333,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1wsars6",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"110"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"110"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"110"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"110"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"110"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"110"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"110"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"110"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/index.js",[],["228","229"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/serviceWorkerRegistration.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/reportWebVitals.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/App.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/store.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/routes.js",["230"],"import { Home } from './pages/Home'\nimport { Chat } from './pages/Chat'\nimport { UserDetails } from './pages/UserDetails'\nimport { BoardList } from './pages/BoardList'\nimport { Board } from './pages/Board'\nimport { Login } from './pages/Login'\n\nexport const routes = [\n    {\n        path: '/user/:userId',\n        component: UserDetails,\n    },\n    {\n        path: '/board/:boardId',\n        component: Board,\n    },\n    {\n        path: '/login',\n        component: Login,\n    },\n    {\n        path: '/board',\n        component: BoardList\n    },\n    {\n        path: '/',\n        component: Home,\n    },\n]\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/systemReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/userReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/reviewReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/boardReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/AppHeader.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/UserDetails.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Board.jsx",["231","232"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Chat.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Home.jsx",["233","234","235","236","237","238","239","240","241"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/BoardList.jsx",["242","243","244","245","246","247","248","249","250"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { remove, add, query } from '../store/actions/boardsAction.js';\nimport { MiniBoard } from '../cmps/board/MiniBoard'\nimport p0 from '../assets/img/background/0.jpg'\nimport p1 from '../assets/img/background/1.jpg'\nimport p2 from '../assets/img/background/2.jpg'\nimport p3 from '../assets/img/background/3.jpg'\nimport p4 from '../assets/img/background/4.jpg'\nimport p5 from '../assets/img/background/5.jpg'\nimport p6 from '../assets/img/background/6.jpg'\nimport p7 from '../assets/img/background/7.jpg'\nimport { Board } from './Board.jsx';\n\nclass _BoardList extends Component {\n    state = {\n        newBoard: {\n            title: '',\n            backgroundId: 0,\n            backgrounds: [\n                'https://trello-backgrounds.s3.amazonaws.com/SharedBackground/2286x1600/24baa6609b89fb8eb0cc0aceb70eaf36/photo-1557682250-33bd709cbe85.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671389/backrounds/0_jflqwf.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671416/backrounds/1_gavwov.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671401/backrounds/2_gstip0.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671395/backrounds/3_mqwgkk.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671404/backrounds/4_ly2zj7.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671550/backrounds/5_g7oe20.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671430/backrounds/6_mi6wun.jpg',\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671421/backrounds/7_oivv0t.jpg',\n\n            ]\n        }\n    }\n    componentDidMount() {\n        this.props.query()\n\n    }\n    componentDidUpdate(){\n        this.props.query()\n    }\n\n    onCreateBoard = () => {\n        const { title, backgrounds, backgroundId } = this.state.newBoard\n        this.props.add(title, backgrounds[backgroundId])\n    }\n\n    changeImg = (num) => {\n        const { backgroundId, backgrounds } = this.state.newBoard\n        if (backgroundId + num === backgrounds.length || backgroundId + num === -1) num = 0\n        this.setState(prevState => ({\n            newBoard: {\n                ...prevState.newBoard,\n                backgroundId: backgroundId + num,\n            }\n        }), console.log(this.state.newBoard.backgroundId))\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            newBoard: {\n                ...prevState.newBoard,\n                [field]: value,\n            }\n        }))\n    }\n\n\n    render() {\n        const boards = this.props.boards\n        console.log(boards);\n        return (\n            <section className=\" w-100 flex column center content-center pad-3\">\n                <h1 className=\"fam-1\">Choose Your Board List</h1>\n                <div className=\"boards-gallary flex h-40 w-100 gap-2 wrap\">\n                    {boards && boards.map(board => <Link key={board._id} to={`board/${board._id}`}><MiniBoard board={board} /></Link>)}\n                    <section className={\"miniBoard flex center content-center\"} style={{ backgroundImage: \"url(\" + this.state.newBoard.backgrounds[this.state.newBoard.backgroundId] + \")\" }}>\n                        <form className=\"add-board\" onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.onCreateBoard()\n                        }}>\n                            <input type=\"text\" name=\"title\" onChange={this.handleChange} placeholder=\"Board title...\" />\n                       \n\n                                <div className=\"change-img-container flex space-between\">\n\n                                    <span className=\"change-img\" onClick={() => { this.changeImg(-1) }}>{'<'}</span>\n                                    <button>Create board</button>\n                                    <span className=\"change-img\" onClick={() => { this.changeImg(1) }}>{'>'}</span>\n                                </div>\n                        </form>\n                    </section>\n                    {!boards && <h1 >No boards to show</h1>}\n                </div>\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        boards: state.boardModule.boards\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    query\n}\nexport const BoardList = connect(mapStateToProps, mapDispatchToProps)(_BoardList)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/userActions.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/reviewActions.js",["251","252"],"import { reviewService } from '../../services/reviewService'\r\nimport { userService } from '../../services/userService'\r\nimport { socketService, SOCKET_EVENT_REVIEW_ADDED } from '../../services/generalService/socketService'\r\n\r\n\r\nexport function loadReviews() {\r\n  return async dispatch => {\r\n    try {\r\n      const reviews = await reviewService.query()\r\n      dispatch({ type: 'SET_REVIEWS', reviews })\r\n\r\n      // socketService.on(SOCKET_EVENT_REVIEW_ADDED, review =>{\r\n      //   dispatch({ type: 'ADD_REVIEW', review })\r\n      // })\r\n\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in loadReviews', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addReview(review) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedReview = await reviewService.add(review)\r\n      dispatch({ type: 'ADD_REVIEW', review: addedReview })\r\n\r\n      const score = await userService.increaseScore()\r\n      dispatch({ type: 'SET_SCORE', score })\r\n      \r\n    } catch (err) {\r\n      console.log('ReviewActions: err in addReview', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeReview(reviewId) {\r\n  return async dispatch => {\r\n    try {\r\n      await reviewService.remove(reviewId)\r\n      dispatch({ type: 'REMOVE_REVIEW', reviewId })\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in removeReview', err)\r\n    }\r\n  }\r\n}\r\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/boardsAction.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/userService.js",["253"],"// import { storageService } from './asyncStorageService'\r\nimport { httpService } from './generalService/httpService'\r\nconst SCORE_FOR_REVIEW = 10\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getUsers,\r\n    getById,\r\n    remove,\r\n    update,\r\n    getLoggedinUser\r\n}\r\n\r\nwindow.userService = userService\r\n// Note: due to async, must run one by one...\r\n// userService.signup({fullname: 'Puki Norma', username: 'user1', password:'123',score: 100, isAdmin: false})\r\n// userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 100, isAdmin: true})\r\n\r\nfunction getUsers() {\r\n    // return storageService.query('user')\r\n    return httpService.get(`user`)\r\n}\r\n\r\nfunction getById(userId) {\r\n    // return storageService.get('user', userId)\r\n    return httpService.get(`user/${userId}`)\r\n}\r\nfunction remove(userId) {\r\n    // return storageService.remove('user', userId)\r\n    return httpService.delete(`user/${userId}`)\r\n}\r\n\r\nasync function update(user) {\r\n    // return storageService.put('user', user)\r\n    user = await httpService.put(`user/${user._id}`, user)\r\n    // Handle case in which admin updates other user's details\r\n    if (getLoggedinUser()._id === user._id) _saveLocalUser(user)\r\n}\r\n\r\nasync function login(userCred) {\r\n    // const users = await storageService.query('user')\r\n    // const user = users.find(user => user.username === userCred.username)\r\n    // return _saveLocalUser(user)\r\n\r\n    const user = await httpService.post('auth/login', userCred)\r\n    if (user) return _saveLocalUser(user)\r\n}\r\nasync function signup(userCred) {\r\n    // const user = await storageService.post('user', userCred)\r\n    const user = await httpService.post('auth/signup', userCred)\r\n    return _saveLocalUser(user)\r\n}\r\nasync function logout() {\r\n    sessionStorage.clear()\r\n    return await httpService.post('auth/logout')\r\n}\r\nfunction _saveLocalUser(user) {\r\n    sessionStorage.setItem('loggedinUser', JSON.stringify(user))\r\n    return user\r\n}\r\n\r\nfunction getLoggedinUser() {\r\n    return JSON.parse(sessionStorage.getItem('loggedinUser'))\r\n}\r\n\r\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/socketService.js",["254"],"import io from 'socket.io-client'\nimport {httpService} from './httpService'\n\nexport const SOCKET_EMIT_USER_WATCH = 'user-watch';\nexport const SOCKET_EVENT_USER_UPDATED = 'user-updated';\nexport const SOCKET_EVENT_REVIEW_ADDED = 'review-added';\n\n\nconst baseUrl = (process.env.NODE_ENV === 'production')? '' : '//localhost:3030'\n// export const socketService = createSocketService()\nexport const socketService = createSocketService()\n\nwindow.socketService = socketService\n\nvar socketIsReady = false;\n// socketService.setup()\n\n\nfunction createSocketService() {\n  var socket = null;\n  const socketService = {\n    async setup() {\n      if (socket) return\n      await httpService.get('setup-session')\n      socket = io(baseUrl, { reconnection: false})\n      socketIsReady = true;\n    },\n    async on(eventName, cb) {\n      if (!socket) await socketService.setup()\n      socket.on(eventName, cb)\n    },\n    async off(eventName, cb=null) {\n      if (!socket) await socketService.setup()\n      if (!cb) socket.removeAllListeners(eventName)\n      else socket.off(eventName, cb)\n    },\n    async emit(eventName, data) {\n      if (!socket) await socketService.setup()\n      socket.emit(eventName, data)\n    },\n    terminate() {\n      socket = null\n      socketIsReady = false\n    }\n  }\n  return socketService\n}\n\n// eslint-disable-next-line\nfunction createDummySocketService() {\n  var listenersMap = {}\n  const socketService = {\n    listenersMap,\n    setup() {\n      listenersMap = {}\n    },\n    terminate() {\n      this.setup()\n    },\n    on(eventName, cb) {\n      listenersMap[eventName] = [...(listenersMap[eventName]) || [], cb]\n    },\n    off(eventName, cb) {\n      if (!listenersMap[eventName]) return\n      if (!cb) delete listenersMap[eventName]\n      else listenersMap[eventName] = listenersMap[eventName].filter(l => l !== cb)\n    },\n    emit(eventName, data) {\n      if (!listenersMap[eventName]) return\n      listenersMap[eventName].forEach(listener => {\n        listener(data)\n      })\n    },\n    debugMsg() {\n      this.emit('chat addMsg', {from: 'Someone', txt: 'Aha it worked!'})\n    },\n  }\n  return socketService\n}\n\n\n// Basic Tests\nfunction cb(x) {console.log(x)}\nsocketService.on('baba', cb)\nsocketService.on('mama', cb)\nsocketService.on('lala', cb)\nsocketService.emit('baba', 'DATA')\n// socketService.off('baba', cb)\n\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/Upload.jsx",["255","256"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskList.jsx",["257","258"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/reviewService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/boardService.js",["259","260"],"import { utilService } from './generalService/utilService.js'\r\nimport { storageService } from './generalService/asyncStorageService.js'\r\nimport {httpService} from '../services/generalService/httpService.js'\r\n\r\nwindow.storageService = storageService;\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    update,\r\n    add,\r\n    getGroupById,\r\n    getTaskById,\r\n    getGroupIdxById,\r\n    checklistPreview,\r\n    getTaskIdxById,\r\n    checklistPrecent,\r\n    updateTaskAtBoard\r\n}\r\n\r\n\r\nfunction query() {\r\n    // return storageService.query(STORAGE_KEY)\r\n    return httpService.get('board')\r\n}\r\n\r\nfunction getById(boardId) {\r\n    // const board = storageService.get(STORAGE_KEY, boardId);\r\n    // return board\r\n    return httpService.get(`board/${boardId}`)\r\n\r\n}\r\n\r\nfunction remove(boardId) {\r\n    return httpService.delete(`board/${boardId}`)\r\n}\r\n\r\nasync function add(title, background) {\r\n    console.log(title,background)\r\n    // const newBoard = _createBoard()\r\n    // const savedBoard = storageService.post(STORAGE_KEY, newBoard)\r\n    // return savedBoard\r\n    const board = {title ,style:{background}}\r\n    console.log(board)\r\n    const res = await httpService.post(`board`, board)\r\n    return res\r\n}\r\n\r\nasync function update(board) {\r\n    // return storageService.put(STORAGE_KEY, board)\r\n    board.activities = []\r\n    \r\n    const res = await httpService.put(`board/${board._id}`, board)\r\n    return res\r\n\r\n}\r\n\r\n//task crud\r\nfunction getGroupById(board, groupId) {\r\n    return board.groups.find(group => group.id === groupId);\r\n}\r\n\r\nfunction getGroupIdxById(board, groupId) {\r\n    return board.groups.findIndex(group => group.id === groupId);\r\n}\r\n\r\nfunction getTaskIdxById(group, taskId) {\r\n    return group.tasks.findIndex(task => task.id === taskId);\r\n}\r\n\r\nfunction getTaskById(group, taskId) {\r\n    return group.tasks.find(task => task.id === taskId)\r\n}\r\n\r\nfunction checklistPreview(task) {\r\n    const checklists = task.checklists\r\n    let isDone = false\r\n    let allTodos = 0;\r\n    let doneTodos = 0;\r\n    checklists.forEach(checkList => {\r\n        allTodos += checkList.todos.length;\r\n        checkList.todos.forEach(todo => {\r\n            if (todo.isDone) doneTodos++\r\n        })\r\n    });\r\n    if (doneTodos === allTodos && allTodos) isDone = true;\r\n    const str = `${doneTodos}/${allTodos}`\r\n    const res = { str, isDone}\r\n    return res\r\n}\r\n\r\nfunction checklistPrecent(checklist){\r\n    let doneTodos = 0;\r\n    checklist.todos.forEach(todo => {\r\n        if(todo.isDone) doneTodos++\r\n    })\r\n    const precent = (doneTodos / checklist.todos.length) * 100 \r\n    \r\n    return precent\r\n}\r\n\r\nfunction _updateTaskAtGroup(group, updateTask){\r\n    const idx = group.tasks.findIndex( task => {\r\n        task.id = updateTask.id;\r\n    })\r\n    group.tasks.splice(idx, 1, updateTask);\r\n    return group;\r\n}\r\n\r\nfunction _updateGroupAtBoard( board ,updateGroup){\r\n    const idx = getGroupIdxById(board, updateGroup.id)\r\n    board.groups[idx] = updateGroup;\r\n    return board;\r\n}\r\n\r\nfunction updateTaskAtBoard(board,group, updateTask){\r\n    const updateGroup =  _updateTaskAtGroup(group, updateTask);\r\n    const updateBoard = _updateGroupAtBoard(board, updateGroup);\r\n    return updateBoard;\r\n}","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/httpService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/cloudinaryService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/utilService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/asyncStorageService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskPreview.jsx",["261","262","263","264","265","266","267"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/data/board.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalWrapper.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/Overlay.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MiniBoard.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/UserPreview.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MembersBoard.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx",["268"],"import { MembersBoard } from '../MembersBoard';\nimport { MdKeyboardArrowDown } from 'react-icons/md'\nimport { RiDashboardLine } from 'react-icons/ri'\nimport { AiOutlineStar } from 'react-icons/ai'\nimport { Component } from 'react';\nimport { BoardMembersModal } from './BoardMembersModal'\n\n\n\nexport class BoardNavbar extends Component {\n    state = {\n        title: this.props.board.title,\n        members: this.props.board.members\n    }\n\n\n    onAddMemberToBoard = (addedMember) => {\n        const { members } = this.state\n        const memberIdx = members.findIndex(member => member._id === addedMember._id)\n        if (memberIdx !== -1) {\n            members.splice(memberIdx, 1)\n        }\n        else members.push(addedMember)\n        const copyBoard = { ...this.props.board }\n        copyBoard.members = members\n        console.log(members)\n        this.props.updateBoard(copyBoard)\n    }\n\n    isMemberChecked = (memberCheck) => {\n        const memberIdx = this.state.members.findIndex(member => member._id === memberCheck._id)\n        if (memberIdx !== -1) {\n            return 'checked'\n        }\n        else return ''\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n    onChangeBoardName = () => {\n        const board = this.props.board\n        board.title = this.state.title\n        this.props.updateBoard(board)\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n        this.setState({ [field]: value })\n    }\n    render() {\n        const { board, onUpdate } = this.props\n        if (!board) return <div>Loading...</div>\n        return (\n            <nav className=\"board-navbar flex space-between font-1 c-white fam-1 mb-03\">\n                <ul className=\"left-bar flex center space-evenly \">\n                    <li className=\"btn-board\"><RiDashboardLine />Board<MdKeyboardArrowDown /></li>\n                    <li className=\"btn-board \"><AiOutlineStar /></li>\n                    <li className=\"btn-board bold\"><form onSubmit={(ev) => {\n                        ev.preventDefault()\n                        this.onChangeBoardName(ev)\n                    }}>\n                        <input type=\"text\" className=\"app-input nav-board-input font-w2 font-m lh-20 \" name=\"title\" onChange={this.handleChange} value={this.state.title} onBlur={this.onChangeBoardName} />\n                    </form></li>\n                    <li className=\"btn-board\">Visiblity</li>\n                    <li className=\"members-wrap\">\n                        <li className=\"btn-board \" onClick={() => { this.toggleModal('board-members-wrap-modal') }}>Invite</li>\n                        <BoardMembersModal users={this.props.users} isMemberChecked={this.isMemberChecked} onAddMemberToBoard={this.onAddMemberToBoard} toggleModal={() => { this.toggleModal() }} />\n                    </li>\n                    <li className=\"btn-board\" ><MembersBoard /></li>\n                </ul>\n                <ul className=\"right-bar flex center\">\n                    <li className=\"btn-board\">Show-menu</li>\n                </ul>\n            </nav>\n        )\n    }\n}\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx",["269","270","271","272","273"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { boardService } from '../../../services/boardService.js'\nimport { remove, add, loadBoard, update } from '../../../store/actions/boardsAction.js';\nimport onClickOutside from \"react-onclickoutside\";\nimport { BsCardChecklist } from 'react-icons/bs'\nimport { GrTextAlignFull } from 'react-icons/gr'\nimport { FaRegCommentDots } from 'react-icons/fa'\nimport { utilService } from '../../../services/generalService/utilService.js';\nimport { CheckList } from './CheckList';\nimport { ActionList } from './action/ActionList';\nimport { UserPreview } from '../UserPreview.jsx';\nimport { RiDeleteBin6Line } from 'react-icons/ri'\n\n// import {TaskTitle} from '../taskDetails/TaskTitle';\n\n\n\nclass _TaskDetails extends Component {\n    state = {\n        group: null,\n        task: null,\n        onFocus: false,\n        overlay: false\n    }\n\n    componentDidMount() {\n        const { boardId, taskId, groupId } = this.props.match.params;\n        const board = { ...this.props.board };\n        const group = boardService.getGroupById(board, groupId);\n        const task = boardService.getTaskById(group, taskId);\n        this.addClassName();\n        this.setState({ ...this.state, group, task })\n    }\n\n\n\n    //Destroyed the check list! don't use it! -tamir&naav- <3\n\n    // componentDidUpdate(prevProps) {\n    //     if (this.props !== prevProps) {\n    //         console.log('props change');\n    //     }\n    // }\n\n\n    addClassName() {\n        document.querySelector('.board').classList.add('max-screen');\n    };\n\n    addActivity = (board, txt = '') => {\n        const { loggedInUser } = this.props\n        const task = { ...this.state.task }\n        const activity = `${loggedInUser.fullname}${txt}`\n        const copyboard = JSON.parse(JSON.stringify(board))\n        // board.activities = []\n        copyboard.activities.unshift({ id: utilService.makeId(), txt: activity, createdAt: Date.now(), byMember: loggedInUser, task })\n        console.log('board after', copyboard.activities)\n        console.log('copy board', copyboard)\n        return copyboard;\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            task: {\n                ...prevState.task,\n                [field]: value,\n            }\n        }))\n    }\n\n    handleClickOutside = evt => {\n        // ..handling code goes here...\n    };\n\n    updateTask = (txt) => {\n        console.log('here')\n        if (!this.state.task.title) return;\n        let copyBoard = { ...this.props.board };\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\n        const taskIdx = boardService.getTaskIdxById(this.state.group, this.state.task.id)\n        copyBoard.groups[groupIdx].tasks[taskIdx] = this.state.task\n        copyBoard = this.addActivity(copyBoard, txt)\n        this.props.update(copyBoard)\n    }\n    \n    updateTaskLabel= (updateTask) => {\n        console.log('prevLabel: ',this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\n        const task  = this.state.task;\n        task.labelIds = updateTask.labelIds;\n        this.updateTask()\n        console.log('Label: ',this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\n    }\n\n    onSaveDueDate = (date) => {\n        const { task } = this.state;\n        task.dueDate = date\n        this.updateTask()\n    }\n\n    updateTaskState = (task) => {\n        this.setState({ task })\n    }\n\n    onAddCheckList = (task) => {\n        if (!task.checklists) {\n            task.checklists = [];\n        }\n        task.checklists.push({ id: utilService.makeId(), title: 'Checklist', todos: [] })\n        this.setState({ task }, () => {\n            this.updateTask('Added Checklist')\n        })\n    }\n\n    onRemoveCheckList = (checklistIdx) => {\n        const { task } = { ...this.state }\n        // const task = JSON.parse(JSON.stringify(this.state.task))\n        task.checklists.splice(checklistIdx, 1)\n        this.setState({ task }, this.updateTask)\n    }\n\n    onUpdateChecklist = (checklist) => {\n        this.state.task.checklists.map(cl => cl.id === checklist.id ? checklist : cl)\n        this.setState({ task: { ...this.state.task } }, this.updateTask)\n    }\n\n    onDeleteTask = () => {\n        const { boardId } = this.props.match.params;\n        const copyboard = this.props.board\n        const { task, group } = this.state\n        group.tasks.splice(boardService.getTaskIdxById(group, task.id), 1)\n        copyboard.groups[boardService.getGroupIdxById(copyboard, group.id)] = group\n        this.props.update(copyboard)\n        this.props.history.push(`/board/${boardId}`)\n    }\n\n    onAddMemberToTask = (addedMember) => {\n        const { task } = this.state;\n        const memberIdx = task.members.findIndex(member => member._id === addedMember._id)\n        if (memberIdx !== -1) {\n            task.members.splice(memberIdx, 1)\n        }\n        else task.members.push(addedMember)\n        this.updateTask()\n    }\n\n\n    onSaveDueDate = (date) => {\n        const { task } = this.state;\n        task.dueDate = date\n        \n        this.updateTask()\n    }\n\n    isMemberChecked = (memberCheck) => {\n        const { task } = this.state;\n        const memberIdx = task.members.findIndex(member => member._id === memberCheck._id)\n        if (memberIdx !== -1) {\n            return 'checked'\n        }\n        else return ''\n    }\n\n    isDueDateDone = (val) => {\n        const { task } = this.state;\n        task.isDone = val\n        this.updateTask()\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n    openOverlay = () => {\n        this.setState({ ...this.state, overlay: 'details-overlay' });\n    }\n\n    addImgToTask = (imgUrl) => {\n        const { task } = this.state;\n        task.imgUrl = imgUrl\n        this.updateTask()\n    }\n\n\n    closeOverlay = (ev) => {\n        if (!ev.target.classList.contains('btn-action') && !ev.target.classList.contains('btn-act')) {\n            if (ev.target.offsetParent !== undefined && ev.target.offsetParent.classList[0] !== undefined && ev.target.offsetParent.classList[0] === 'task-details') {\n                const modals = document.querySelectorAll('.action-modal');\n                if (modals) {\n                    modals.forEach(\n                        el => el.classList.add('d-none'));\n                }\n                this.setState({ ...this.state, overlay: '' });\n\n            }\n        }\n        // this.setState({ ...this.state, overlay: '' });\n        // if(ev.target.classList.contain('btn-action'))\n    }\n\n    onAddLabelTask = (labelId) => {\n        const task = this.state;\n        if (!task.labels) {\n            task.labels = [];\n        }\n        task.labels.push(labelId);\n    }\n\n    onSendComment = (txt) => {\n        const { loggedInUser } = this.props\n        const { task } = this.state;\n        task.comments.unshift({ id: utilService.makeId(), txt, createdAt: Date.now(), byMember: loggedInUser })\n        this.updateTask()\n    }\n\n    onRemoveComment = (commentIdx) => {\n        const { task } = this.state;\n        task.comments.splice(commentIdx, 1)\n        this.updateTask()\n    }\n\n    moveTask = (moveTo) => {\n        if (moveTo !== this.state.group.id) {\n            const copyBoard = { ...this.props.board }\n            copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.state.group.id)].tasks.splice(\n                boardService.getTaskIdxById(this.state.group, this.state.task.id), 1)\n            copyBoard.groups[moveTo].tasks.push(this.state.task)\n            this.setState({ group: copyBoard.groups[moveTo] })\n            this.props.update(copyBoard)\n        }\n        // this.props.history.push(`/board/${copyBoard._id}`)\n    }\n\n\n\n    render() {\n        const { task } = this.state;\n        const { board, loggedInUser } = this.props\n        if (!task) return <h1>Loading...</h1>\n        return (\n            <section className={`task-details w-50 flex bg-modal c-stand fam-1 pad-1 ${this.state.overlay}`}\n                onClick={(ev) => { this.closeOverlay(ev) }}>\n                <div className=\"info-task flex column w-70 h-100 content-start\">\n                    {/* Title */}\n                    <form className=\"task-title flex column content-start pb-2 w-100\" onSubmit={(ev) => {\n                        ev.preventDefault()\n                        this.updateTask()\n                    }}>\n                        <div className=\"task-title flex center h-33\">\n                            <label\n                                htmlFor=\"title\"\n                                className=\"font-3 flex center w-100\">\n                                <BsCardChecklist />\n                                <input\n                                    onBlur={this.updateTask}\n                                    type=\"text\"\n                                    value={task.title}\n                                    name=\"title\"\n                                    className=\"input-details title-task-input\"\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                        </div>\n                        <h3 className=\"task-list-title fam-1 font-2 left-self h-20 center\">in list{' '}\n                            <span className=\"t-decor\">{this.state.group.title}</span>\n                        </h3>\n                    </form>\n\n                    <section className=\"info-task flex wrap gap-1 center mb-1\">\n                        <div className=\"task-members\">\n                            {task.members.length > 0 && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">MEMBERS</h3>}\n                            <ul className=\"flex center gap-xs\">\n                                {task.members.map(member => {\n                                    return <UserPreview key={member._id} user={member} />\n                                })}\n                                {task.members.length > 0 &&\n                                    <span onClick={() => { this.toggleModal('members-wrap-modal'); this.openOverlay() }} className=\"btn-act  user-preview flex center content-center font-m bg-btn cur-pointer \">+</span>}\n                            </ul>\n                        </div>\n                        <div className=\"task-labels flex column center wrap\">\n                            {(task.labelIds && task.labelIds.length > 0) && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">LABELS</h3>}\n                            <ul className=\"flex center wrap\">\n                                {task.labelIds && task.labelIds.map(labelId => {\n                                    const label = board.labels.find(label => {\n                                        return label.id === labelId;\n                                    })\n                                    if (label) {\n                                        return (\n                                            <div\n                                                key={label.id}\n                                                className={`details-label bold flex center pad-xs mb-03`} onClick={() => { this.toggleModal('label-wrap-modal') }} style={{ backgroundColor: label.color }}\n                                            >\n                                                {label.title}\n                                            </div>\n                                        )\n                                    }\n                                })}\n                                {task.labelIds && task.labelIds.length > 0 && <span onClick={() => { this.toggleModal('label-wrap-modal'); this.openOverlay(); }} className=\"details-label bold flex center pad-xs mb-03 bg-btn btn-act cur-pointer\">+</span>}\n                            </ul>\n                        </div>\n                        {task.dueDate && <div className=\"task-duedate flex center column\">\n                            <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">DUE DATE</h3>\n                            <div className=\"flex\">\n                                <input onChange={(ev) => { this.isDueDateDone(ev.target.checked) }} checked={task.isDone} type=\"checkbox\" />\n                                <p>{Intl.DateTimeFormat('IL-il').format(task.dueDate)}</p>\n                                {task.isDone && <div className=\"complete-duedate\">complete</div>}\n                            </div>\n                        </div>}\n                    </section>\n\n                    <section className=\"desc-section\">\n                        <div className=\"desc-header flex row mb-1\">\n                            <GrTextAlignFull /><label>Description</label>\n                        </div>\n                        <form onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.updateTask()\n                        }}>\n\n                            <textarea placeholder=\"Add a description for this task...\" onBlur={this.updateTask} type=\"textArea\" value={task.description} name=\"description\" className=\"w-90 input-details margin-content\" onChange={this.handleChange} />\n                        </form>\n                    </section>\n                    {task.imgUrl && <img className=\"details-img\" src={task.imgUrl} />}\n                    {utilService.isFalse(task.checklists) && <ul className=\"todos clean-list mb-3 \">\n                        {task.checklists.map((checklist, idx) => {\n                            return <CheckList\n                                key={checklist.id}\n                                onRemoveCheckList={this.onRemoveCheckList}\n                                updateChecklist={this.onUpdateChecklist}\n                                idx={idx}\n                                checklists={task.checklists}\n                                handleChange={this.handleChange}\n                                updateTask={this.updateTask}\n                                checklist={checklist}\n                                updateTaskState={this.updateTaskState}\n                                task={task}\n                            />\n                        })}\n                    </ul>}\n\n                    <section className=\"comment-section\">\n                        <div className=\"desc-header flex row mb-1\">\n                            <FaRegCommentDots /><label>Comments</label>\n                        </div>\n                        <div className=\"new-comment flex center content-gap\">\n                            <UserPreview user={loggedInUser} />\n                            <form onSubmit={(ev) => {\n                                ev.preventDefault()\n                                this.onSendComment(ev.target[0].value)\n                            }}>\n                                <input className=\"comment-input\" placeholder=\"Write a comment...\" name=\"txt\">\n                                </input>\n                                <button className=\"btn-send-comment\">Send</button>\n                            </form>\n                        </div>\n\n                        {task.comments && <ul className=\"comments clean-list\">\n                            {task.comments.map((comment, idx) => {\n                                return <li className=\"full-comment flex column\">\n                                    <div className=\"flex space-between\">\n                                        <div className=\"content-gap flex center\">\n                                            <UserPreview user={comment.byMember} />\n                                            <div className=\"commenter-name\">{comment.byMember.fullname}</div>\n                                            <small>{utilService.timeAgo(comment.createdAt)}</small>\n                                        </div>\n                                        <div className='btn-del-comment' onClick={() => { this.onRemoveComment(idx) }}><RiDeleteBin6Line /></div>\n                                    </div>\n                                    <div className=\"comment-gap\">\n                                        <p className=\"comment-txt \">{comment.txt}</p>\n                                    </div>\n                                </li>\n                            })}\n                        </ul>}\n                    </section>\n                </div>\n                <ActionList\n                    openOverlay={() => { this.openOverlay() }}\n                    onSaveDueDate={this.onSaveDueDate}\n                    onDeleteTask={this.onDeleteTask}\n                    toggleModal={this.toggleModal}\n                    isMemberChecked={this.isMemberChecked}\n                    onAddMemberToTask={this.onAddMemberToTask}\n                    task={task}\n                    group={this.state.group}\n                    onAddCheckList={this.onAddCheckList}\n                    moveTask={this.moveTask}\n                    updateState={() => { this.updateState() }}\n                    updateTask={this.updateTask}\n                    addImgToTask={this.addImgToTask}\n                    updateTaskLabel={this.updateTaskLabel}\n                />\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    loadBoard,\n    update\n}\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(_TaskDetails)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx",["274","275","276"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { MdLabelOutline } from 'react-icons/md'\nimport { AiOutlineClockCircle, AiOutlineCheckSquare, AiOutlineDelete } from 'react-icons/ai'\nimport { BiCopy } from 'react-icons/bi'\nimport { FiUsers } from 'react-icons/fi'\nimport { BsImage, BsArrowRight } from 'react-icons/bs'\nimport { LabelModal } from './actionModal/LabelModal';\nimport { MembersModal } from './actionModal/MembersModal'\nimport { DueDateModal } from './actionModal/DueDateModal'\nimport { MoveModal } from './actionModal/MoveModal'\nimport { CopyModal } from './actionModal/CopyModal'\nimport { withRouter } from \"react-router\";\nimport { Upload } from '../../../Upload'\n\n\nclass _ActionList extends Component {\n    state = {\n        task: null\n    }\n\n    componentDidMount() {\n\n        this.setState({\n            task: this.props.task\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n    }\n\n    closeDetails = () => {\n        const boardId = this.props.match.params.boardId;\n        this.props.history.push(`/board/${boardId}`)\n    }\n    render() {\n        const { task } = this.state\n        if (!task) return <h1>Loading...</h1>\n        return (\n            <div className=\"menu-task flex column w-40 content-start right\">\n                <div className=\"close-details fam-2 font-1 bold pad-1 cur-pointer\" onClick={() => this.closeDetails()}>X</div>\n                <div className=\"details-action flex column center pad-1 w-80\">\n                    <label htmlFor=\"actions\" className=\"font-m pb-3\">ACTIONS</label>\n                    <ul className=\"action-menu flex column w-100 clean-list font-m pad-0 fw-2\">\n\n                        <li className=\"label-wrap\" onClick={() => this.props.openOverlay('label-wrap-modal')}>\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('label-wrap-modal') }}><MdLabelOutline />Labels</div>\n                            <LabelModal toggleModal={() => { this.props.toggleModal() }} updateTaskLabel={this.props.updateTaskLabel}\n                                task={task} />\n                        </li>\n\n                        <ul className=\"members-wrap\">\n                            <li className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('members-wrap-modal') }}><FiUsers className=\"action-icon\" />Members</li>\n                            <MembersModal isMemberChecked={this.props.isMemberChecked} onAddMemberToTask={this.props.onAddMemberToTask} toggleModal={() => { this.props.toggleModal() }} />\n                        </ul>\n\n                        <li className=\"duedate-wrap\">\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClockCircle className=\"action-icon\" />DueDate</div>\n                            <DueDateModal onSaveDueDate={this.props.onSaveDueDate} toggleModal={() => { this.props.toggleModal() }} />\n                        </li>\n\n                        <li onClick={() => { this.props.onAddCheckList(task) }} className=\"btn-action\"><AiOutlineCheckSquare className=\"action-icon\" />Checklist</li>\n                        <li onClick={(ev) => { ev.stopPropagation() }} className=\"no-modal-action\"><Upload addImgToTask={this.props.addImgToTask} /></li>\n                        <li className=\"move-wrap\">\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><BsArrowRight />Move</div>\n                            <MoveModal group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\n                        </li>\n                        <li className=\"copy-wrap\">\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('copy-wrap-modal') }}><BiCopy className=\"action-icon\" />Copy</div>\n                            <CopyModal className=\"action-icon\" group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\n                        </li>\n                        <li onClick={() => { this.props.onDeleteTask() }} className=\"btn-action btn-delete\"><AiOutlineDelete className=\"action-icon\" />Delete</li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const ActionList = connect(mapStateToProps, mapDispatchToProps)(withRouter(_ActionList));\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/systemAction.js",["277"],"import { utilService } from '../../services/generalService/utilService';\n\nexport function loading() { // Action Creator\n    return async dispatch => {\n        try {\n            dispatch('LOADING_DONE');\n            dispatch('LOADING_START');\n            setTimeout(() => {\n                dispatch('LOADING_DONE');\n            }, 1500);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport function toggleLabel(toggleValue) {\n    return async dispatch => {\n        try {\n            const action = {\n                type: 'TOGGLE_LABEL',\n                value: toggleValue\n            }\n            dispatch(action)\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx",["278","279","280"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { FiEdit2 } from 'react-icons/fi'\nimport { withRouter } from \"react-router\";\nimport { update } from '../../../../store/actions/boardsAction';\nimport { boardService } from '../../../../services/boardService';\n\nclass _LabelTask extends Component {\n    state = {\n        isDisable: true,\n        title: this.props.label.title ? this.props.label.title:'',\n        task: null,\n        group: null\n    }\n\n    componentDidMount() {\n        const { taskId, groupId } = this.props.match.params;\n        const board = this.props.board;\n        const group = boardService.getGroupById(board, groupId);\n        const task = boardService.getTaskById(group, taskId);\n        this.setState({ ...this.state, task: task, group: group });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props !== prevProps) {\n            const { boardId, taskId, groupId } = this.props.match.params;\n            const board = { ...this.props.board };\n            const group = boardService.getGroupById(board, groupId);\n            const task = boardService.getTaskById(group, taskId);\n            this.setState({ ...this.state, task: task, group: group });\n        }\n\n    }\n\n    toggleLabel(labelId) {\n        const { task, group } = this.state;\n        const board = { ...this.props.board };\n        if (!task.labelIds) {\n            task.labelIds = []\n        }\n        const labelIdx = task.labelIds.findIndex(currLabelId => currLabelId === labelId);\n        if (labelIdx > -1) {\n            task.labelIds.splice(labelIdx, 1)\n        } else task.labelIds.push(labelId)\n        const updateBoard = boardService.updateTaskAtBoard(board, group, task);\n        this.props.update(updateBoard)\n    }\n\n    toggleDisable() {\n        console.log(this.state.isDisable);\n        this.setState({\n            isDisable: !this.state.isDisable\n        })\n    }\n\n    borderLabel = (task, labelId) => {\n        if (task.labelIds) {\n            if (task.labelIds.includes(labelId))\n                return 'border';\n        }\n        return '';\n    }\n\n    handleChange = ({ target }) => {\n        const value = target.value;\n        this.setState({...this.state,\n            title: value\n        });\n        const label = this.props.label;\n        label.title = this.state.title;\n        this.updateLabelBoard(label);\n    }\n\n    updateLabelBoard = () => {\n        const { board, label } = this.props;\n        const idx = board.labels.findIndex(currLabel => currLabel.id === label.id);\n        board.labels.splice(idx,1, label);\n        this.props.update(board);\n    };\n\n    render() {\n        const { label } = this.props;\n        console.log(label)\n        const { task } = this.state;\n        let className;\n        if (task) {\n            className = this.borderLabel(task, label.id);\n        }\n\n        return (\n            <div className=\"label flex gap-2\" data-label={label.id}>\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    value={this.state.title}\n                    style={{ background: `${label.color}` }}\n                    className={`label-input label-${label.id} ${this.state.isDisable} ${className} cur-pointer`}\n                    onChange={this.handleChange}\n                    onClick={() => this.toggleLabel(label.id)}\n                    maxLength = {13}\n                />\n                <span onClick={() => { this.toggleDisable() }} className=\"edit-label\"><FiEdit2 /> </span>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const LabelTask = connect(mapStateToProps, mapDispatchToProps)(withRouter(_LabelTask))","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Login.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx",["281"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MoveModal.jsx",["282","283"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport { LabelTask } from '../LabelTask'\nimport { update } from '../../../../../store/actions/boardsAction';\nimport { boardService } from '../../../../../services/boardService'\n\n\nclass _MoveModal extends Component {\n    state = {\n        moveTo: null\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n\n    \n    // moveTask = () => {\n    //     if (this.state.moveTo !== this.props.group.id) {\n    //         const copyBoard = { ...this.props.board }\n    //         copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.props.group.id)].tasks.splice(\n    //             boardService.getTaskIdxById(this.props.group, this.props.task.id), 1)\n    //         copyBoard.groups[this.state.moveTo].tasks.push(this.props.task)\n    //         this.props.update(copyBoard)\n    //     }\n    //     // this.props.history.push(`/board/${copyBoard._id}`)\n    // }\n\n    handleChange = ({ target }) => {\n        console.log(target.value)\n        this.setState({ moveTo: target.value })\n    }\n    render() {\n        const {moveTask} = this.props\n        return <div className=\"action-modal move-wrap-modal d-none p-abs flex\">\n            <ModalAction>\n                <div className=\"move-modal w-100 p-abs flex column pad-1\">\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\n                        <h1 className=\"fam-1 font-1 \">Move to</h1>\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><AiOutlineClose /></span>\n                    </div>\n                    <div className=\"action-content w-100\">\n                        <form onSubmit={(ev) => {\n                            moveTask(this.state.moveTo)\n                            ev.preventDefault()\n                        }}>\n                            <select onChange={this.handleChange}>\n                                {this.props.board.groups.map((group, idx) => {\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\n                                })}\n                                {this.props.board.groups.map((group, idx) => {\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\n                                })}\n                            </select>\n                            <button className=\"btn-copy-move\">Move</button>\n                        </form>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const MoveModal = connect(mapStateToProps, mapDispatchToProps)(_MoveModal)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/CopyModal.jsx",["284","285"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport { LabelTask } from '../LabelTask'\nimport { update } from '../../../../../store/actions/boardsAction';\nimport { boardService } from '../../../../../services/boardService'\nimport { utilService } from '../../../../../services/generalService/utilService';\n\n\nclass _CopyModal extends Component {\n    state = {\n        copyTo: null\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n\n    copyTask = () => {\n        if (this.state.copyTo !== this.props.group.id) {\n            const copyBoard = { ...this.props.board }\n            const task ={...this.props.task}\n            task.id = utilService.makeId()\n            copyBoard.groups[this.state.copyTo].tasks.push(task)\n            this.props.update(copyBoard)\n        }\n    }\n\n    handleChange = ({ target }) => {\n        console.log(target.value)\n        this.setState({ copyTo: target.value })\n    }\n    render() {\n        return <div className=\"action-modal copy-wrap-modal d-none p-abs flex\">\n            <ModalAction>\n                <div className=\"label-modal p-abs flex column pad-1\">\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center content-end gap-5 w-70\">\n                        <h1 className=\"fam-1 font-1 \">Copy to</h1>\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('copy-wrap-modal') }}><AiOutlineClose /></span>\n                    </div>\n                    <div className=\"action-content\">\n                        <form onSubmit={(ev) => {\n                            this.copyTask()\n                            ev.preventDefault()\n                        }}>\n                            <select onChange={this.handleChange}>\n                                {this.props.board.groups.map((group) => {\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\n                                })}\n                                {this.props.board.groups.map((group, idx) => {\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\n                                })}\n                            </select>\n                            <button>Copy</button>\n                        </form>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    update\n}\n\n\nexport const CopyModal = connect(mapStateToProps, mapDispatchToProps)(_CopyModal)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/GroupModal.jsx",[],{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","severity":1,"message":"291","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":14},{"ruleId":"290","severity":1,"message":"294","line":3,"column":10,"nodeType":"292","messageId":"293","endLine":3,"endColumn":17},{"ruleId":"290","severity":1,"message":"295","line":8,"column":27,"nodeType":"292","messageId":"293","endLine":8,"endColumn":36},{"ruleId":"290","severity":1,"message":"296","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":17},{"ruleId":"290","severity":1,"message":"297","line":7,"column":10,"nodeType":"292","messageId":"293","endLine":7,"endColumn":21},{"ruleId":"290","severity":1,"message":"298","line":7,"column":23,"nodeType":"292","messageId":"293","endLine":7,"endColumn":32},{"ruleId":"290","severity":1,"message":"299","line":7,"column":34,"nodeType":"292","messageId":"293","endLine":7,"endColumn":46},{"ruleId":"290","severity":1,"message":"300","line":8,"column":10,"nodeType":"292","messageId":"293","endLine":8,"endColumn":19},{"ruleId":"301","severity":1,"message":"302","line":41,"column":11,"nodeType":"303","endLine":41,"endColumn":57},{"ruleId":"301","severity":1,"message":"302","line":51,"column":11,"nodeType":"303","endLine":51,"endColumn":64},{"ruleId":"301","severity":1,"message":"302","line":60,"column":11,"nodeType":"303","endLine":60,"endColumn":60},{"ruleId":"301","severity":1,"message":"302","line":68,"column":11,"nodeType":"303","endLine":68,"endColumn":60},{"ruleId":"290","severity":1,"message":"304","line":6,"column":8,"nodeType":"292","messageId":"293","endLine":6,"endColumn":10},{"ruleId":"290","severity":1,"message":"305","line":7,"column":8,"nodeType":"292","messageId":"293","endLine":7,"endColumn":10},{"ruleId":"290","severity":1,"message":"306","line":8,"column":8,"nodeType":"292","messageId":"293","endLine":8,"endColumn":10},{"ruleId":"290","severity":1,"message":"307","line":9,"column":8,"nodeType":"292","messageId":"293","endLine":9,"endColumn":10},{"ruleId":"290","severity":1,"message":"308","line":10,"column":8,"nodeType":"292","messageId":"293","endLine":10,"endColumn":10},{"ruleId":"290","severity":1,"message":"309","line":11,"column":8,"nodeType":"292","messageId":"293","endLine":11,"endColumn":10},{"ruleId":"290","severity":1,"message":"310","line":12,"column":8,"nodeType":"292","messageId":"293","endLine":12,"endColumn":10},{"ruleId":"290","severity":1,"message":"311","line":13,"column":8,"nodeType":"292","messageId":"293","endLine":13,"endColumn":10},{"ruleId":"290","severity":1,"message":"312","line":14,"column":10,"nodeType":"292","messageId":"293","endLine":14,"endColumn":15},{"ruleId":"290","severity":1,"message":"313","line":3,"column":10,"nodeType":"292","messageId":"293","endLine":3,"endColumn":23},{"ruleId":"290","severity":1,"message":"314","line":3,"column":25,"nodeType":"292","messageId":"293","endLine":3,"endColumn":50},{"ruleId":"290","severity":1,"message":"315","line":3,"column":7,"nodeType":"292","messageId":"293","endLine":3,"endColumn":23},{"ruleId":"290","severity":1,"message":"316","line":43,"column":7,"nodeType":"292","messageId":"293","endLine":43,"endColumn":20},{"ruleId":"290","severity":1,"message":"317","line":6,"column":9,"nodeType":"292","messageId":"293","endLine":6,"endColumn":21},{"ruleId":"290","severity":1,"message":"318","line":31,"column":11,"nodeType":"292","messageId":"293","endLine":31,"endColumn":23},{"ruleId":"290","severity":1,"message":"319","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":25},{"ruleId":"320","severity":1,"message":"321","line":102,"column":58,"nodeType":"322","messageId":"323","endLine":102,"endColumn":60},{"ruleId":"290","severity":1,"message":"324","line":1,"column":10,"nodeType":"292","messageId":"293","endLine":1,"endColumn":21},{"ruleId":"325","severity":1,"message":"326","line":104,"column":45,"nodeType":"327","messageId":"328","endLine":104,"endColumn":47},{"ruleId":"290","severity":1,"message":"329","line":3,"column":10,"nodeType":"292","messageId":"293","endLine":3,"endColumn":18},{"ruleId":"290","severity":1,"message":"330","line":25,"column":32,"nodeType":"292","messageId":"293","endLine":25,"endColumn":40},{"ruleId":"290","severity":1,"message":"331","line":42,"column":24,"nodeType":"292","messageId":"293","endLine":42,"endColumn":29},{"ruleId":"290","severity":1,"message":"332","line":42,"column":31,"nodeType":"292","messageId":"293","endLine":42,"endColumn":35},{"ruleId":"290","severity":1,"message":"333","line":53,"column":37,"nodeType":"292","messageId":"293","endLine":53,"endColumn":48},{"ruleId":"301","severity":1,"message":"302","line":71,"column":45,"nodeType":"303","endLine":71,"endColumn":93},{"ruleId":"325","severity":1,"message":"334","line":80,"column":83,"nodeType":"327","messageId":"335","endLine":80,"endColumn":85},{"ruleId":"290","severity":1,"message":"336","line":26,"column":24,"nodeType":"292","messageId":"293","endLine":26,"endColumn":32},{"ruleId":"290","severity":1,"message":"337","line":3,"column":10,"nodeType":"292","messageId":"293","endLine":3,"endColumn":14},{"ruleId":"290","severity":1,"message":"338","line":6,"column":8,"nodeType":"292","messageId":"293","endLine":6,"endColumn":22},{"ruleId":"290","severity":1,"message":"339","line":29,"column":17,"nodeType":"292","messageId":"293","endLine":29,"endColumn":24},{"ruleId":"325","severity":1,"message":"334","line":285,"column":77,"nodeType":"327","messageId":"335","endLine":285,"endColumn":79},{"ruleId":"301","severity":1,"message":"302","line":325,"column":37,"nodeType":"303","endLine":325,"endColumn":86},{"ruleId":"290","severity":1,"message":"337","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":14},{"ruleId":"290","severity":1,"message":"340","line":2,"column":16,"nodeType":"292","messageId":"293","endLine":2,"endColumn":23},{"ruleId":"290","severity":1,"message":"341","line":8,"column":10,"nodeType":"292","messageId":"293","endLine":8,"endColumn":17},{"ruleId":"290","severity":1,"message":"324","line":1,"column":10,"nodeType":"292","messageId":"293","endLine":1,"endColumn":21},{"ruleId":"290","severity":1,"message":"337","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":14},{"ruleId":"290","severity":1,"message":"340","line":2,"column":16,"nodeType":"292","messageId":"293","endLine":2,"endColumn":23},{"ruleId":"290","severity":1,"message":"339","line":27,"column":21,"nodeType":"292","messageId":"293","endLine":27,"endColumn":28},{"ruleId":"290","severity":1,"message":"324","line":5,"column":9,"nodeType":"292","messageId":"293","endLine":5,"endColumn":20},{"ruleId":"290","severity":1,"message":"342","line":5,"column":10,"nodeType":"292","messageId":"293","endLine":5,"endColumn":19},{"ruleId":"290","severity":1,"message":"317","line":7,"column":10,"nodeType":"292","messageId":"293","endLine":7,"endColumn":22},{"ruleId":"290","severity":1,"message":"342","line":5,"column":10,"nodeType":"292","messageId":"293","endLine":5,"endColumn":19},{"ruleId":"290","severity":1,"message":"317","line":7,"column":10,"nodeType":"292","messageId":"293","endLine":7,"endColumn":22},"no-native-reassign",["343"],"no-negated-in-lhs",["344"],"no-unused-vars","'Chat' is defined but never used.","Identifier","unusedVar","'loading' is defined but never used.","'Draggable' is defined but never used.","'connect' is defined but never used.","'loadReviews' is defined but never used.","'addReview' is defined but never used.","'removeReview' is defined but never used.","'loadUsers' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'p0' is defined but never used.","'p1' is defined but never used.","'p2' is defined but never used.","'p3' is defined but never used.","'p4' is defined but never used.","'p5' is defined but never used.","'p6' is defined but never used.","'p7' is defined but never used.","'Board' is defined but never used.","'socketService' is defined but never used.","'SOCKET_EVENT_REVIEW_ADDED' is defined but never used.","'SCORE_FOR_REVIEW' is assigned a value but never used.","'socketIsReady' is assigned a value but never used.","'boardService' is defined but never used.","'previewStyle' is assigned a value but never used.","'DragDropContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'utilService' is defined but never used.","array-callback-return","Array.prototype.findIndex() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Provider' is defined but never used.","'duration' is assigned a value but never used.","'index' is assigned a value but never used.","'task' is assigned a value but never used.","'updateBoard' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'onUpdate' is assigned a value but never used.","'Link' is defined but never used.","'onClickOutside' is defined but never used.","'boardId' is assigned a value but never used.","'NavLink' is defined but never used.","'BsImage' is defined but never used.","'LabelTask' is defined but never used.","no-global-assign","no-unsafe-negation"]