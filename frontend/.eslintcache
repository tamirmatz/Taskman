[{"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\index.js":"1","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\serviceWorkerRegistration.js":"2","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\store.js":"4","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\App.jsx":"5","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\systemReducer.js":"6","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\reviewReducer.js":"7","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\userReducer.js":"8","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\boardReducer.js":"9","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\routes.js":"10","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\AppHeader.jsx":"11","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\UserDetails.jsx":"12","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Home.jsx":"13","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Chat.jsx":"14","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\BoardList.jsx":"15","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Board.jsx":"16","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Login.jsx":"17","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\boardsAction.js":"18","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\userService.js":"19","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\boardService.js":"20","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\socketService.js":"21","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\userActions.js":"22","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\utilService.js":"23","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\reviewActions.js":"24","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\shared\\ModalWrapper.jsx":"25","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\UserPreview.jsx":"26","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\systemAction.js":"27","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\httpService.js":"28","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\asyncStorageService.js":"29","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\Upload.jsx":"30","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\MiniBoard.jsx":"31","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\TaskList.jsx":"32","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardNavbar.jsx":"33","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\reviewService.js":"34","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\TaskDetails.jsx":"35","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\data\\board.js":"36","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\shared\\Overlay.jsx":"37","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\cloudinaryService.js":"38","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardMembersModal.jsx":"39","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\MembersBoard.jsx":"40","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\TaskPreview.jsx":"41","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\GroupModal.jsx":"42","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckList.jsx":"43","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\ActionList.jsx":"44","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\shared\\ModalAction.jsx":"45","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\LabelModal.jsx":"46","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckListStatus.jsx":"47","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MembersModal.jsx":"48","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\DueDateModal.jsx":"49","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MoveModal.jsx":"50","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\CopyModal.jsx":"51","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\OverlayAction.jsx":"52","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\LabelTask.jsx":"53"},{"size":935,"mtime":1622540459727,"results":"54","hashOfConfig":"55"},{"size":5201,"mtime":1622540459734,"results":"56","hashOfConfig":"55"},{"size":377,"mtime":1622540459732,"results":"57","hashOfConfig":"55"},{"size":752,"mtime":1622540459748,"results":"58","hashOfConfig":"55"},{"size":535,"mtime":1622540459615,"results":"59","hashOfConfig":"55"},{"size":426,"mtime":1622648499511,"results":"60","hashOfConfig":"55"},{"size":669,"mtime":1622540459746,"results":"61","hashOfConfig":"55"},{"size":868,"mtime":1622540459747,"results":"62","hashOfConfig":"55"},{"size":688,"mtime":1622737964614,"results":"63","hashOfConfig":"55"},{"size":634,"mtime":1622631189362,"results":"64","hashOfConfig":"55"},{"size":2829,"mtime":1622680021145,"results":"65","hashOfConfig":"55"},{"size":1405,"mtime":1622631189360,"results":"66","hashOfConfig":"55"},{"size":3007,"mtime":1622725581441,"results":"67","hashOfConfig":"55"},{"size":3395,"mtime":1622540459729,"results":"68","hashOfConfig":"55"},{"size":4706,"mtime":1622812554825,"results":"69","hashOfConfig":"55"},{"size":7640,"mtime":1622819143853,"results":"70","hashOfConfig":"55"},{"size":5409,"mtime":1622733056952,"results":"71","hashOfConfig":"55"},{"size":2193,"mtime":1622737961353,"results":"72","hashOfConfig":"55"},{"size":2097,"mtime":1622540459739,"results":"73","hashOfConfig":"55"},{"size":3211,"mtime":1622737957664,"results":"74","hashOfConfig":"55"},{"size":2414,"mtime":1622540459737,"results":"75","hashOfConfig":"55"},{"size":1966,"mtime":1622640548548,"results":"76","hashOfConfig":"55"},{"size":2864,"mtime":1622812554827,"results":"77","hashOfConfig":"55"},{"size":1321,"mtime":1622560933611,"results":"78","hashOfConfig":"55"},{"size":165,"mtime":1622540459723,"results":"79","hashOfConfig":"55"},{"size":533,"mtime":1622640548535,"results":"80","hashOfConfig":"55"},{"size":756,"mtime":1622648563913,"results":"81","hashOfConfig":"55"},{"size":1136,"mtime":1622540459737,"results":"82","hashOfConfig":"55"},{"size":2404,"mtime":1622540459735,"results":"83","hashOfConfig":"55"},{"size":1709,"mtime":1622808340611,"results":"84","hashOfConfig":"55"},{"size":466,"mtime":1622809538361,"results":"85","hashOfConfig":"55"},{"size":6617,"mtime":1622817005007,"results":"86","hashOfConfig":"55"},{"size":4244,"mtime":1622816969355,"results":"87","hashOfConfig":"55"},{"size":1087,"mtime":1622540459738,"results":"88","hashOfConfig":"55"},{"size":18298,"mtime":1622810459922,"results":"89","hashOfConfig":"55"},{"size":305529,"mtime":1622540459726,"results":"90","hashOfConfig":"55"},{"size":117,"mtime":1622688889960,"results":"91","hashOfConfig":"55"},{"size":658,"mtime":1622732334917,"results":"92","hashOfConfig":"55"},{"size":2261,"mtime":1622720511916,"results":"93","hashOfConfig":"55"},{"size":847,"mtime":1622814288578,"results":"94","hashOfConfig":"55"},{"size":7353,"mtime":1622795256728,"results":"95","hashOfConfig":"55"},{"size":2573,"mtime":1622795256735,"results":"96","hashOfConfig":"55"},{"size":5653,"mtime":1622808340617,"results":"97","hashOfConfig":"55"},{"size":4702,"mtime":1622810484111,"results":"98","hashOfConfig":"55"},{"size":220,"mtime":1622695945231,"results":"99","hashOfConfig":"55"},{"size":1719,"mtime":1622810502677,"results":"100","hashOfConfig":"55"},{"size":662,"mtime":1622732334912,"results":"101","hashOfConfig":"55"},{"size":2305,"mtime":1622711586380,"results":"102","hashOfConfig":"55"},{"size":1668,"mtime":1622710699676,"results":"103","hashOfConfig":"55"},{"size":3169,"mtime":1622732334946,"results":"104","hashOfConfig":"55"},{"size":2973,"mtime":1622702719418,"results":"105","hashOfConfig":"55"},{"size":129,"mtime":1622695949888,"results":"106","hashOfConfig":"55"},{"size":4493,"mtime":1622810910252,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hkyyjl",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"139"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"139"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"139"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"139"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"139"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"139"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"139"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"139"},"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\index.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\store.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\App.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\systemReducer.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\reviewReducer.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\userReducer.js",["224"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\reducers\\boardReducer.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\routes.js",["225"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\AppHeader.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\UserDetails.jsx",["226","227","228"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Home.jsx",["229","230","231","232","233","234","235","236","237"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Chat.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\BoardList.jsx",["238","239","240","241","242","243","244","245","246"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { remove, add, query } from '../store/actions/boardsAction.js';\r\nimport { MiniBoard } from '../cmps/board/MiniBoard'\r\nimport { utilService } from '../services/generalService/utilService.js'\r\nimport p0 from '../assets/img/background/0.jpg'\r\nimport p1 from '../assets/img/background/1.jpg'\r\nimport p2 from '../assets/img/background/2.jpg'\r\nimport p3 from '../assets/img/background/3.jpg'\r\nimport p4 from '../assets/img/background/4.jpg'\r\nimport p5 from '../assets/img/background/5.jpg'\r\nimport p6 from '../assets/img/background/6.jpg'\r\nimport p7 from '../assets/img/background/7.jpg'\r\nimport { Board } from './Board.jsx';\r\n\r\nclass _BoardList extends Component {\r\n    state = {\r\n        newBoard: {\r\n            title: '',\r\n            backgroundId: 0,\r\n            backgrounds: [\r\n                'https://trello-backgrounds.s3.amazonaws.com/SharedBackground/2286x1600/24baa6609b89fb8eb0cc0aceb70eaf36/photo-1557682250-33bd709cbe85.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671389/backrounds/0_jflqwf.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671416/backrounds/1_gavwov.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671401/backrounds/2_gstip0.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671395/backrounds/3_mqwgkk.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671404/backrounds/4_ly2zj7.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671550/backrounds/5_g7oe20.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671430/backrounds/6_mi6wun.jpg',\r\n                'https://res.cloudinary.com/dxsv4c229/image/upload/v1622671421/backrounds/7_oivv0t.jpg',\r\n\r\n            ]\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.query()\r\n    }\r\n\r\n    onCreateBoard = () => {\r\n        const { title, backgrounds, backgroundId } = this.state.newBoard\r\n        this.props.add(title, backgrounds[backgroundId])\r\n        this.props.query()\r\n    }\r\n\r\n    changeImg = (num) => {\r\n        const { backgroundId, backgrounds } = this.state.newBoard\r\n        if (backgroundId + num === backgrounds.length || backgroundId + num === -1) num = 0\r\n        this.setState(prevState => ({\r\n            newBoard: {\r\n                ...prevState.newBoard,\r\n                backgroundId: backgroundId + num,\r\n            }\r\n        }))\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            newBoard: {\r\n                ...prevState.newBoard,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n\r\n    render() {\r\n        const { boards } = this.props\r\n        return (\r\n            <section className=\" w-100 flex column center content-center pad-3\">\r\n                <h1 className=\"fam-1\">Choose Your Board List</h1>\r\n                <div className=\"boards-gallary flex h-40 w-100 gap-2 wrap\">\r\n                    {boards && boards.map(board => <Link key={board._id} to={`board/${board._id}`}><MiniBoard board={board} /></Link>)}\r\n                    <section className={\"miniBoard flex center content-center\"} style={{ backgroundImage: \"url(\" + this.state.newBoard.backgrounds[this.state.newBoard.backgroundId] + \")\" }}>\r\n                        <form className=\"add-board\" onSubmit={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.onCreateBoard()\r\n                        }}>\r\n                            <input type=\"text\" name=\"title\" onChange={this.handleChange} placeholder=\"Board title...\" />\r\n\r\n\r\n                            <div className=\"change-img-container flex space-between control-img\">\r\n                                <span className=\"change-img\" onClick={() => { this.changeImg(-1) }}>{'<'}</span>\r\n                                <button>Create board</button>\r\n                                <span className=\"change-img\" onClick={() => { this.changeImg(1) }}>{'>'}</span>\r\n                            </div>\r\n                        </form>\r\n                    </section>\r\n                    {!boards && <h1 >No boards to show</h1>}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        boards: state.boardModule.boards\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    remove,\r\n    add,\r\n    query\r\n}\r\nexport const BoardList = connect(mapStateToProps, mapDispatchToProps)(_BoardList)",["247","248"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Board.jsx",["249","250"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\pages\\Login.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\boardsAction.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\userService.js",["251"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\boardService.js",["252","253"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\socketService.js",["254"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\userActions.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\utilService.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\reviewActions.js",["255","256"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\shared\\ModalWrapper.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\UserPreview.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\store\\actions\\systemAction.js",["257"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\httpService.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\asyncStorageService.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\Upload.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\MiniBoard.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\TaskList.jsx",["258","259"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardNavbar.jsx",["260"],"import { MembersBoard } from '../MembersBoard';\r\nimport { MdKeyboardArrowDown } from 'react-icons/md'\r\nimport { RiDashboardLine } from 'react-icons/ri'\r\nimport { AiOutlineStar } from 'react-icons/ai'\r\nimport { Component } from 'react';\r\nimport { BoardMembersModal } from './BoardMembersModal'\r\n\r\n\r\n\r\nexport class BoardNavbar extends Component {\r\n    state = {\r\n        title: this.props.board.title,\r\n        members: this.props.board.members\r\n    }\r\n\r\n    deleteBoard = () => {\r\n        console.log('delete');\r\n    }\r\n\r\n    onAddMemberToBoard = (addedMember) => {\r\n        const { members } = this.state\r\n        const memberIdx = members.findIndex(member => member._id === addedMember._id)\r\n        if (memberIdx !== -1) {\r\n            members.splice(memberIdx, 1)\r\n        }\r\n        else members.push(addedMember)\r\n        const copyBoard = { ...this.props.board }\r\n        copyBoard.members = members\r\n        console.log(members)\r\n        this.props.updateBoard(copyBoard)\r\n    }\r\n\r\n    isMemberChecked = (memberCheck) => {\r\n        const memberIdx = this.state.members.findIndex(member => member._id === memberCheck._id)\r\n        if (memberIdx !== -1) {\r\n            return 'checked'\r\n        }\r\n        else return ''\r\n    }\r\n\r\n    toggleModal = (className) => {\r\n        const modals = document.querySelectorAll('.action-modal');\r\n        const currModal = document.querySelector(`.${className}`);\r\n        if (modals) {\r\n            modals.forEach(\r\n                el => el.classList.add('d-none'));\r\n        }\r\n        if (currModal) {\r\n            currModal.classList.remove('d-none');\r\n        }\r\n    }\r\n    onChangeBoardName = () => {\r\n        const board = this.props.board\r\n        board.title = this.state.title\r\n        this.props.updateBoard(board)\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        this.setState({ [field]: value })\r\n    }\r\n    render() {\r\n        const { board, onUpdate } = this.props\r\n        if (!board) return <div>Loading...</div>\r\n        return (\r\n            <nav className=\"board-navbar flex space-between font-1 c-white fam-1\">\r\n                <ul className=\"left-bar flex center space-evenly \">\r\n                    <li className=\"btn-board btn-board-navbar\"><RiDashboardLine />Board<MdKeyboardArrowDown /></li>\r\n                    <li className=\"btn-board bold input-navbar\">\r\n                        <div onClick={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.onChangeBoardName(ev)\r\n                        }}>\r\n                            <input type=\"text\"\r\n                                className=\"app-input nav-board-input bold font-m lh-20 c-white \"\r\n                                name=\"title\"\r\n                                onChange={this.handleChange}\r\n                                value={this.state.title}\r\n                                onBlur={this.onChangeBoardName}\r\n                            />\r\n                        </div>\r\n                    </li>\r\n                    <li className=\"btn-board btn-board-navbar\"><AiOutlineStar /></li>\r\n                    <li className=\"btn-board btn-board-navbar\">Visiblity</li>\r\n                    <ul className=\"members-wrap \">\r\n                        <li\r\n                            className=\"btn-board btn-board-navbar\"\r\n                            onClick={() => { this.toggleModal('board-members-wrap-modal') }}>\r\n                            Invite\r\n                        </li>\r\n                        <BoardMembersModal\r\n                            users={this.props.users}\r\n                            isMemberChecked={this.isMemberChecked}\r\n                            onAddMemberToBoard={this.onAddMemberToBoard}\r\n                            toggleModal={() => { this.toggleModal() }}\r\n                        />\r\n                    </ul>\r\n                    <li className=\"btn-board bg-inherit\" ><MembersBoard /></li>\r\n                </ul>\r\n                <ul className=\"right-bar flex center\">\r\n                    <li className=\"btn-board btn-board-navbar\" onClick={() => this.deleteBoard()}>Delete Board</li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\n","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\reviewService.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\TaskDetails.jsx",["261","262","263","264","265"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { boardService } from '../../../services/boardService.js'\r\nimport { remove, add, loadBoard, update } from '../../../store/actions/boardsAction.js';\r\nimport onClickOutside from \"react-onclickoutside\";\r\nimport { BsCardChecklist } from 'react-icons/bs'\r\nimport { GrTextAlignFull } from 'react-icons/gr'\r\nimport { FaRegCommentDots } from 'react-icons/fa'\r\nimport { utilService } from '../../../services/generalService/utilService.js';\r\nimport { CheckList } from './CheckList';\r\nimport { ActionList } from './action/ActionList';\r\nimport { UserPreview } from '../UserPreview.jsx';\r\nimport { RiDeleteBin6Line } from 'react-icons/ri'\r\n\r\n// import {TaskTitle} from '../taskDetails/TaskTitle';\r\n\r\n\r\n\r\nclass _TaskDetails extends Component {\r\n    state = {\r\n        group: null,\r\n        task: null,\r\n        onFocus: false,\r\n        overlay: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { boardId, taskId, groupId } = this.props.match.params;\r\n        const board = { ...this.props.board };\r\n        const group = boardService.getGroupById(board, groupId);\r\n        const task = boardService.getTaskById(group, taskId);\r\n        this.addClassName();\r\n        this.setState({ ...this.state, group, task })\r\n    }\r\n\r\n\r\n\r\n    //Destroyed the check list! don't use it! -tamir&naav- <3\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     if (this.props !== prevProps) {\r\n    //         console.log('props change');\r\n    //     }\r\n    // }\r\n\r\n\r\n    addClassName() {\r\n        document.querySelector('.board').classList.add('max-screen');\r\n    };\r\n\r\n    addActivity = (board, txt = '') => {\r\n        const { loggedInUser } = this.props\r\n        const task = { ...this.state.task }\r\n        const activity = `${loggedInUser.fullname}${txt}`\r\n        const copyboard = JSON.parse(JSON.stringify(board))\r\n        // board.activities = []\r\n        copyboard.activities.unshift({ id: utilService.makeId(), txt: activity, createdAt: Date.now(), byMember: loggedInUser, task })\r\n        console.log('board after', copyboard.activities)\r\n        console.log('copy board', copyboard)\r\n        return copyboard;\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n\r\n        this.setState(prevState => ({\r\n            task: {\r\n                ...prevState.task,\r\n                [field]: value,\r\n            }\r\n        }))\r\n    }\r\n\r\n    handleClickOutside = evt => {\r\n        // ..handling code goes here...\r\n    };\r\n\r\n    updateTask = (txt) => {\r\n        console.log('here')\r\n        if (!this.state.task.title) return;\r\n        let copyBoard = { ...this.props.board };\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\r\n        const taskIdx = boardService.getTaskIdxById(this.state.group, this.state.task.id)\r\n        copyBoard.groups[groupIdx].tasks[taskIdx] = this.state.task\r\n        copyBoard = this.addActivity(copyBoard, txt)\r\n        this.props.update(copyBoard)\r\n    }\r\n    \r\n    updateTaskLabel= (updateTask) => {\r\n        console.log('prevLabel: ',this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\r\n        const task  = this.state.task;\r\n        task.labelIds = updateTask.labelIds;\r\n        this.updateTask()\r\n        console.log('Label: ',this.state.task.labelIds, 'updateLabel: ', updateTask.labelIds);\r\n    }\r\n\r\n    onSaveDueDate = (date) => {\r\n        const { task } = this.state;\r\n        task.dueDate = date\r\n        this.updateTask()\r\n    }\r\n\r\n    updateTaskState = (task) => {\r\n        this.setState({ task })\r\n    }\r\n\r\n    onAddCheckList = (task) => {\r\n        if (!task.checklists) {\r\n            task.checklists = [];\r\n        }\r\n        task.checklists.push({ id: utilService.makeId(), title: 'Checklist', todos: [] })\r\n        this.setState({ task }, () => {\r\n            this.updateTask('Added Checklist')\r\n        })\r\n    }\r\n\r\n    onRemoveCheckList = (checklistIdx) => {\r\n        const { task } = { ...this.state }\r\n        // const task = JSON.parse(JSON.stringify(this.state.task))\r\n        task.checklists.splice(checklistIdx, 1)\r\n        this.setState({ task }, this.updateTask)\r\n    }\r\n\r\n    onUpdateChecklist = (checklist) => {\r\n        this.state.task.checklists.map(cl => cl.id === checklist.id ? checklist : cl)\r\n        this.setState({ task: { ...this.state.task } }, this.updateTask)\r\n    }\r\n\r\n    onDeleteTask = () => {\r\n        const { boardId } = this.props.match.params;\r\n        const copyboard = this.props.board\r\n        const { task, group } = this.state\r\n        group.tasks.splice(boardService.getTaskIdxById(group, task.id), 1)\r\n        copyboard.groups[boardService.getGroupIdxById(copyboard, group.id)] = group\r\n        this.props.update(copyboard)\r\n        this.props.history.push(`/board/${boardId}`)\r\n    }\r\n\r\n    onAddMemberToTask = (addedMember) => {\r\n        const { task } = this.state;\r\n        const memberIdx = task.members.findIndex(member => member._id === addedMember._id)\r\n        if (memberIdx !== -1) {\r\n            task.members.splice(memberIdx, 1)\r\n        }\r\n        else task.members.push(addedMember)\r\n        this.updateTask()\r\n    }\r\n\r\n\r\n    onSaveDueDate = (date) => {\r\n        const { task } = this.state;\r\n        task.dueDate = date\r\n        \r\n        this.updateTask()\r\n    }\r\n\r\n    isMemberChecked = (memberCheck) => {\r\n        const { task } = this.state;\r\n        const memberIdx = task.members.findIndex(member => member._id === memberCheck._id)\r\n        if (memberIdx !== -1) {\r\n            return 'checked'\r\n        }\r\n        else return ''\r\n    }\r\n\r\n    isDueDateDone = (val) => {\r\n        const { task } = this.state;\r\n        task.isDone = val\r\n        this.updateTask()\r\n    }\r\n\r\n    toggleModal = (className) => {\r\n        const modals = document.querySelectorAll('.action-modal');\r\n        const currModal = document.querySelector(`.${className}`);\r\n        if (modals) {\r\n            modals.forEach(\r\n                el => el.classList.add('d-none'));\r\n        }\r\n        if (currModal) {\r\n            currModal.classList.remove('d-none');\r\n        }\r\n    }\r\n    openOverlay = () => {\r\n        this.setState({ ...this.state, overlay: 'details-overlay' });\r\n    }\r\n\r\n    addImgToTask = (imgUrl) => {\r\n        const { task } = this.state;\r\n        task.imgUrl = imgUrl\r\n        this.updateTask()\r\n    }\r\n\r\n\r\n    closeOverlay = (ev) => {\r\n        if (!ev.target.classList.contains('btn-action') && !ev.target.classList.contains('btn-act')) {\r\n            if (ev.target.offsetParent !== undefined && ev.target.offsetParent.classList[0] !== undefined && ev.target.offsetParent.classList[0] === 'task-details') {\r\n                const modals = document.querySelectorAll('.action-modal');\r\n                if (modals) {\r\n                    modals.forEach(\r\n                        el => el.classList.add('d-none'));\r\n                }\r\n                this.setState({ ...this.state, overlay: '' });\r\n\r\n            }\r\n        }\r\n        // this.setState({ ...this.state, overlay: '' });\r\n        // if(ev.target.classList.contain('btn-action'))\r\n    }\r\n\r\n    onAddLabelTask = (labelId) => {\r\n        const task = this.state;\r\n        if (!task.labels) {\r\n            task.labels = [];\r\n        }\r\n        task.labels.push(labelId);\r\n    }\r\n\r\n    onSendComment = (txt) => {\r\n        const { loggedInUser } = this.props\r\n        const { task } = this.state;\r\n        task.comments.unshift({ id: utilService.makeId(), txt, createdAt: Date.now(), byMember: loggedInUser })\r\n        this.updateTask()\r\n    }\r\n\r\n    onRemoveComment = (commentIdx) => {\r\n        const { task } = this.state;\r\n        task.comments.splice(commentIdx, 1)\r\n        this.updateTask()\r\n    }\r\n\r\n    moveTask = (moveTo) => {\r\n        if (moveTo !== this.state.group.id) {\r\n            const copyBoard = { ...this.props.board }\r\n            copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.state.group.id)].tasks.splice(\r\n                boardService.getTaskIdxById(this.state.group, this.state.task.id), 1)\r\n            copyBoard.groups[moveTo].tasks.push(this.state.task)\r\n            this.setState({ group: copyBoard.groups[moveTo] })\r\n            this.props.update(copyBoard)\r\n        }\r\n        // this.props.history.push(`/board/${copyBoard._id}`)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { task } = this.state;\r\n        const { board, loggedInUser } = this.props\r\n        if (!task) return <h1>Loading...</h1>\r\n        return (\r\n            <section className={`task-details w-50 flex bg-modal c-stand fam-1 pad-1 ${this.state.overlay}`}\r\n                onClick={(ev) => { this.closeOverlay(ev) }}>\r\n                <div className=\"info-task flex column w-70 h-100 content-start\">\r\n                    {/* Title */}\r\n                    <form className=\"task-title flex column content-start pb-2 w-100\" onSubmit={(ev) => {\r\n                        ev.preventDefault()\r\n                        this.updateTask()\r\n                    }}>\r\n                        <div className=\"task-title flex center h-33\">\r\n                            <label\r\n                                htmlFor=\"title\"\r\n                                className=\"font-3 flex center w-100\">\r\n                                <BsCardChecklist />\r\n                                <input\r\n                                    onBlur={this.updateTask}\r\n                                    type=\"text\"\r\n                                    value={task.title}\r\n                                    name=\"title\"\r\n                                    className=\"input-details title-task-input\"\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </label>\r\n                        </div>\r\n                        <h3 className=\"task-list-title fam-1 font-2 left-self h-20 center\">in list{' '}\r\n                            <span className=\"t-decor\">{this.state.group.title}</span>\r\n                        </h3>\r\n                    </form>\r\n\r\n                    <section className=\"info-task flex wrap gap-1 center mb-1\">\r\n                        <div className=\"task-members\">\r\n                            {task.members.length > 0 && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">MEMBERS</h3>}\r\n                            <ul className=\"flex center gap-xs\">\r\n                                {task.members.map(member => {\r\n                                    return <UserPreview key={member._id} user={member} />\r\n                                })}\r\n                                {task.members.length > 0 &&\r\n                                    <span onClick={() => { this.toggleModal('members-wrap-modal'); this.openOverlay() }} className=\"btn-act  user-preview flex center content-center font-m bg-btn cur-pointer \">+</span>}\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"task-labels flex column center wrap\">\r\n                            {(task.labelIds && task.labelIds.length > 0) && <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">LABELS</h3>}\r\n                            <ul className=\"flex center wrap\">\r\n                                {task.labelIds && task.labelIds.map(labelId => {\r\n                                    const label = board.labels.find(label => {\r\n                                        return label.id === labelId;\r\n                                    })\r\n                                    if (label) {\r\n                                        return (\r\n                                            <div\r\n                                                key={label.id}\r\n                                                className={`details-label bold flex center pad-xs mb-03`} onClick={() => { this.toggleModal('label-wrap-modal') }} style={{ backgroundColor: label.color }}\r\n                                            >\r\n                                                {label.title}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                                {task.labelIds && task.labelIds.length > 0 && <span onClick={() => { this.toggleModal('label-wrap-modal'); this.openOverlay(); }} className=\"details-label bold flex center pad-xs mb-03 bg-btn btn-act cur-pointer\">+</span>}\r\n                            </ul>\r\n                        </div>\r\n                        {task.dueDate && <div className=\"task-duedate flex center column\">\r\n                            <h3 className=\"font-s fw-1 fam-1 left-self c-lead\">DUE DATE</h3>\r\n                            <div className=\"flex\">\r\n                                <input onChange={(ev) => { this.isDueDateDone(ev.target.checked) }} checked={task.isDone} type=\"checkbox\" />\r\n                                <p>{Intl.DateTimeFormat('IL-il').format(task.dueDate)}</p>\r\n                                {task.isDone && <div className=\"complete-duedate\">complete</div>}\r\n                            </div>\r\n                        </div>}\r\n                    </section>\r\n\r\n                    <section className=\"desc-section\">\r\n                        <div className=\"desc-header flex row mb-1\">\r\n                            <GrTextAlignFull /><label>Description</label>\r\n                        </div>\r\n                        <form onSubmit={(ev) => {\r\n                            ev.preventDefault()\r\n                            this.updateTask()\r\n                        }}>\r\n\r\n                            <textarea placeholder=\"Add a description for this task...\" onBlur={this.updateTask} type=\"textArea\" value={task.description} name=\"description\" className=\"w-90 input-details margin-content\" onChange={this.handleChange} />\r\n                        </form>\r\n                    </section>\r\n                    {task.imgUrl && <img className=\"details-img\" src={task.imgUrl} />}\r\n                    {utilService.isFalse(task.checklists) && <ul className=\"todos clean-list mb-3 \">\r\n                        {task.checklists.map((checklist, idx) => {\r\n                            return <CheckList\r\n                                key={checklist.id}\r\n                                onRemoveCheckList={this.onRemoveCheckList}\r\n                                updateChecklist={this.onUpdateChecklist}\r\n                                idx={idx}\r\n                                checklists={task.checklists}\r\n                                handleChange={this.handleChange}\r\n                                updateTask={this.updateTask}\r\n                                checklist={checklist}\r\n                                updateTaskState={this.updateTaskState}\r\n                                task={task}\r\n                            />\r\n                        })}\r\n                    </ul>}\r\n\r\n                    <section className=\"comment-section\">\r\n                        <div className=\"desc-header flex row mb-1\">\r\n                            <FaRegCommentDots /><label>Comments</label>\r\n                        </div>\r\n                        <div className=\"new-comment flex center content-gap\">\r\n                            <UserPreview user={loggedInUser} />\r\n                            <form onSubmit={(ev) => {\r\n                                ev.preventDefault()\r\n                                this.onSendComment(ev.target[0].value)\r\n                            }}>\r\n                                <input className=\"comment-input\" placeholder=\"Write a comment...\" name=\"txt\">\r\n                                </input>\r\n                                <button className=\"btn-send-comment\">Send</button>\r\n                            </form>\r\n                        </div>\r\n\r\n                        {task.comments && <ul className=\"comments clean-list\">\r\n                            {task.comments.map((comment, idx) => {\r\n                                return <li className=\"full-comment flex column\">\r\n                                    <div className=\"flex space-between\">\r\n                                        <div className=\"content-gap flex center\">\r\n                                            <UserPreview user={comment.byMember} />\r\n                                            <div className=\"commenter-name\">{comment.byMember.fullname}</div>\r\n                                            <small>{utilService.timeAgo(comment.createdAt)}</small>\r\n                                        </div>\r\n                                        <div className='btn-del-comment' onClick={() => { this.onRemoveComment(idx) }}><RiDeleteBin6Line /></div>\r\n                                    </div>\r\n                                    <div className=\"comment-gap\">\r\n                                        <p className=\"comment-txt \">{comment.txt}</p>\r\n                                    </div>\r\n                                </li>\r\n                            })}\r\n                        </ul>}\r\n                    </section>\r\n                </div>\r\n                <ActionList\r\n                    openOverlay={() => { this.openOverlay() }}\r\n                    onSaveDueDate={this.onSaveDueDate}\r\n                    onDeleteTask={this.onDeleteTask}\r\n                    toggleModal={this.toggleModal}\r\n                    isMemberChecked={this.isMemberChecked}\r\n                    onAddMemberToTask={this.onAddMemberToTask}\r\n                    task={task}\r\n                    group={this.state.group}\r\n                    onAddCheckList={this.onAddCheckList}\r\n                    moveTask={this.moveTask}\r\n                    updateState={() => { this.updateState() }}\r\n                    updateTask={this.updateTask}\r\n                    addImgToTask={this.addImgToTask}\r\n                    updateTaskLabel={this.updateTaskLabel}\r\n                />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    remove,\r\n    add,\r\n    loadBoard,\r\n    update\r\n}\r\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(_TaskDetails)","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\data\\board.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\shared\\Overlay.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\services\\generalService\\cloudinaryService.js",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\boardNavbar\\BoardMembersModal.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\MembersBoard.jsx",["266"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\TaskPreview.jsx",["267","268","269","270","271","272","273","274"],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\GroupModal.jsx",["275","276","277","278"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { remove, add, loadBoard, update, setBoard } from '../../../../../store/actions/boardsAction.js';\r\nimport { boardService } from '../../../../../services/boardService.js'\r\n\r\nclass _GroupModal extends Component {\r\n    state = {\r\n        group: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ group: this.props.group })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    addTask = () => {\r\n\r\n    }\r\n\r\n    removeList = (groupId) => {\r\n        const copyBoard = { ...this.props.board }\r\n        const groupIdx = boardService.getGroupIdxById(copyBoard, groupId)\r\n        copyBoard.groups.splice(groupIdx,1)\r\n        this.props.update(copyBoard)\r\n    }\r\n    render() {\r\n        const group = this.state.group;\r\n        if (!group) return <h1>Loading...</h1>\r\n        const groupId = group.id;\r\n        return <div className={`action-modal group-wrap-modal ${groupId} d-none p-abs flex`}>\r\n            <ModalAction>\r\n                <div className=\"group-modal p-abs flex column pad-07 c-stand z-1 br-3\">\r\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\r\n                        <h1 className=\"fam-1 font-2 \">List: {group.title}</h1>\r\n                        <span className=\"cur-pointer fam-1 font-m bold\" onClick={() => { this.props.toggleModal(`${groupId}`) }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content\">\r\n                        <ul className=\"flex column space-between\">\r\n                            <ul >\r\n                                <li onClick={() => { this.AddTask() }} className=\"font-2 fam-1 pad-1 li-btn flex center\">Add Task...</li>\r\n                                <li onClick={() => { this.removeList(groupId) }} className=\"font-2 fam-1 pad-1 flex center li-btn\">Remove List...</li>\r\n                                <h1>Label of color!!!</h1>\r\n                            </ul>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    update\r\n}\r\n\r\n\r\nexport const GroupModal = connect(mapStateToProps, mapDispatchToProps)(_GroupModal)","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckList.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\ActionList.jsx",["279","280","281"],"import React, { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { MdLabelOutline } from 'react-icons/md'\r\nimport { AiOutlineClockCircle, AiOutlineCheckSquare, AiOutlineDelete } from 'react-icons/ai'\r\nimport { BiCopy } from 'react-icons/bi'\r\nimport { FiUsers } from 'react-icons/fi'\r\nimport { BsImage, BsArrowRight } from 'react-icons/bs'\r\nimport { LabelModal } from './actionModal/LabelModal';\r\nimport { MembersModal } from './actionModal/MembersModal'\r\nimport { DueDateModal } from './actionModal/DueDateModal'\r\nimport { MoveModal } from './actionModal/MoveModal'\r\nimport { CopyModal } from './actionModal/CopyModal'\r\nimport { withRouter } from \"react-router\";\r\nimport { Upload } from '../../../Upload'\r\n\r\n\r\nclass _ActionList extends Component {\r\n    state = {\r\n        task: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({\r\n            task: this.props.task\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n    }\r\n\r\n    closeDetails = () => {\r\n        const boardId = this.props.match.params.boardId;\r\n        this.props.history.push(`/board/${boardId}`)\r\n    }\r\n    render() {\r\n        const { task } = this.state\r\n        if (!task) return <h1>Loading...</h1>\r\n        return (\r\n            <div className=\"menu-task flex column w-40 content-start right\">\r\n                <div className=\"close-details fam-2 font-1 bold pad-1 cur-pointer\" onClick={() => this.closeDetails()}>X</div>\r\n                <div className=\"details-action flex column center pad-1 w-80\">\r\n                    <label htmlFor=\"actions\" className=\"font-m pb-3\">ACTIONS</label>\r\n                    <ul className=\"action-menu flex column w-100 clean-list font-m pad-0 fw-2\">\r\n\r\n                        <li className=\"label-wrap\" onClick={() => this.props.openOverlay('label-wrap-modal')}>\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('label-wrap-modal') }}><MdLabelOutline />Labels</div>\r\n                            <LabelModal toggleModal={() => { this.props.toggleModal() }} updateTaskLabel={this.props.updateTaskLabel}\r\n                                task={task} />\r\n                        </li>\r\n\r\n                        <ul className=\"members-wrap\">\r\n                            <li className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('members-wrap-modal') }}><FiUsers className=\"action-icon\" />Members</li>\r\n                            <MembersModal isMemberChecked={this.props.isMemberChecked} onAddMemberToTask={this.props.onAddMemberToTask} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </ul>\r\n\r\n                        <li className=\"duedate-wrap\">\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClockCircle className=\"action-icon\" />DueDate</div>\r\n                            <DueDateModal onSaveDueDate={this.props.onSaveDueDate} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </li>\r\n\r\n                        <li onClick={() => { this.props.onAddCheckList(task) }} className=\"btn-action\"><AiOutlineCheckSquare className=\"action-icon\" />Checklist</li>\r\n                        <li onClick={(ev) => { ev.stopPropagation() }} className=\"no-modal-action\"><Upload addImgToTask={this.props.addImgToTask} /></li>\r\n                        <li className=\"move-wrap\">\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><BsArrowRight />Move</div>\r\n                            <MoveModal group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </li>\r\n                        <li className=\"copy-wrap\">\r\n                            <div className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('copy-wrap-modal') }}><BiCopy className=\"action-icon\" />Copy</div>\r\n                            <CopyModal className=\"action-icon\" group={this.props.group} task={task} toggleModal={() => { this.props.toggleModal() }} />\r\n                        </li>\r\n                        <li onClick={() => { this.props.onDeleteTask() }} className=\"btn-action btn-delete\"><AiOutlineDelete className=\"action-icon\" />Delete</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\n\r\nexport const ActionList = connect(mapStateToProps, mapDispatchToProps)(withRouter(_ActionList));\r\n","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\shared\\ModalAction.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\LabelModal.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\CheckListStatus.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MembersModal.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\DueDateModal.jsx",["282"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport {utilService} from '../../../../../services/generalService/utilService'\r\n\r\n\r\n\r\n\r\nclass _DueDateModal extends Component {\r\n    state = {\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"action-modal duedate-wrap-modal d-none p-abs flex\">\r\n            <ModalAction>\r\n                <div className=\"duedate-modal p-abs flex column pad-1\">\r\n                <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\r\n                        <h1 className=\"fam-1 font-1\">DueDate</h1>\r\n                        <span className=\"cur-pointer fam-1 font-1 bold\" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content\">\r\n                        <ul>\r\n                            <input onChange={(ev) => { this.props.onSaveDueDate(ev.target.valueAsNumber)}} type=\"date\" name=\"date\"  className=\"input-date fam-1\"/>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\n\r\nexport const DueDateModal = connect(mapStateToProps, mapDispatchToProps)(_DueDateModal)","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\MoveModal.jsx",["283","284"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { LabelTask } from '../LabelTask'\r\nimport { update } from '../../../../../store/actions/boardsAction';\r\nimport { boardService } from '../../../../../services/boardService'\r\n\r\n\r\nclass _MoveModal extends Component {\r\n    state = {\r\n        moveTo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    \r\n    // moveTask = () => {\r\n    //     if (this.state.moveTo !== this.props.group.id) {\r\n    //         const copyBoard = { ...this.props.board }\r\n    //         copyBoard.groups[boardService.getGroupIdxById(copyBoard, this.props.group.id)].tasks.splice(\r\n    //             boardService.getTaskIdxById(this.props.group, this.props.task.id), 1)\r\n    //         copyBoard.groups[this.state.moveTo].tasks.push(this.props.task)\r\n    //         this.props.update(copyBoard)\r\n    //     }\r\n    //     // this.props.history.push(`/board/${copyBoard._id}`)\r\n    // }\r\n\r\n    handleChange = ({ target }) => {\r\n        console.log(target.value)\r\n        this.setState({ moveTo: target.value })\r\n    }\r\n    render() {\r\n        const {moveTask} = this.props\r\n        return <div className=\"action-modal move-wrap-modal d-none p-abs flex\">\r\n            <ModalAction>\r\n                <div className=\"move-modal w-100 p-abs flex column pad-1\">\r\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\r\n                        <h1 className=\"fam-1 font-1 \">Move to</h1>\r\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('move-wrap-modal') }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content w-100\">\r\n                        <form onSubmit={(ev) => {\r\n                            moveTask(this.state.moveTo)\r\n                            ev.preventDefault()\r\n                        }}>\r\n                            <select onChange={this.handleChange}>\r\n                                {this.props.board.groups.map((group, idx) => {\r\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\r\n                                })}\r\n                                {this.props.board.groups.map((group, idx) => {\r\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\r\n                                })}\r\n                            </select>\r\n                            <button className=\"btn-copy-move\">Move</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    update\r\n}\r\n\r\n\r\nexport const MoveModal = connect(mapStateToProps, mapDispatchToProps)(_MoveModal)","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\CopyModal.jsx",["285","286"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ModalAction } from '../../../../shared/ModalAction';\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport { LabelTask } from '../LabelTask'\r\nimport { update } from '../../../../../store/actions/boardsAction';\r\nimport { boardService } from '../../../../../services/boardService'\r\nimport { utilService } from '../../../../../services/generalService/utilService';\r\n\r\n\r\nclass _CopyModal extends Component {\r\n    state = {\r\n        copyTo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n\r\n    }\r\n\r\n    copyTask = () => {\r\n        if (this.state.copyTo !== this.props.group.id) {\r\n            const copyBoard = { ...this.props.board }\r\n            const task = { ...this.props.task }\r\n            task.id = utilService.makeId()\r\n            copyBoard.groups[this.state.copyTo].tasks.push(task)\r\n            this.props.update(copyBoard)\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        console.log(target.value)\r\n        this.setState({ copyTo: target.value })\r\n    }\r\n    render() {\r\n        return <div className=\"action-modal copy-wrap-modal d-none p-abs flex\">\r\n            <ModalAction>\r\n                <div className=\"copy-modal p-abs flex column pad-1\">\r\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center space-between gap-5 w-100 mb-1\">\r\n                        <h1 className=\"fam-1 font-1\">Copy</h1>\r\n                        <span className=\"cur-pointer fam-1 font-1 bold\" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClose /></span>\r\n                    </div>\r\n                    <div className=\"action-content\">\r\n                        <form onSubmit={(ev) => {\r\n                            this.copyTask()\r\n                            ev.preventDefault()\r\n                        }}>\r\n                            <select onChange={this.handleChange}>\r\n                                {this.props.board.groups.map((group) => {\r\n                                    return group.id === this.props.group.id && <option key={group.id} value={group.id}>{group.title}</option>\r\n                                })}\r\n                                {this.props.board.groups.map((group, idx) => {\r\n                                    return group.id !== this.props.group.id && <option value={idx} key={group.id}>{group.title}</option>\r\n                                })}\r\n                            </select>\r\n                            <button className=\"btn-copy-move\">Copy</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </ModalAction>\r\n        </div>\r\n    }\r\n\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    update\r\n}\r\n\r\n\r\nexport const CopyModal = connect(mapStateToProps, mapDispatchToProps)(_CopyModal)","C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\actionModal\\OverlayAction.jsx",[],"C:\\Users\\harel\\Desktop\\taskman\\Taskman\\frontend\\src\\cmps\\board\\taskDetails\\action\\LabelTask.jsx",["287","288","289","290","291"],"import React, { Component } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { FiEdit2 } from 'react-icons/fi'\r\nimport { withRouter } from \"react-router\";\r\nimport { update } from '../../../../store/actions/boardsAction';\r\nimport { boardService } from '../../../../services/boardService';\r\n\r\nclass _LabelTask extends Component {\r\n    state = {\r\n        isDisable: true,\r\n        titleLabel: this.props.label.title ? this.props.label.title : '',\r\n        task: null,\r\n        group: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { taskId, groupId } = this.props.match.params;\r\n        const board = this.props.board;\r\n        const group = boardService.getGroupById(board, groupId);\r\n        const task = boardService.getTaskById(group, taskId);\r\n        this.setState({ ...this.state, task: task, group: group });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props !== prevProps) {\r\n            const { boardId, taskId, groupId } = this.props.match.params;\r\n            const board = { ...this.props.board };\r\n            const group = boardService.getGroupById(board, groupId);\r\n            const task = boardService.getTaskById(group, taskId);\r\n            this.setState({ ...this.state, task: task, group: group });\r\n        }\r\n\r\n    }\r\n\r\n    toggleLabel(labelId, nameInput) {\r\n        const { task, group } = this.state;\r\n        const board = { ...this.props.board };\r\n        if (!task.labelIds) {\r\n            task.labelIds = []\r\n        }\r\n        const labelIdx = task.labelIds.findIndex(currLabelId => currLabelId === labelId);\r\n        if (labelIdx > -1) {\r\n            task.labelIds.splice(labelIdx, 1)\r\n        } else task.labelIds.push(labelId)\r\n        this.props.updateTaskLabel(task)\r\n        // const updateBoard = boardService.updateTaskAtBoard(board, group, task);\r\n        // this.props.update(updateBoard)\r\n    }\r\n\r\n    toggleDisable(nameInput) {\r\n        document.querySelector(`.${nameInput}`).disabled = !(document.querySelector(`.${nameInput}`).disabled); \r\n        this.setState({\r\n            isDisable: !this.state.isDisable\r\n        })\r\n    }\r\n\r\n    borderLabel = (task, labelId) => {\r\n        if (task.labelIds) {\r\n            if (task.labelIds.includes(labelId))\r\n                return 'border';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const value = target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            titleLabel: value\r\n        });\r\n        const label = this.props.label;\r\n        label.title = target.value;\r\n        this.updateLabelBoard(label);\r\n    }\r\n\r\n    updateLabelBoard = (label) => {\r\n        const { board } = this.props;\r\n        const idx = board.labels.findIndex(currLabel => currLabel.id === label.id);\r\n        board.labels.splice(idx, 1, label);\r\n        this.props.update(board);\r\n    };\r\n\r\n    render() {\r\n        const task = this.props.task;\r\n        if(!task) return <h1>lodaing...</h1>\r\n        const { label } = this.props;\r\n        let className;\r\n        if (task) {\r\n            className = this.borderLabel(task, label.id);\r\n        }\r\n        const nameInput = `label-${label.id}`;\r\n        console.log(label);\r\n        console.log(task);\r\n        return (\r\n            <div className=\"label flex center space-between w-100 h-20\" data-label={label.id}>\r\n                <div className={`wrap-label ${className} w-90`} onClick={() => this.toggleLabel(label.id, nameInput)}\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        name={nameInput}\r\n                        value={this.state.titleLabel}\r\n                        style={{ background: `${label.color}` }}\r\n                        className={`label-input ${nameInput} ${this.state.isDisable}  cur-pointer`}\r\n                        onChange={this.handleChange}\r\n                        maxLength={13}\r\n                        disabled\r\n                    />\r\n                </div>\r\n                    <span onClick={() => { this.toggleDisable(nameInput) }} className=\"edit-label\"><FiEdit2 /> </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        board: state.boardModule.board\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    update\r\n}\r\n\r\n\r\nexport const LabelTask = connect(mapStateToProps, mapDispatchToProps)(withRouter(_LabelTask))",{"ruleId":"292","severity":1,"message":"293","line":2,"column":34,"nodeType":"294","messageId":"295","endLine":2,"endColumn":51},{"ruleId":"292","severity":1,"message":"296","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":14},{"ruleId":"292","severity":1,"message":"297","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":16},{"ruleId":"292","severity":1,"message":"298","line":25,"column":13,"nodeType":"294","messageId":"295","endLine":25,"endColumn":16},{"ruleId":"299","severity":1,"message":"300","line":30,"column":11,"nodeType":"301","endLine":30,"endColumn":28},{"ruleId":"292","severity":1,"message":"302","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":17},{"ruleId":"292","severity":1,"message":"303","line":7,"column":10,"nodeType":"294","messageId":"295","endLine":7,"endColumn":21},{"ruleId":"292","severity":1,"message":"304","line":7,"column":23,"nodeType":"294","messageId":"295","endLine":7,"endColumn":32},{"ruleId":"292","severity":1,"message":"305","line":7,"column":34,"nodeType":"294","messageId":"295","endLine":7,"endColumn":46},{"ruleId":"292","severity":1,"message":"306","line":8,"column":10,"nodeType":"294","messageId":"295","endLine":8,"endColumn":19},{"ruleId":"299","severity":1,"message":"300","line":41,"column":11,"nodeType":"301","endLine":41,"endColumn":57},{"ruleId":"299","severity":1,"message":"300","line":51,"column":11,"nodeType":"301","endLine":51,"endColumn":64},{"ruleId":"299","severity":1,"message":"300","line":60,"column":11,"nodeType":"301","endLine":60,"endColumn":60},{"ruleId":"299","severity":1,"message":"300","line":68,"column":11,"nodeType":"301","endLine":68,"endColumn":60},{"ruleId":"292","severity":1,"message":"307","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":10},{"ruleId":"292","severity":1,"message":"308","line":7,"column":8,"nodeType":"294","messageId":"295","endLine":7,"endColumn":10},{"ruleId":"292","severity":1,"message":"309","line":8,"column":8,"nodeType":"294","messageId":"295","endLine":8,"endColumn":10},{"ruleId":"292","severity":1,"message":"310","line":9,"column":8,"nodeType":"294","messageId":"295","endLine":9,"endColumn":10},{"ruleId":"292","severity":1,"message":"311","line":10,"column":8,"nodeType":"294","messageId":"295","endLine":10,"endColumn":10},{"ruleId":"292","severity":1,"message":"312","line":11,"column":8,"nodeType":"294","messageId":"295","endLine":11,"endColumn":10},{"ruleId":"292","severity":1,"message":"313","line":12,"column":8,"nodeType":"294","messageId":"295","endLine":12,"endColumn":10},{"ruleId":"292","severity":1,"message":"314","line":13,"column":8,"nodeType":"294","messageId":"295","endLine":13,"endColumn":10},{"ruleId":"292","severity":1,"message":"315","line":14,"column":10,"nodeType":"294","messageId":"295","endLine":14,"endColumn":15},{"ruleId":"316","replacedBy":"317"},{"ruleId":"318","replacedBy":"319"},{"ruleId":"292","severity":1,"message":"320","line":3,"column":10,"nodeType":"294","messageId":"295","endLine":3,"endColumn":17},{"ruleId":"292","severity":1,"message":"321","line":8,"column":27,"nodeType":"294","messageId":"295","endLine":8,"endColumn":36},{"ruleId":"292","severity":1,"message":"322","line":3,"column":7,"nodeType":"294","messageId":"295","endLine":3,"endColumn":23},{"ruleId":"292","severity":1,"message":"323","line":1,"column":10,"nodeType":"294","messageId":"295","endLine":1,"endColumn":21},{"ruleId":"324","severity":1,"message":"325","line":104,"column":45,"nodeType":"326","messageId":"327","endLine":104,"endColumn":47},{"ruleId":"292","severity":1,"message":"328","line":43,"column":7,"nodeType":"294","messageId":"295","endLine":43,"endColumn":20},{"ruleId":"292","severity":1,"message":"329","line":3,"column":10,"nodeType":"294","messageId":"295","endLine":3,"endColumn":23},{"ruleId":"292","severity":1,"message":"330","line":3,"column":25,"nodeType":"294","messageId":"295","endLine":3,"endColumn":50},{"ruleId":"292","severity":1,"message":"323","line":1,"column":10,"nodeType":"294","messageId":"295","endLine":1,"endColumn":21},{"ruleId":"292","severity":1,"message":"331","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":25},{"ruleId":"332","severity":1,"message":"333","line":102,"column":58,"nodeType":"334","messageId":"335","endLine":102,"endColumn":60},{"ruleId":"292","severity":1,"message":"336","line":64,"column":24,"nodeType":"294","messageId":"295","endLine":64,"endColumn":32},{"ruleId":"292","severity":1,"message":"337","line":3,"column":10,"nodeType":"294","messageId":"295","endLine":3,"endColumn":14},{"ruleId":"292","severity":1,"message":"338","line":6,"column":8,"nodeType":"294","messageId":"295","endLine":6,"endColumn":22},{"ruleId":"292","severity":1,"message":"339","line":29,"column":17,"nodeType":"294","messageId":"295","endLine":29,"endColumn":24},{"ruleId":"324","severity":1,"message":"340","line":294,"column":77,"nodeType":"326","messageId":"341","endLine":294,"endColumn":79},{"ruleId":"299","severity":1,"message":"300","line":334,"column":37,"nodeType":"301","endLine":334,"endColumn":86},{"ruleId":"292","severity":1,"message":"337","line":4,"column":10,"nodeType":"294","messageId":"295","endLine":4,"endColumn":14},{"ruleId":"292","severity":1,"message":"342","line":3,"column":10,"nodeType":"294","messageId":"295","endLine":3,"endColumn":18},{"ruleId":"292","severity":1,"message":"343","line":12,"column":10,"nodeType":"294","messageId":"295","endLine":12,"endColumn":21},{"ruleId":"292","severity":1,"message":"344","line":25,"column":32,"nodeType":"294","messageId":"295","endLine":25,"endColumn":40},{"ruleId":"292","severity":1,"message":"345","line":42,"column":24,"nodeType":"294","messageId":"295","endLine":42,"endColumn":29},{"ruleId":"292","severity":1,"message":"346","line":42,"column":31,"nodeType":"294","messageId":"295","endLine":42,"endColumn":35},{"ruleId":"292","severity":1,"message":"347","line":53,"column":37,"nodeType":"294","messageId":"295","endLine":53,"endColumn":48},{"ruleId":"299","severity":1,"message":"300","line":71,"column":45,"nodeType":"301","endLine":71,"endColumn":93},{"ruleId":"324","severity":1,"message":"340","line":80,"column":83,"nodeType":"326","messageId":"341","endLine":80,"endColumn":85},{"ruleId":"292","severity":1,"message":"348","line":5,"column":10,"nodeType":"294","messageId":"295","endLine":5,"endColumn":16},{"ruleId":"292","severity":1,"message":"349","line":5,"column":18,"nodeType":"294","messageId":"295","endLine":5,"endColumn":21},{"ruleId":"292","severity":1,"message":"350","line":5,"column":23,"nodeType":"294","messageId":"295","endLine":5,"endColumn":32},{"ruleId":"292","severity":1,"message":"351","line":5,"column":42,"nodeType":"294","messageId":"295","endLine":5,"endColumn":50},{"ruleId":"292","severity":1,"message":"337","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":14},{"ruleId":"292","severity":1,"message":"352","line":2,"column":16,"nodeType":"294","messageId":"295","endLine":2,"endColumn":23},{"ruleId":"292","severity":1,"message":"353","line":8,"column":10,"nodeType":"294","messageId":"295","endLine":8,"endColumn":17},{"ruleId":"292","severity":1,"message":"323","line":5,"column":9,"nodeType":"294","messageId":"295","endLine":5,"endColumn":20},{"ruleId":"292","severity":1,"message":"354","line":5,"column":10,"nodeType":"294","messageId":"295","endLine":5,"endColumn":19},{"ruleId":"292","severity":1,"message":"355","line":7,"column":10,"nodeType":"294","messageId":"295","endLine":7,"endColumn":22},{"ruleId":"292","severity":1,"message":"354","line":5,"column":10,"nodeType":"294","messageId":"295","endLine":5,"endColumn":19},{"ruleId":"292","severity":1,"message":"355","line":7,"column":10,"nodeType":"294","messageId":"295","endLine":7,"endColumn":22},{"ruleId":"292","severity":1,"message":"337","line":2,"column":10,"nodeType":"294","messageId":"295","endLine":2,"endColumn":14},{"ruleId":"292","severity":1,"message":"352","line":2,"column":16,"nodeType":"294","messageId":"295","endLine":2,"endColumn":23},{"ruleId":"292","severity":1,"message":"339","line":27,"column":21,"nodeType":"294","messageId":"295","endLine":27,"endColumn":28},{"ruleId":"292","severity":1,"message":"356","line":37,"column":23,"nodeType":"294","messageId":"295","endLine":37,"endColumn":28},{"ruleId":"292","severity":1,"message":"357","line":38,"column":15,"nodeType":"294","messageId":"295","endLine":38,"endColumn":20},"no-unused-vars","'localLoggedinUser' is assigned a value but never used.","Identifier","unusedVar","'Chat' is defined but never used.","'Upload' is defined but never used.","'_id' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'connect' is defined but never used.","'loadReviews' is defined but never used.","'addReview' is defined but never used.","'removeReview' is defined but never used.","'loadUsers' is defined but never used.","'p0' is defined but never used.","'p1' is defined but never used.","'p2' is defined but never used.","'p3' is defined but never used.","'p4' is defined but never used.","'p5' is defined but never used.","'p6' is defined but never used.","'p7' is defined but never used.","'Board' is defined but never used.","no-native-reassign",["358"],"no-negated-in-lhs",["359"],"'loading' is defined but never used.","'Draggable' is defined but never used.","'SCORE_FOR_REVIEW' is assigned a value but never used.","'utilService' is defined but never used.","array-callback-return","Array.prototype.findIndex() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'socketIsReady' is assigned a value but never used.","'socketService' is defined but never used.","'SOCKET_EVENT_REVIEW_ADDED' is defined but never used.","'DragDropContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onUpdate' is assigned a value but never used.","'Link' is defined but never used.","'onClickOutside' is defined but never used.","'boardId' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Provider' is defined but never used.","'UserPreview' is defined but never used.","'duration' is assigned a value but never used.","'index' is assigned a value but never used.","'task' is assigned a value but never used.","'updateBoard' is assigned a value but never used.","'remove' is defined but never used.","'add' is defined but never used.","'loadBoard' is defined but never used.","'setBoard' is defined but never used.","'NavLink' is defined but never used.","'BsImage' is defined but never used.","'LabelTask' is defined but never used.","'boardService' is defined but never used.","'group' is assigned a value but never used.","'board' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]