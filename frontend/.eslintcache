[{"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/index.js":"1","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/serviceWorkerRegistration.js":"2","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/reportWebVitals.js":"3","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/App.jsx":"4","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/store.js":"5","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/routes.js":"6","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/systemReducer.js":"7","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/userReducer.js":"8","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/reviewReducer.js":"9","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/boardReducer.js":"10","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/AppHeader.jsx":"11","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/UserDetails.jsx":"12","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Board.jsx":"13","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Chat.jsx":"14","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Home.jsx":"15","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/BoardList.jsx":"16","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/userActions.js":"17","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/reviewActions.js":"18","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/boardsAction.js":"19","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/userService.js":"20","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/socketService.js":"21","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/Upload.jsx":"22","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskList.jsx":"23","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/reviewService.js":"24","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/boardService.js":"25","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/httpService.js":"26","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/cloudinaryService.js":"27","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/utilService.js":"28","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/asyncStorageService.js":"29","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskPreview.jsx":"30","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/data/board.js":"31","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalWrapper.jsx":"32","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/Overlay.jsx":"33","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MiniBoard.jsx":"34","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/UserPreview.jsx":"35","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MembersBoard.jsx":"36","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx":"37","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx":"38","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx":"39","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx":"40","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx":"41","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx":"42","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx":"43","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalAction.jsx":"44","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx":"45","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/systemAction.js":"46","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx":"47","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Login.jsx":"48","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx":"49","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx":"50"},{"size":910,"mtime":1610189396000,"results":"51","hashOfConfig":"52"},{"size":5064,"mtime":499155300000,"results":"53","hashOfConfig":"52"},{"size":364,"mtime":499155300000,"results":"54","hashOfConfig":"52"},{"size":515,"mtime":1622208933114,"results":"55","hashOfConfig":"52"},{"size":752,"mtime":1622123464533,"results":"56","hashOfConfig":"52"},{"size":605,"mtime":1622631139552,"results":"57","hashOfConfig":"52"},{"size":426,"mtime":1622658555468,"results":"58","hashOfConfig":"52"},{"size":868,"mtime":1622452229862,"results":"59","hashOfConfig":"52"},{"size":669,"mtime":1609949674000,"results":"60","hashOfConfig":"52"},{"size":668,"mtime":1622215305163,"results":"61","hashOfConfig":"52"},{"size":2631,"mtime":1622452229853,"results":"62","hashOfConfig":"52"},{"size":1405,"mtime":1622631139549,"results":"63","hashOfConfig":"52"},{"size":6790,"mtime":1622658555490,"results":"64","hashOfConfig":"52"},{"size":3395,"mtime":1622123464523,"results":"65","hashOfConfig":"52"},{"size":2963,"mtime":1622548245289,"results":"66","hashOfConfig":"52"},{"size":1141,"mtime":1622390182440,"results":"67","hashOfConfig":"52"},{"size":1966,"mtime":1622631634138,"results":"68","hashOfConfig":"52"},{"size":1321,"mtime":1622123464531,"results":"69","hashOfConfig":"52"},{"size":2076,"mtime":1622658104405,"results":"70","hashOfConfig":"52"},{"size":2097,"mtime":1622445084281,"results":"71","hashOfConfig":"52"},{"size":2324,"mtime":1622477414605,"results":"72","hashOfConfig":"52"},{"size":1127,"mtime":1622631634136,"results":"73","hashOfConfig":"52"},{"size":5124,"mtime":1622658555505,"results":"74","hashOfConfig":"52"},{"size":1087,"mtime":1622123464528,"results":"75","hashOfConfig":"52"},{"size":3132,"mtime":1622631340201,"results":"76","hashOfConfig":"52"},{"size":1093,"mtime":1622401206514,"results":"77","hashOfConfig":"52"},{"size":563,"mtime":1622631437870,"results":"78","hashOfConfig":"52"},{"size":3195,"mtime":1622473191343,"results":"79","hashOfConfig":"52"},{"size":2319,"mtime":1622289086771,"results":"80","hashOfConfig":"52"},{"size":7185,"mtime":1622658555500,"results":"81","hashOfConfig":"52"},{"size":298329,"mtime":1622473341850,"results":"82","hashOfConfig":"52"},{"size":158,"mtime":1622292625069,"results":"83","hashOfConfig":"52"},{"size":104,"mtime":1622559883756,"results":"84","hashOfConfig":"52"},{"size":239,"mtime":1622381347337,"results":"85","hashOfConfig":"52"},{"size":515,"mtime":1622636334712,"results":"86","hashOfConfig":"52"},{"size":752,"mtime":1622642838145,"results":"87","hashOfConfig":"52"},{"size":3431,"mtime":1622636334713,"results":"88","hashOfConfig":"52"},{"size":11024,"mtime":1622658555496,"results":"89","hashOfConfig":"52"},{"size":4361,"mtime":1622634468838,"results":"90","hashOfConfig":"52"},{"size":699,"mtime":1622634229499,"results":"91","hashOfConfig":"52"},{"size":3261,"mtime":1622640727387,"results":"92","hashOfConfig":"52"},{"size":1528,"mtime":1622658555461,"results":"93","hashOfConfig":"52"},{"size":2242,"mtime":1622658555462,"results":"94","hashOfConfig":"52"},{"size":213,"mtime":1622559883755,"results":"95","hashOfConfig":"52"},{"size":114,"mtime":1622559883755,"results":"96","hashOfConfig":"52"},{"size":725,"mtime":1622658555466,"results":"97","hashOfConfig":"52"},{"size":3870,"mtime":1622643197558,"results":"98","hashOfConfig":"52"},{"size":4535,"mtime":1622631634136,"results":"99","hashOfConfig":"52"},{"size":2176,"mtime":1622636334713,"results":"100","hashOfConfig":"52"},{"size":1490,"mtime":1622658555458,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1wsars6",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"104"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"104"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"104"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"104"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"104"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"104"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/index.js",[],["214","215"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/serviceWorkerRegistration.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/reportWebVitals.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/App.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/store.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/routes.js",["216"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/systemReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/userReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/reviewReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/reducers/boardReducer.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/AppHeader.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/UserDetails.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Board.jsx",["217","218"],"import { connect } from 'react-redux'\nimport { remove, add, loadBoard, update, setBoard } from '../store/actions/boardsAction.js';\nimport { loading } from '../store/actions/systemAction';\nimport { loadUsers } from '../store/actions/userActions.js'\nimport React, { Component } from 'react'\nimport { TaskList } from '../cmps/board/TaskList'\nimport { BoardNavbar } from '../cmps/board/boardNavbar/BoardNavbar'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Route, Switch } from 'react-router';\nimport { TaskDetails } from '../cmps/board/taskDetails/TaskDetails';\nimport { boardService } from '.././services/boardService.js'\nimport { utilService } from '../services/generalService/utilService.js'\nimport { socketService } from '../services/generalService/socketService.js'\nimport { ModalWrapper } from '../cmps/shared/ModalWrapper.jsx';\n\nconst EMPTY_GROUP = { title: '' }\n\nclass _Board extends Component {\n    state = {\n        group: EMPTY_GROUP,\n    }\n\n    componentDidMount() {\n        const { boardId } = this.props.match.params\n        this.props.loadBoard(boardId);\n        this.props.loadUsers();\n        socketService.setup()\n        socketService.on('updated board', (board) => {\n            if (boardId !== board._id) return\n            this.props.setBoard(board)\n        })\n        socketService.emit('add member', boardId)\n    }\n\n    componentWillUnmount() {\n        socketService.off('updated board', this.props.setBoard)\n        socketService.terminate()\n    }\n\n\n    onUpdate = (updateBoard) => {\n        console.log(updateBoard)\n        this.props.update(updateBoard)\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            group: {\n                ...prevState.group,\n                [field]: value,\n            }\n        }))\n    }\n\n\n    onAddGroup = () => {\n        const copyBoard = { ...this.props.board };\n        this.setState({ group: { ...this.state.group, id: utilService.makeId() } })\n        copyBoard.groups.push(utilService.formatNewGroup(this.state.group))\n        this.props.update(copyBoard)\n        this.setState({ group: EMPTY_GROUP })\n    }\n\n    onDragEnd = res => {\n        console.log()\n        const { destination, source, type } = res\n        if (!destination) return\n        if (destination.droppableId === source.droppableId &&\n            destination.index === source.index) return\n        const copyBoard = JSON.parse(JSON.stringify(this.props.board))\n        const activity = {}\n        if (type === 'task') {\n            const sourceListIdx = boardService.getGroupIdxById(copyBoard, source.droppableId)\n            const destinationListIdx = boardService.getGroupIdxById(copyBoard, destination.droppableId)\n            const task = copyBoard.groups[sourceListIdx].tasks.splice(source.index, 1)\n            copyBoard.groups[destinationListIdx].tasks.splice(destination.index, 0, task[0])\n            const sourceListName = copyBoard.groups[sourceListIdx].title\n            const destinationListName = copyBoard.groups[destinationListIdx].title\n            activity.txt = `has moved ${task[0].title} from ${sourceListName} to ${destinationListName}`\n            console.log(activity.txt)\n        }\n        else {\n            const list = copyBoard.groups.splice(source.index, 1)\n            copyBoard.groups.splice(destination.index, 0, list[0])\n            activity.txt = `has moved list ${list[0].title}`\n        }\n        this.props.update(copyBoard)\n        console.log('Moved and updated!', copyBoard)\n    }\n\n    onCloseDetails = () => {\n        this.props.history.push(`/board/${this.props.board._id}`)\n\n    }\n    render() {\n        const { board } = this.props;\n        if (!board) {\n            return <div className=\"loader w-100 h-100 flex center content-center\">Loading...</div>\n        }\n        // loading ui\n        // this.props.loading();\n        // if(this.props.isLoading) return <h1 className=\"w-100 h-100 flex center content-center\">Loading...</h1>\n        if (this.props.isLoading) return <div className=\"loader w-100 h-100 flex center content-center\">Loading...</div>\n\n\n        return (\n            <DragDropContext\n                onDragEnd={this.onDragEnd}\n            >\n                <section className=\"board flex column w-100 animate__animated animate__fadeInRight \">\n                    <BoardNavbar users={this.props.users} board={board} updateBoard={this.onUpdate} />\n\n                    <div className=\"board-list flex w-100 \"\n\n                    >\n                        <Droppable droppableId={board._id}\n                            direction=\"horizontal\"\n                            type=\"group\"\n                        >\n                            {provided => (\n                                <ul\n                                    className=\"groups clean-list flex \"\n                                    {...provided.droppableProps}\n                                    ref={provided.innerRef}\n                                >\n                                    {board && board.groups.map((group, idx) => <TaskList index={idx}\n                                        key={group.id}\n                                        board={board}\n                                        group={group}\n                                        updateBoard={this.onUpdate} />)}\n                                    {provided.placeholder}\n                                </ul>\n\n                            )}\n                        </Droppable>\n                        <div className=\"group add-group flex\">\n                            <form onSubmit={(ev) => {\n                                ev.preventDefault()\n                                this.onAddGroup()\n                            }}>\n                                <input className=\"add-group\" value={this.state.group.title} type=\"text\" placeholder=\"+ Add another list\" name=\"title\" onChange={this.handleChange} />\n                            </form>\n                        </div>\n                    </div>\n\n                    <Switch>\n                        <Route path={'/board/:boardId/:groupId/:taskId'} render={(props) => <ModalWrapper onClick={this.onCloseDetails}><TaskDetails {...props} /></ModalWrapper>}></Route>\n                    </Switch>\n                </section>\n            </DragDropContext>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n        isLoading: state.systemModule.isLoading,\n        users: state.userModule.users\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    loadBoard,\n    update,\n    loadUsers,\n    setBoard\n    // loading\n}\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Chat.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Home.jsx",["219","220","221","222","223","224","225","226","227"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/BoardList.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/userActions.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/reviewActions.js",["228","229"],"import { reviewService } from '../../services/reviewService'\r\nimport { userService } from '../../services/userService'\r\nimport { socketService, SOCKET_EVENT_REVIEW_ADDED } from '../../services/generalService/socketService'\r\n\r\n\r\nexport function loadReviews() {\r\n  return async dispatch => {\r\n    try {\r\n      const reviews = await reviewService.query()\r\n      dispatch({ type: 'SET_REVIEWS', reviews })\r\n\r\n      // socketService.on(SOCKET_EVENT_REVIEW_ADDED, review =>{\r\n      //   dispatch({ type: 'ADD_REVIEW', review })\r\n      // })\r\n\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in loadReviews', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function addReview(review) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedReview = await reviewService.add(review)\r\n      dispatch({ type: 'ADD_REVIEW', review: addedReview })\r\n\r\n      const score = await userService.increaseScore()\r\n      dispatch({ type: 'SET_SCORE', score })\r\n      \r\n    } catch (err) {\r\n      console.log('ReviewActions: err in addReview', err)\r\n    }\r\n  }\r\n}\r\n\r\nexport function removeReview(reviewId) {\r\n  return async dispatch => {\r\n    try {\r\n      await reviewService.remove(reviewId)\r\n      dispatch({ type: 'REMOVE_REVIEW', reviewId })\r\n    } catch (err) {\r\n      console.log('ReviewActions: err in removeReview', err)\r\n    }\r\n  }\r\n}\r\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/boardsAction.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/userService.js",["230"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/socketService.js",["231"],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/Upload.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskList.jsx",["232","233"],"import { TaskPreview } from '../board/TaskPreview'\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Component } from 'react';\nimport { boardService } from '../../services/boardService.js'\nimport { utilService } from '../../services/generalService/utilService.js'\nimport { HiOutlineMenuAlt4 } from 'react-icons/hi'\nconst EMPTY_TASK = { title: '' }\nconst EMPTY_GROUP = { title: '' }\n\nexport class TaskList extends Component {\n    state = {\n        group: EMPTY_GROUP,\n        task: EMPTY_TASK\n    }\n    componentDidMount() {\n        this.setState({ group: this.props.group })\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            task: {\n                ...prevState.task,\n                [field]: value,\n            }\n        }))\n    }\n\n    updateGroup = () => {\n        if (!this.state.group.title) return;\n        const copyBoard = { ...this.props.board };\n        this.props.updateBoard(copyBoard)\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\n        copyBoard.groups[groupIdx] = this.state.group\n        console.log(copyBoard)\n    }\n\n    handleChangeGroup = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            group: {\n                ...prevState.group,\n                [field]: value,\n            }\n        }))\n    }\n\n    onAddTask = () => {\n        if (!this.state.task.title) return;\n        const { group } = this.props\n        const copyBoard = { ...this.props.board };\n        const groupIdx = boardService.getGroupIdxById(copyBoard, group.id)\n        copyBoard.groups[groupIdx].tasks.push(utilService.formatNewTask(this.state.task))\n        this.props.updateBoard(copyBoard)\n        this.setState({ task: EMPTY_TASK })\n    }\n\n    render() {\n        const { board, group, updateBoard, index } = this.props\n\n        return (\n            <Draggable index={index} draggableId={group.id} >\n                {(provided, snapshot) => {\n                    return <li className=\"group br-3\"\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                    >\n                        <form className=\"\" onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.updateGroup()\n\n                        }}>\n                            <div className=\"group-title w-100 flex center space-between pb-2\">\n                                <input className=\"app-input font-w2 font-m lh-20 \" onBlur={this.updateGroup} type=\"text\" value={this.state.group.title} name=\"title\" onChange={this.handleChangeGroup} />\n                                <div className=\"group-menu\">...</div>\n                            </div>\n                        </form>\n                        <div className=\"wrap-task-list\">\n\n                            <div className=\"task-list flex column center content-center\">\n                                <Droppable  \n                                droppableId={group.id} \n                                type='task'>\n                                    {(provided) => (\n                                        <div className=\"task-list-droppable\" \n                                        ref={provided.innerRef} \n                                        {...provided.droppableProps} \n                                        >\n                                            {group.tasks.map((task, idx) => (\n                                                <TaskPreview key={task.id}\n                                                    board={board}\n                                                    index={idx}\n                                                    groupId={group.id}\n                                                    updateBoard={updateBoard}\n                                                    task={task}\n                                                />\n                                            ))}\n                                            {!utilService.isFalse(group.tasks) && <h1 className=\"task-title fam-1 font-m\">No tasks to show</h1>}\n                                            {provided.placeholder}\n                                        </div>\n                                    )}\n                                </Droppable>\n                            </div>\n                            <form onSubmit={(ev) => {\n                                ev.preventDefault()\n                                this.onAddTask()\n                                console.log(ev)\n                            }}>\n                                <input className=\"add-task\" value={this.state.task.title} type=\"text\" placeholder=\"+ Add another card\" name=\"title\" onChange={this.handleChange} />\n                            </form>\n                        </div>\n                    </li>\n                }}\n            </Draggable>)\n        /*    </div> */\n    }\n}","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/reviewService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/boardService.js",["234"],"import { utilService } from './generalService/utilService.js'\r\nimport { storageService } from './generalService/asyncStorageService.js'\r\nimport {httpService} from '../services/generalService/httpService.js'\r\n\r\nwindow.storageService = storageService;\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    remove,\r\n    update,\r\n    add,\r\n    getGroupById,\r\n    getTaskById,\r\n    getGroupIdxById,\r\n    checklistPreview,\r\n    getTaskIdxById,\r\n    checklistPrecent\r\n}\r\n\r\n\r\nfunction query() {\r\n    // return storageService.query(STORAGE_KEY)\r\n    return httpService.get('board')\r\n}\r\n\r\nfunction getById(boardId) {\r\n    // const board = storageService.get(STORAGE_KEY, boardId);\r\n    // return board\r\n    return httpService.get(`board/${boardId}`)\r\n\r\n}\r\n\r\nfunction remove(boardId) {\r\n    return httpService.delete(`board/${boardId}`)\r\n}\r\n\r\nasync function add() {\r\n    // const newBoard = _createBoard()\r\n    // const savedBoard = storageService.post(STORAGE_KEY, newBoard)\r\n    // return savedBoard\r\n    const board = {title: 'new' ,style:{}}\r\n    const res = await httpService.post(`board`, board)\r\n    return res\r\n}\r\n\r\nasync function update(board) {\r\n    // return storageService.put(STORAGE_KEY, board)\r\n    board.activities = []\r\n    \r\n    const res = await httpService.put(`board/${board._id}`, board)\r\n    return res\r\n\r\n}\r\n\r\n//task crud\r\nfunction getGroupById(board, groupId) {\r\n    return board.groups.find(group => group.id === groupId);\r\n}\r\n\r\nfunction getGroupIdxById(board, groupId) {\r\n    return board.groups.findIndex(group => group.id === groupId);\r\n}\r\n\r\nfunction getTaskIdxById(group, taskId) {\r\n    return group.tasks.findIndex(task => task.id === taskId);\r\n}\r\n\r\nfunction getTaskById(group, taskId) {\r\n    return group.tasks.find(task => task.id === taskId)\r\n}\r\n\r\nfunction checklistPreview(task) {\r\n    const checklists = task.checklists\r\n    let isDone = false\r\n    let allTodos = 0;\r\n    let doneTodos = 0;\r\n    checklists.forEach(checkList => {\r\n        allTodos += checkList.todos.length;\r\n        checkList.todos.forEach(todo => {\r\n            if (todo.isDone) doneTodos++\r\n        })\r\n    });\r\n    if (doneTodos === allTodos && allTodos) isDone = true;\r\n    const str = `${doneTodos}/${allTodos}`\r\n    const res = { str, isDone}\r\n    return res\r\n}\r\n\r\nfunction checklistPrecent(checklist){\r\n    let doneTodos = 0;\r\n    checklist.todos.forEach(todo => {\r\n        if(todo.isDone) doneTodos++\r\n    })\r\n    const precent = (doneTodos / checklist.todos.length) * 100 \r\n    console.log('doneTodos',checklist.todos.length);\r\n    \r\n    return precent\r\n}","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/httpService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/cloudinaryService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/utilService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/services/generalService/asyncStorageService.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/TaskPreview.jsx",["235","236","237","238","239","240"],"import { Link } from 'react-router-dom'\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Provider } from 'react-redux';\nimport { boardService } from '../../services/boardService.js'\nimport { BsCheckBox } from 'react-icons/bs'\nimport { FaRegCommentDots } from 'react-icons/fa'\nimport { AiOutlineClockCircle, AiOutlineClose } from 'react-icons/ai'\nimport { GrTextAlignFull } from 'react-icons/gr'\nimport { connect } from 'react-redux'\nimport { utilService } from '../../services/generalService/utilService'\nimport React, { Component } from 'react'\nimport { UserPreview } from './UserPreview.jsx';\n\nimport { toggleLabel } from '../../store/actions/systemAction.js';\n\n\n\n// export function TaskPreview({ board, index, task, updateBoard, groupId }) {\nclass _TaskPreview extends Component {\n\n    getStyle = (style, snapshot) => {\n        if (!snapshot.isDropAnimating) {\n            return style;\n        }\n        const { moveTo, curve, duration } = snapshot.dropAnimation;\n        // move to the right spot\n        const translate = `translate(${moveTo.x}px, ${moveTo.y}px)`;\n        // add a bit of turn for fun\n        const rotate = 'rotate(0.01turn)';\n\n        // patching the existing style\n        return {\n            ...style,\n            background: '#fff',\n            transform: `${translate} ${rotate}`,\n            // slowing down the drop because we can\n            transition: `all ${curve} 0.2s`,\n        };\n    }\n\n    onRemoveTask = (taskId) => {\n        const { board, index, task, updateBoard, groupId } = this.props\n        const group = board.groups[boardService.getGroupIdxById(board, groupId)]\n        board.groups[boardService.getGroupIdxById(board, groupId)].tasks.splice(boardService.getTaskIdxById(group, taskId), 1)\n        updateBoard({ ...board })\n    }\n    render() {\n        const { board, index, task, updateBoard, groupId } = this.props\n        const isLabelOpen = this.props.isLabelOpen;\n        return <Draggable\n            draggableId={task.id}\n            index={index}\n        // isDragDisabled={false}\n        >\n            {(provided, snapshot) => {\n                return (\n                    <div\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging && !snapshot.isDropAnimating ? 'true' : 'false'}\n                        style={this.getStyle(provided.draggableProps.style, snapshot)}\n                    >\n                        <div className=\"wrap-list-task br-3\">\n                            <div className=\"wrap-task-prev\">\n                                <div className=\"task-preview flex column\">\n                                    {/* <Link to={`/board/${board._id}/${task.id}`}> */}\n                                    {utilService.isFalse(task.labelIds) &&\n                                        <div className=\"flex row space-between center w-100\">\n                                            <div className=\"label-task-prev\">\n                                                <div className=\"labels-container wrap flex\" onClick={(ev) => {\n                                                    ev.stopPropagation();\n                                                }}>\n                                                    {\n                                                        task.labelIds.map(labelId => {\n                                                            const label = board.labels.find(label => {\n                                                                return label.id === labelId;\n                                                            })\n\n                                                            if (label) {\n                                                                return <div\n                                                                    key={label.id}\n                                                                    className={`preview-label ${isLabelOpen && \"label-open\"}`}\n                                                                    onClick={() => this.props.toggleLabel(!isLabelOpen)}\n                                                                    style={{ backgroundColor: label.color }}\n                                                                >\n                                                                    {this.props.isLabelOpen && label.title}\n                                                                </div>\n                                                            }\n                                                        })}\n                                                </div>\n                                            </div>\n                                            <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.onRemoveTask(task.id) }}><AiOutlineClose /></span>\n                                        </div>\n                                    }\n\n                                    <Link to={`/board/${board._id}/${groupId}/${task.id}`}>\n\n\n                                        <h1 className=\"task-title fam-1 font-m\">{task.title}</h1>\n                                        <div className=\"task-mini-details flex w-100 content-start  gap-xs fam-1 c-stand\">\n                                            {utilService.isFalse(task.members) && <small className=\"flex center\">{task.members.map(member => { return <UserPreview user={member} /> }).splice(0, 3)}</small>}\n                                            {utilService.isFalse(task.comments) && <small className=\"flex center\"><FaRegCommentDots /></small>}\n                                            {utilService.isFalse(task.checklists) && <div className={`flex row center ${boardService.checklistPreview(task).isDone && \"check-list-done-prev\"}`}>\n                                                <BsCheckBox />\n                                                <small>{boardService.checklistPreview(task).str}</small>\n                                            </div>}\n                                            {task.dueDate && <div className=\"flex row center\">\n                                                <AiOutlineClockCircle />\n                                                <small>\n                                                    {task.dueDate}\n                                                </small>\n                                            </div>}\n                                            {task.description && <small className=\"flex center\"><GrTextAlignFull /></small>}\n                                        </div>\n                                    </Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }\n            }\n        </Draggable>\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n        isLabelOpen : state.systemModule.isLabelsOpen\n    }\n}\nconst mapDispatchToProps = {\n    toggleLabel\n}\nexport const TaskPreview = connect(mapStateToProps, mapDispatchToProps)(_TaskPreview)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/data/board.js",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalWrapper.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/Overlay.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MiniBoard.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/UserPreview.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/MembersBoard.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardNavbar.jsx",["241"],"import { MembersBoard } from '../MembersBoard';\nimport { MdKeyboardArrowDown } from 'react-icons/md'\nimport { RiDashboardLine } from 'react-icons/ri'\nimport { AiOutlineStar } from 'react-icons/ai'\nimport { Component } from 'react';\nimport { BoardMembersModal } from './BoardMembersModal'\n\n\n\nexport class BoardNavbar extends Component {\n    state = {\n        title: this.props.board.title,\n        members: this.props.board.members\n    }\n\n\n    onAddMemberToBoard = (addedMember) => {\n        const { members } = this.state\n        const memberIdx = members.findIndex(member => member._id === addedMember._id)\n        if (memberIdx !== -1) {\n            members.splice(memberIdx, 1)\n        }\n        else members.push(addedMember)\n        const copyBoard = { ...this.props.board }\n        copyBoard.members = members\n        console.log(members)\n        this.props.updateBoard(copyBoard)\n    }\n\n    isMemberChecked = (memberCheck) => {\n        const memberIdx = this.state.members.findIndex(member => member._id === memberCheck._id)\n        if (memberIdx !== -1) {\n            return 'checked'\n        }\n        else return ''\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n    onChangeBoardName = () => {\n        const board = this.props.board\n        board.title = this.state.title\n        this.props.updateBoard(board)\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n        this.setState({ [field]: value })\n    }\n    render() {\n        const { board, onUpdate } = this.props\n        if (!board) return <div>Loading...</div>\n        return (\n            <nav className=\"board-navbar flex space-between font-1 c-white fam-1 mb-03\">\n                <ul className=\"left-bar flex center space-evenly \">\n                    <li className=\"btn-board\"><RiDashboardLine />Board<MdKeyboardArrowDown /></li>\n                    <li className=\"btn-board \"><AiOutlineStar /></li>\n                    <li className=\"btn-board bold\"><form onSubmit={(ev) => {\n                        ev.preventDefault()\n                        this.onChangeBoardName(ev)\n                    }}>\n                        <input type=\"text\" className=\"app-input nav-board-input font-w2 font-m lh-20 \" name=\"title\" onChange={this.handleChange} value={this.state.title} onBlur={this.onChangeBoardName} />\n                    </form></li>\n                    <li className=\"btn-board\">Visiblity</li>\n                    <li className=\"members-wrap\">\n                        <li className=\"btn-board \" onClick={() => { this.toggleModal('board-members-wrap-modal') }}>Invite</li>\n                        <BoardMembersModal users={this.props.users} isMemberChecked={this.isMemberChecked} onAddMemberToBoard={this.onAddMemberToBoard} toggleModal={() => { this.toggleModal() }} />\n                    </li>\n                    <li className=\"btn-board\" ><MembersBoard /></li>\n                </ul>\n                <ul className=\"right-bar flex center\">\n                    <li className=\"btn-board\">Show-menu</li>\n                </ul>\n            </nav>\n        )\n    }\n}\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/TaskDetails.jsx",["242","243","244","245","246","247","248","249"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { boardService } from '../../../services/boardService.js'\nimport { remove, add, loadBoard, update } from '../../../store/actions/boardsAction.js';\nimport onClickOutside from \"react-onclickoutside\";\nimport { BsCardChecklist } from 'react-icons/bs'\nimport { GrTextAlignFull } from 'react-icons/gr'\n\nimport { utilService } from '../../../services/generalService/utilService.js';\nimport { CheckList } from './CheckList';\nimport { ActionList } from './action/ActionList';\nimport { UserPreview } from '../UserPreview.jsx';\n// import {TaskTitle} from '../taskDetails/TaskTitle';\n\n\n\nclass _TaskDetails extends Component {\n    state = {\n        group: null,\n        task: null,\n        onFocus: false\n    }\n\n    componentDidMount() {\n        const { boardId, taskId, groupId } = this.props.match.params;\n        const board = { ...this.props.board };\n        const group = boardService.getGroupById(board, groupId);\n        const task = boardService.getTaskById(group, taskId);\n        this.setState({ ...this.state, group, task })\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.props !== prevProps){\n            const { boardId, taskId, groupId } = this.props.match.params;\n            const board = { ...this.props.board };\n            const group = boardService.getGroupById(board, groupId);\n            const task = boardService.getTaskById(group, taskId);\n            this.setState({ ...this.state, group, task })\n        }\n    }\n\n    handleChange = ({ target }) => {\n        const field = target.name\n        const value = target.value\n\n        this.setState(prevState => ({\n            task: {\n                ...prevState.task,\n                [field]: value,\n            }\n        }))\n    }\n\n    handleClickOutside = evt => {\n        // ..handling code goes here...\n    };\n\n    updateTask = () => {\n        if (!this.state.task.title) return;\n        const copyBoard = { ...this.props.board };\n        const groupIdx = boardService.getGroupIdxById(copyBoard, this.state.group.id)\n        const taskIdx = boardService.getTaskIdxById(this.state.group, this.state.task.id)\n        copyBoard.groups[groupIdx].tasks[taskIdx] = this.state.task\n        this.props.update(copyBoard)\n    }\n\n    updateTaskState = (task) => {\n        this.setState({ task })\n    }\n\n    onAddCheckList = (task) => {\n        if (!task.checklists) {\n            task.checklists = [];\n        }\n        task.checklists.push({ id: utilService.makeId(), title: 'Checklist', todos: [] })\n        this.setState({ task })\n        this.updateTask()\n    }\n    onRemoveCheckList = (ChecklistIdx) => {\n        const { task } = this.state\n        const removed = task.checklists.splice(ChecklistIdx, 1)\n        this.setState({ task: { ...task } }, this.updateTask)\n    }\n\n    onDeleteTask = () => {\n        const { boardId } = this.props.match.params;\n        const copyboard = this.props.board\n        const { task, group } = this.state\n        group.tasks.splice(boardService.getTaskIdxById(group, task.id), 1)\n        copyboard.groups[boardService.getGroupIdxById(copyboard, group.id)] = group\n        this.props.update(copyboard)\n        this.props.history.push(`/board/${boardId}`)\n    }\n\n    onAddMemberToTask = (addedMember) => {\n        const { task } = this.state;\n        const memberIdx = task.members.findIndex(member => member._id === addedMember._id)\n        if (memberIdx !== -1) {\n            task.members.splice(memberIdx, 1)\n        }\n        else task.members.push(addedMember)\n        this.updateTask()\n    }\n\n    onSaveDueDate = (date) =>{\n        const {task} = this.state;\n        task.dueDate = {date,isDone:false}\n        this.updateTask()\n    }\n\n    isMemberChecked = (memberCheck) => {\n        const { task } = this.state;\n        const memberIdx = task.members.findIndex(member => member._id === memberCheck._id)\n        if (memberIdx !== -1) {\n            return 'checked'\n        }\n        else return ''\n    }\n\n    isDueDateDone = (val) => {\n        const { task } = this.state;\n        console.log('val',val)\n\n    }\n\n    toggleModal = (className) => {\n        const modals = document.querySelectorAll('.action-modal');\n        const currModal = document.querySelector(`.${className}`);\n        if (modals) {\n            modals.forEach(\n                el => el.classList.add('d-none'));\n        }\n        if (currModal) {\n            currModal.classList.remove('d-none');\n        }\n    }\n\n    onAddLabelTask = (labelId) =>{\n        const task = this.state;\n        if(!task.labels){\n            task.labels = [];\n        }\n        task.labels.push(labelId);\n    }\n\n    render() {\n        const { task } = this.state;\n        const { board } = this.props\n        if (!task) return <h1>Loading...</h1>\n        return (\n            <section className=\"task-details w-50 flex bg-modal pos-fixed c-stand fam-1 pad-1\">\n                <div className=\"info-task flex column w-70 h-100 content-start\">\n                    {/* Title */}\n                    <form className=\"task-title flex column content-start pb-2 w-100\" onSubmit={(ev) => {\n                        ev.preventDefault()\n                        this.updateTask()\n                    }}>\n                        <div className=\"task-title flex center h-33\">\n                            <label htmlFor=\"title\" className=\"font-6 flex center\"><BsCardChecklist className=\"ico\" />\n                                <input onBlur={this.updateTask} type=\"text\" value={task.title} name=\"title\" className=\"input-details \" onChange={this.handleChange} />\n                            </label>\n                        </div>\n                        <h3 className=\"content-gap fam-1 font-2 left-self h-20 center pb-4\">in list {this.state.group.title}</h3>\n                    </form>\n                    <section className=\"flex\">\n                        <div className=\"task-members\">\n                            <ul className=\"flex center\">\n                                {task.members.map(member => {\n                                    return <UserPreview user={member}/>\n                                })}\n                                {task.members.length > 0 && <span onClick={() => { this.toggleModal('members-wrap-modal') }} className=\"avatar\">+</span>}\n                            </ul>\n                        </div>\n                        <div className=\"task-labels flex center\">\n                            <ul className=\"flex center\">\n                                {task.labelIds && task.labelIds.map(labelId => {\n                                    const label = board.labels.find(label => {\n                                        return label.id === labelId;\n                                    })\n                                    if (label)\n                                        return <div key={label.id} className={`details-label bold ${this.state.isLabelOpen && \"label-open\"} flex center`} onClick={() => { this.toggleModal('label-wrap-modal') }} style={{ backgroundColor: label.color }}>\n                                            {label.title}\n                                        </div>\n                                })}\n                                {task.labelIds && <span onClick={() => { this.toggleModal('label-wrap-modal') }} className=\"avatar\">+</span>}\n                            </ul>\n                        </div>\n                        {task.dueDate && <div className=\"task-duedate flex center\">\n                            <input onChange={(ev) => {this.isDueDateDone(ev.target.value)}} type=\"checkbox\" />\n                              <p>{task.dueDate}</p> \n                        </div>}\n                    </section>\n                    <section className=\"desc-section\">\n                        <div className=\"desc-header flex row\">\n                            <GrTextAlignFull /><label>Description</label>\n                        </div>\n                        <form onSubmit={(ev) => {\n                            ev.preventDefault()\n                            this.updateTask()\n                        }}>\n\n                            <textarea placeholder=\"Add a description for this task...\" onBlur={this.updateTask} type=\"textArea\" value={task.description} name=\"description\" className=\"w-90 input-details content-gap\" onChange={this.handleChange} />\n                        </form>\n                    </section>\n                    {utilService.isFalse(task.checklists) && <ul className=\"todos clean-list\">\n                        {task.checklists.map((checklist, idx) => {\n                            return <CheckList key={checklist.id} onRemoveCheckList={this.onRemoveCheckList} idx={idx} checklists={task.checklists} handleChange={this.handleChange} updateTask={this.updateTask} checklist={checklist} updateTaskState={this.updateTaskState} task={task} />\n                        })}\n                    </ul>}\n                    <section className=\"comment-section\">\n                        {/* <div className=\"new-comment\">\n                            <div className=\"task-memeber-img\">\n                                <img src=\"\" />\n                                <form>\n                                    <div class=\"comment-box\">\n                                        <textarea class=\"comment-textarea\" placeholder=\"Write a comment...\" name=\"txt\">\n                                        </textarea>\n                                    </div>\n                                </form>\n                            </div>\n                        </div> */}\n                        {task.comments && <ul className=\"comments clean-list\">\n                            {task.comments.map(comment => {\n                                return <li className=\"full-comment flex row\">\n                                    <img className=\"avatar\" src={comment.byMember.imgUrl} />\n                                    <div className=\"comment-text flex column\">\n                                        <h3 className=\"commenter-name\">{comment.byMember.fullname}</h3>\n                                        {comment.txt}\n                                        <small>{utilService.timeAgo(comment.createdAt)}</small>\n                                    </div>\n                                </li>\n                            })}\n                        </ul>}\n                    </section>\n                </div>\n                <ActionList onSaveDueDate={this.onSaveDueDate} onDeleteTask={this.onDeleteTask} toggleModal={this.toggleModal} isMemberChecked={this.isMemberChecked} onAddMemberToTask={this.onAddMemberToTask} task={task} onAddCheckList={this.onAddCheckList} />\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n    remove,\n    add,\n    loadBoard,\n    update\n}\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(_TaskDetails)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckList.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/CheckListStatus.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/ActionList.jsx",["250","251"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { MdLabelOutline } from 'react-icons/md'\nimport { AiOutlineClockCircle, AiOutlineCheckSquare, AiOutlineDelete } from 'react-icons/ai'\nimport { BiCopy } from 'react-icons/bi'\nimport { FiUsers } from 'react-icons/fi'\nimport { BsImage, BsArrowRight } from 'react-icons/bs'\nimport { LabelModal } from './actionModal/LabelModal';\nimport { MembersModal } from './actionModal/MembersModal'\nimport { DueDateModal } from './actionModal/DueDateModal'\n\n\nclass _ActionList extends Component {\n    state = {\n        task: null\n    }\n\n    componentDidMount() {\n\n        this.setState({\n            task: this.props.task\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n    }\n\n    render() {\n        const { task } = this.state\n        if (!task) return <h1>Loading...</h1>\n        return (\n            <div className=\"menu-task flex column w-40 content-start right\">\n                <div className=\"close-details fam-2 font-1 bold pad-1\">X</div>\n                <div className=\"details-action flex column center pad-1 w-80\">\n                    <label htmlFor=\"actions\" className=\"font-m pb-3\">ACTIONS</label>\n                    <ul className=\"action-menu flex column w-100 clean-list font-m pad-0 fw-2\">\n\n                        <li className=\"label-wrap\">\n                            <li className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('label-wrap-modal') }}><MdLabelOutline />Labels</li>\n                            <LabelModal toggleModal={() => { this.props.toggleModal() }} />\n                        </li>\n\n                        <li className=\"members-wrap\">\n                            <li className=\"btn-action w-100 \" onClick={() => {this.props.toggleModal('members-wrap-modal')}}><FiUsers />Members</li>\n                            <MembersModal isMemberChecked={this.props.isMemberChecked} onAddMemberToTask={this.props.onAddMemberToTask} toggleModal={() => { this.props.toggleModal() }} />\n                        </li>\n\n                        <li className=\"duedate-wrap\">\n                            <li className=\"btn-action w-100 \" onClick={() => { this.props.toggleModal('duedate-wrap-modal') }}><AiOutlineClockCircle />DueDate</li>\n                            <DueDateModal onSaveDueDate={this.props.onSaveDueDate} toggleModal={() => { this.props.toggleModal() }} />\n                        </li>\n\n                        <li onClick={() => { this.props.onAddCheckList(task) }} className=\"btn-action\"><AiOutlineCheckSquare />Checklist</li>\n                        <li className=\"btn-action\"><BsImage />Image</li>\n                        <li className=\"btn-action\"><BsArrowRight />Move</li>\n                        <li className=\"btn-action\"><BiCopy />Copy</li>\n                        <li onClick={() => { this.props.onDeleteTask() }} className=\"btn-action\"><AiOutlineDelete />Delete</li>\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        board: state.boardModule.board,\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const ActionList = connect(mapStateToProps, mapDispatchToProps)(_ActionList)\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/LabelModal.jsx",["252"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { ModalAction } from '../../../../shared/ModalAction';\nimport { AiOutlineClose } from 'react-icons/ai'\nimport { LabelTask } from '../LabelTask'\n\n\n\nclass _LabelModal extends Component {\n    state = {\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n    render() {\n        const labels = this.props.board.labels;\n        console.log(labels);\n        return <div className=\"action-modal label-wrap-modal d-none p-abs flex\">\n            <ModalAction>\n                <div className=\"label-modal p-abs flex column pad-1\">\n                    <div className=\"header-modal font-1 fam-1 fw-2 flex center content-end gap-5 w-70\">\n                        <h1 className=\"fam-1 font-1 \">Label</h1>\n                        <span className=\"cur-pointer fam-1 font-s bold\" onClick={() => { this.props.toggleModal('label-wrap-modal') }}><AiOutlineClose /></span>\n                    </div>\n                    <div className=\"action-content\">\n                        <ul>\n                            {labels.map((label, idx) => <LabelTask key={idx} label={label} />)}\n                        </ul>\n                    </div>\n                </div>\n            </ModalAction>\n        </div>\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const LabelModal = connect(mapStateToProps, mapDispatchToProps)(_LabelModal)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/MembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/shared/ModalAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/OverlayAction.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/store/actions/systemAction.js",["253"],"import { utilService } from '../../services/generalService/utilService';\n\nexport function loading() { // Action Creator\n    return async dispatch => {\n        try {\n            dispatch('LOADING_DONE');\n            dispatch('LOADING_START');\n            setTimeout(() => {\n                dispatch('LOADING_DONE');\n            }, 1500);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nexport function toggleLabel(toggleValue) {\n    return async dispatch => {\n        try {\n            const action = {\n                type: 'TOGGLE_LABEL',\n                value: toggleValue\n            }\n            dispatch(action)\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\n\n","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/LabelTask.jsx",["254","255"],"import React, { Component } from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { FiEdit2 } from 'react-icons/fi'\n\n\n\nclass _LabelTask extends Component {\n    state = {\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n    }\n\n    render() {\n        const label = this.props.label;\n        // console.log(this.props.board);\n        return (\n            <div className=\"label-input flex gap-2\">\n                <input type=\"text\" style={{ background: `${label.color}` }} className=\"label-input\" onChange={() => { console.log('aa'); }} onClick={() => this.toggleLabel()} />\n                <FiEdit2 />\n            </div>\n        )\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        loggedInUser: state.userModule.loggedInUser,\n        board: state.boardModule.board\n    }\n}\nconst mapDispatchToProps = {\n\n}\n\n\nexport const LabelTask = connect(mapStateToProps, mapDispatchToProps)(_LabelTask)","/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/pages/Login.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/boardNavbar/BoardMembersModal.jsx",[],"/Users/tamirmatz/Desktop/Sprint 4/taskman/frontend/src/cmps/board/taskDetails/action/actionModal/DueDateModal.jsx",[],{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":14},{"ruleId":"260","severity":1,"message":"264","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":17},{"ruleId":"260","severity":1,"message":"265","line":8,"column":27,"nodeType":"262","messageId":"263","endLine":8,"endColumn":36},{"ruleId":"260","severity":1,"message":"266","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":17},{"ruleId":"260","severity":1,"message":"267","line":7,"column":10,"nodeType":"262","messageId":"263","endLine":7,"endColumn":21},{"ruleId":"260","severity":1,"message":"268","line":7,"column":23,"nodeType":"262","messageId":"263","endLine":7,"endColumn":32},{"ruleId":"260","severity":1,"message":"269","line":7,"column":34,"nodeType":"262","messageId":"263","endLine":7,"endColumn":46},{"ruleId":"260","severity":1,"message":"270","line":8,"column":10,"nodeType":"262","messageId":"263","endLine":8,"endColumn":19},{"ruleId":"271","severity":1,"message":"272","line":41,"column":11,"nodeType":"273","endLine":41,"endColumn":57},{"ruleId":"271","severity":1,"message":"272","line":51,"column":11,"nodeType":"273","endLine":51,"endColumn":64},{"ruleId":"271","severity":1,"message":"272","line":60,"column":11,"nodeType":"273","endLine":60,"endColumn":60},{"ruleId":"271","severity":1,"message":"272","line":68,"column":11,"nodeType":"273","endLine":68,"endColumn":60},{"ruleId":"260","severity":1,"message":"274","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":23},{"ruleId":"260","severity":1,"message":"275","line":3,"column":25,"nodeType":"262","messageId":"263","endLine":3,"endColumn":50},{"ruleId":"260","severity":1,"message":"276","line":3,"column":7,"nodeType":"262","messageId":"263","endLine":3,"endColumn":23},{"ruleId":"260","severity":1,"message":"277","line":43,"column":7,"nodeType":"262","messageId":"263","endLine":43,"endColumn":20},{"ruleId":"260","severity":1,"message":"278","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":25},{"ruleId":"260","severity":1,"message":"279","line":6,"column":10,"nodeType":"262","messageId":"263","endLine":6,"endColumn":27},{"ruleId":"260","severity":1,"message":"280","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":21},{"ruleId":"260","severity":1,"message":"281","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":18},{"ruleId":"260","severity":1,"message":"282","line":34,"column":32,"nodeType":"262","messageId":"263","endLine":34,"endColumn":40},{"ruleId":"260","severity":1,"message":"283","line":51,"column":24,"nodeType":"262","messageId":"263","endLine":51,"endColumn":29},{"ruleId":"260","severity":1,"message":"284","line":51,"column":31,"nodeType":"262","messageId":"263","endLine":51,"endColumn":35},{"ruleId":"260","severity":1,"message":"285","line":57,"column":37,"nodeType":"262","messageId":"263","endLine":57,"endColumn":48},{"ruleId":"286","severity":1,"message":"287","line":82,"column":80,"nodeType":"288","messageId":"289","endLine":82,"endColumn":82},{"ruleId":"260","severity":1,"message":"290","line":26,"column":24,"nodeType":"262","messageId":"263","endLine":26,"endColumn":32},{"ruleId":"260","severity":1,"message":"291","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":14},{"ruleId":"260","severity":1,"message":"292","line":6,"column":8,"nodeType":"262","messageId":"263","endLine":6,"endColumn":22},{"ruleId":"260","severity":1,"message":"293","line":26,"column":17,"nodeType":"262","messageId":"263","endLine":26,"endColumn":24},{"ruleId":"260","severity":1,"message":"293","line":35,"column":21,"nodeType":"262","messageId":"263","endLine":35,"endColumn":28},{"ruleId":"260","severity":1,"message":"294","line":82,"column":15,"nodeType":"262","messageId":"263","endLine":82,"endColumn":22},{"ruleId":"260","severity":1,"message":"284","line":122,"column":17,"nodeType":"262","messageId":"263","endLine":122,"endColumn":21},{"ruleId":"286","severity":1,"message":"287","line":177,"column":77,"nodeType":"288","messageId":"289","endLine":177,"endColumn":79},{"ruleId":"271","severity":1,"message":"272","line":226,"column":37,"nodeType":"273","endLine":226,"endColumn":93},{"ruleId":"260","severity":1,"message":"291","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":14},{"ruleId":"260","severity":1,"message":"295","line":2,"column":16,"nodeType":"262","messageId":"263","endLine":2,"endColumn":23},{"ruleId":"260","severity":1,"message":"292","line":4,"column":8,"nodeType":"262","messageId":"263","endLine":4,"endColumn":22},{"ruleId":"260","severity":1,"message":"280","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":21},{"ruleId":"260","severity":1,"message":"291","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":14},{"ruleId":"260","severity":1,"message":"295","line":2,"column":16,"nodeType":"262","messageId":"263","endLine":2,"endColumn":23},"no-native-reassign",["296"],"no-negated-in-lhs",["297"],"no-unused-vars","'Chat' is defined but never used.","Identifier","unusedVar","'loading' is defined but never used.","'Draggable' is defined but never used.","'connect' is defined but never used.","'loadReviews' is defined but never used.","'addReview' is defined but never used.","'removeReview' is defined but never used.","'loadUsers' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'socketService' is defined but never used.","'SOCKET_EVENT_REVIEW_ADDED' is defined but never used.","'SCORE_FOR_REVIEW' is assigned a value but never used.","'socketIsReady' is assigned a value but never used.","'DragDropContext' is defined but never used.","'HiOutlineMenuAlt4' is defined but never used.","'utilService' is defined but never used.","'Provider' is defined but never used.","'duration' is assigned a value but never used.","'index' is assigned a value but never used.","'task' is assigned a value but never used.","'updateBoard' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'onUpdate' is assigned a value but never used.","'Link' is defined but never used.","'onClickOutside' is defined but never used.","'boardId' is assigned a value but never used.","'removed' is assigned a value but never used.","'NavLink' is defined but never used.","no-global-assign","no-unsafe-negation"]